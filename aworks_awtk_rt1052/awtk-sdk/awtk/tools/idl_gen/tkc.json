[
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为event对象。\n\n> 供脚本语言使用",
        "name": "event_cast",
        "return": {
          "type": "event_t*",
          "desc": "event对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取event类型。",
        "name": "event_get_type",
        "return": {
          "type": "uint32_t",
          "desc": "返回event类型。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建event对象。\n\n主要给脚本语言使用。",
        "name": "event_create",
        "return": {
          "type": "event_t*",
          "desc": "返回事件对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "clone事件对象。",
        "name": "event_clone",
        "return": {
          "type": "event_t*",
          "desc": "返回事件对象。"
        }
      },
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁事件对象。\n\n主要给脚本语言使用。",
        "name": "event_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "void*",
            "name": "target",
            "desc": "目标对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化事件。",
        "name": "event_init",
        "return": {
          "type": "event_t",
          "desc": "事件对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "结构体的大小。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "time",
        "desc": "事件发生的时间。",
        "type": "uint64_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "target",
        "desc": "事件发生的目标对象。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "native_window_handle",
        "desc": "原生窗口句柄。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "事件基类。",
    "name": "event_t",
    "order": -100,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建emitter对象。",
        "name": "emitter_create",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化emitter对象。",
        "name": "emitter_init",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "事件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发事件。如果当前分发的回调函数返回RET_REMOVE，该回调函数将被移出。\n禁用状态下，本函数不做任何事情。",
        "name": "emitter_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "分发事件。\n> 对emitter_dispatch的包装，分发一个简单的事件。\n如果当前分发的回调函数返回RET_STOP，dispatch中断分发，并返回RET_STOP，否则返回RET_OK。",
        "name": "emitter_dispatch_simple_event",
        "return": {
          "type": "ret_t",
          "desc": ""
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "etype",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "handler",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "scriptable": "custom"
        },
        "desc": "注册指定事件的处理函数。",
        "name": "emitter_on",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于emitter_off。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "判断指定的事件和回调函数是否已经注册。",
        "name": "emitter_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示已经注册，否则表示没有注册。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          },
          {
            "type": "uint32_t",
            "name": "tag",
            "desc": "tag。"
          }
        ],
        "annotation": {},
        "desc": "注册指定事件的处理函数。",
        "name": "emitter_on_with_tag",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于emitter_off。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "event_type_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off_by_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off_by_ctx",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "tag",
            "desc": "tag。"
          }
        ],
        "annotation": {},
        "desc": "注销指定事件的处理函数。",
        "name": "emitter_off_by_tag",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          },
          {
            "type": "tk_destroy_t",
            "name": "on_destroy",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "on_destroy_ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置一个回调函数，在emitter被销毁时调用(方便脚本语言去释放回调函数)。",
        "name": "emitter_set_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          },
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "emitter_on返回的ID。"
          }
        ],
        "annotation": {},
        "desc": "通过ID查找emitter_item_t，主要用于辅助测试。",
        "name": "emitter_find",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "启用。",
        "name": "emitter_enable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "禁用。\n\n禁用后emitter_dispatch无效，但可以注册和注销。",
        "name": "emitter_disable",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {},
        "desc": "获取注册的回调函数个数，主要用于辅助测试。",
        "name": "emitter_size",
        "return": {
          "type": "uint32_t",
          "desc": "回调函数个数。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": "析构。",
        "name": "emitter_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁。",
        "name": "emitter_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "emitter_t*",
            "name": "emitter",
            "desc": "emitter对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为emitter对象(供脚本语言使用)。\n\n主要给脚本语言使用。",
        "name": "emitter_cast",
        "return": {
          "type": "emitter_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ctx",
            "desc": "emitter对象。"
          },
          {
            "type": "event_t*",
            "name": "e",
            "desc": "分发的事件。"
          }
        ],
        "annotation": {},
        "desc": "分发事件",
        "name": "emitter_forward",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "items",
        "desc": "注册的回调函数集合。",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "next_id",
        "desc": "下一次emitter_on返回的ID，emitter_on成功后会自动增加next_id。",
        "type": "uint32_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "disable",
        "desc": "禁用标志。禁用时dispatch无效。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "remove_curr_iter",
        "desc": "如果在回调函数中，emitter_off当前正在dispatch的回调函数，\n我们只是设置remove_curr_iter为TRUE，在分发完成后才执行。\nXXX: 如果要注销当前正在dispatch的回调函数，直接返回RET_REMOVE是最好的选择。",
        "type": "bool_t",
        "annotation": {
          "private": true
        }
      },
      {
        "name": "curr_iter",
        "desc": "当前正在dispatch的项。",
        "type": "emitter_item_t*",
        "annotation": {
          "private": true
        }
      }
    ],
    "header": "tkc/emitter.h",
    "desc": "事件分发器, 用于实现观察者模式。",
    "name": "emitter_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "初始化point对象。",
        "name": "point_init",
        "return": {
          "type": "point_t",
          "desc": "返回point对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "点。包括一个x坐标和一个y坐标。",
    "name": "point_t",
    "annotation": {
      "scriptable": true
    },
    "order": -10,
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "float_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "初始化point对象。",
        "name": "pointf_init",
        "return": {
          "type": "pointf_t",
          "desc": "返回point对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "点(浮点数)。包括一个x坐标和一个y坐标。",
    "name": "pointf_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "float",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "float",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "float",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "float",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "初始化rectf对象。",
        "name": "rectf_init",
        "return": {
          "type": "rectf_t",
          "desc": "返回rect对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "float",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "矩形。包括一个x坐标、y坐标、宽度和高度。",
    "name": "rectf_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建rect对象。\n\n> 主要供脚本语言使用。",
        "name": "rect_create",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置rect对象的xywh。\n\n> 主要供脚本语言使用。",
        "name": "rect_set",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "rect",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为rect对象。\n\n> 供脚本语言使用。",
        "name": "rect_cast",
        "return": {
          "type": "rect_t*",
          "desc": "rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁rect对象。\n\n> 主要供脚本语言使用。",
        "name": "rect_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          },
          {
            "type": "float_t",
            "name": "scale",
            "desc": "缩放比例。"
          }
        ],
        "annotation": {},
        "desc": "缩放rect对象。",
        "name": "rect_scale",
        "return": {
          "type": "rect_t*",
          "desc": "返回rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "初始化rect对象。",
        "name": "rect_init",
        "return": {
          "type": "rect_t",
          "desc": "返回rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "dst_r",
            "desc": "rect对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {},
        "desc": "合并两个rect对象。",
        "name": "rect_merge",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const rect_t*",
            "name": "r",
            "desc": "rect对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          }
        ],
        "annotation": {},
        "desc": "判断指定的点在rect范围内。",
        "name": "rect_contains",
        "return": {
          "type": "bool_t",
          "desc": "返回在rect范围内。"
        }
      },
      {
        "params": [
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "rect对象。"
          }
        ],
        "annotation": {},
        "desc": "确保rect在指定的大小范围内。",
        "name": "rect_fix",
        "return": {
          "type": "rect_t",
          "desc": "返回修复之后的rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "const rect_t*",
            "name": "r1",
            "desc": "rect对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r2",
            "desc": "rect对象。"
          }
        ],
        "annotation": {},
        "desc": "求两个rect的交集。",
        "name": "rect_intersect",
        "return": {
          "type": "rect_t",
          "desc": "返回交集。"
        }
      },
      {
        "params": [
          {
            "type": "const rect_t*",
            "name": "r1",
            "desc": "rect对象。"
          },
          {
            "type": "const rect_t*",
            "name": "r2",
            "desc": "rect对象。"
          }
        ],
        "annotation": {},
        "desc": "判断两个rect的是否存在交集。",
        "name": "rect_has_intersect",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "rectf_t*",
            "name": "r",
            "desc": "rect对象。"
          },
          {
            "type": "float_t",
            "name": "scale",
            "desc": "缩放比例。"
          }
        ],
        "annotation": {},
        "desc": "缩放rectf对象。",
        "name": "rectf_scale",
        "return": {
          "type": "rectf_t*",
          "desc": "返回rect对象。"
        }
      },
      {
        "params": [
          {
            "type": "const rect_t*",
            "name": "r1",
            "desc": "rect 对象。"
          }
        ],
        "annotation": {},
        "desc": "rect 类型转换到 rectf 类型。",
        "name": "rect_to_rectf",
        "return": {
          "type": "rectf_t",
          "desc": "返回 rectf_t 对象。"
        }
      },
      {
        "params": [
          {
            "type": "const rectf_t*",
            "name": "r",
            "desc": "rectf 对象。"
          }
        ],
        "annotation": {},
        "desc": "rectf 类型转换到 rect 类型。",
        "name": "rect_from_rectf",
        "return": {
          "type": "rect_t",
          "desc": "返回 rect 对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x",
        "desc": "x坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "y",
        "desc": "y坐标。",
        "type": "xy_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "w",
        "desc": "宽度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "h",
        "desc": "高度。",
        "type": "wh_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/rect.h",
    "desc": "矩形。包括一个x坐标、y坐标、宽度和高度。",
    "name": "rect_t",
    "order": -10,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "引用计数减1。引用计数为0时，销毁对象。",
        "name": "tk_object_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "引用计数加1。",
        "name": "tk_object_ref",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "clone对象。",
        "name": "tk_object_clone",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "const object_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          }
        ],
        "annotation": {},
        "desc": "创建对象。\n\n> 仅供子类调用。",
        "name": "tk_object_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "const object_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          },
          {
            "type": "uint32_t",
            "name": "extra_data_size",
            "desc": "额外的内存大小。"
          }
        ],
        "annotation": {},
        "desc": "创建对象。\n\n> 仅供子类调用。",
        "name": "tk_object_create_ex",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象的类型名称。",
        "name": "tk_object_get_type",
        "return": {
          "type": "const char*",
          "desc": "返回对象的类型名称。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象的描述信息。",
        "name": "tk_object_get_desc",
        "return": {
          "type": "const char*",
          "desc": "返回对象的描述信息。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取对象占用内存的大小。",
        "name": "tk_object_get_size",
        "return": {
          "type": "uint32_t",
          "desc": "返回对象占用内存的大小。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断对象是否是集合。",
        "name": "tk_object_is_collection",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是集合，否则不是。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "对象的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置对象的名称。",
        "name": "tk_object_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "tk_object_t*",
            "name": "other",
            "desc": "比较的object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "比较两个对象。",
        "name": "tk_object_compare",
        "return": {
          "type": "int",
          "desc": "返回比较结果。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的值。",
        "name": "tk_object_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的字符串类型的值。",
        "name": "tk_object_get_prop_str",
        "return": {
          "type": "const char*",
          "desc": "返回指定属性的字符串类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的指针类型的值。",
        "name": "tk_object_get_prop_pointer",
        "return": {
          "type": "void*",
          "desc": "返回指定属性的指针类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的object类型的值。",
        "name": "tk_object_get_prop_object",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回指定属性的object类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的整数类型的值。",
        "name": "tk_object_get_prop_int",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的整数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的bool类型的值。",
        "name": "tk_object_get_prop_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回指定属性的bool类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。",
        "name": "tk_object_get_prop_float",
        "return": {
          "type": "float_t",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "double",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。",
        "name": "tk_object_get_prop_double",
        "return": {
          "type": "double",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "删除指定属性。",
        "name": "tk_object_remove_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的值。",
        "name": "tk_object_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的字符串类型的值。",
        "name": "tk_object_set_prop_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定属性的指针类型的值。",
        "name": "tk_object_set_prop_pointer",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "tk_object_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的object类型的值。",
        "name": "tk_object_set_prop_object",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的整数类型的值。",
        "name": "tk_object_set_prop_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的bool类型的值。",
        "name": "tk_object_set_prop_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "tk_object_set_prop_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "tk_object_set_prop_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "目标对象。"
          },
          {
            "type": "tk_object_t*",
            "name": "src",
            "desc": "源对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "拷贝指定的属性。",
        "name": "tk_object_copy_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "on_prop",
            "desc": "回调函数(data参数为named_value_t类型)。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历所有属性。",
        "name": "tk_object_foreach_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否存在指定的属性。",
        "name": "tk_object_has_prop",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "expr",
            "desc": "表达式。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回计算结果。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "计算一个表达式，表达式中引用的变量从prop中获取。",
        "name": "tk_object_eval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令的名称。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否可以执行指定的命令。",
        "name": "tk_object_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令的名称。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "执行指定的命令。",
        "name": "tk_object_exec",
        "alias": "execute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "触发EVT_PROPS_CHANGED事件。",
        "name": "tk_object_notify_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path，各级之间用.分隔。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否存在指定的属性。",
        "name": "tk_object_has_prop_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path，各级之间用.分隔。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回属性的值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定path属性的值。",
        "name": "tk_object_get_prop_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的字符串类型的值。",
        "name": "tk_object_get_prop_str_by_path",
        "return": {
          "type": "const char*",
          "desc": "返回指定属性的字符串类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的指针类型的值。",
        "name": "tk_object_get_prop_pointer_by_path",
        "return": {
          "type": "void*",
          "desc": "返回指定属性的指针类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的object类型的值。",
        "name": "tk_object_get_prop_object_by_path",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回指定属性的object类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的整数类型的值。",
        "name": "tk_object_get_prop_int_by_path",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的整数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的bool类型的值。",
        "name": "tk_object_get_prop_bool_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回指定属性的bool类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "float_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的浮点数类型的值。\n\ne",
        "name": "tk_object_get_prop_float_by_path",
        "return": {
          "type": "float_t",
          "desc": "返回指定属性的浮点数类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的值。",
        "name": "tk_object_set_prop_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的字符串类型的值。",
        "name": "tk_object_set_prop_str_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定属性的指针类型的值。",
        "name": "tk_object_set_prop_pointer_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "tk_object_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的object类型的值。",
        "name": "tk_object_set_prop_object_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的整数类型的值。",
        "name": "tk_object_set_prop_int_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的bool类型的值。",
        "name": "tk_object_set_prop_bool_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性的path。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的浮点数类型的值。",
        "name": "tk_object_set_prop_float_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "命令的path。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "检查是否可以执行指定的命令。",
        "name": "tk_object_can_exec_by_path",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "命令的path。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "执行指定的命令。",
        "name": "tk_object_exec_by_path",
        "alias": "execute_by_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int8_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int8类型的值。",
        "name": "tk_object_get_prop_int8",
        "return": {
          "type": "int8_t",
          "desc": "返回指定属性的int8类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int8类型的值。",
        "name": "tk_object_set_prop_int8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint8_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint8类型的值。",
        "name": "tk_object_get_prop_uint8",
        "return": {
          "type": "uint8_t",
          "desc": "返回指定属性的uint8类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint8类型的值。",
        "name": "tk_object_set_prop_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int16_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int16类型的值。",
        "name": "tk_object_get_prop_int16",
        "return": {
          "type": "int16_t",
          "desc": "返回指定属性的int16类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int16类型的值。",
        "name": "tk_object_set_prop_int16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint16_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint16类型的值。",
        "name": "tk_object_get_prop_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "返回指定属性的uint16类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint16类型的值。",
        "name": "tk_object_set_prop_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int32类型的值。",
        "name": "tk_object_get_prop_int32",
        "return": {
          "type": "int32_t",
          "desc": "返回指定属性的int32类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int32类型的值。",
        "name": "tk_object_set_prop_int32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint32类型的值。",
        "name": "tk_object_get_prop_uint32",
        "return": {
          "type": "uint32_t",
          "desc": "返回指定属性的uint32类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint32类型的值。",
        "name": "tk_object_set_prop_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的int64类型的值。",
        "name": "tk_object_get_prop_int64",
        "return": {
          "type": "int64_t",
          "desc": "返回指定属性的int64类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的int64类型的值。",
        "name": "tk_object_set_prop_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定属性的uint64类型的值。",
        "name": "tk_object_get_prop_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "返回指定属性的uint64类型的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性的名称。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定属性的uint64类型的值。",
        "name": "tk_object_set_prop_uint64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "属性路径。"
          },
          {
            "type": "const char**",
            "name": "next_path",
            "desc": "返回下一级属性路径。"
          }
        ],
        "annotation": {},
        "desc": "获取下一级子对象。\n> 属性路径之间使用符号\".\"分割，例如：name.sub_name。",
        "name": "tk_object_get_child_object",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回下一级子对象，如果找不到则返回 NULL。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "ref_count",
        "desc": "引用计数。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "对象的名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/object.h",
    "desc": "对象接口。",
    "name": "tk_object_t",
    "order": -9,
    "parent": "emitter_t",
    "annotation": {
      "scriptable": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为bool的值。",
        "name": "value_set_bool",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为bool的值。",
        "name": "value_bool",
        "return": {
          "type": "bool_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int8的值。",
        "name": "value_set_int8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int8的值。",
        "name": "value_int8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint8的值。",
        "name": "value_set_uint8",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint8的值。",
        "name": "value_uint8",
        "return": {
          "type": "int8_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int16的值。",
        "name": "value_set_int16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int16的值。",
        "name": "value_int16",
        "return": {
          "type": "int16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint16的值。",
        "name": "value_set_uint16",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint16的值。",
        "name": "value_uint16",
        "return": {
          "type": "uint16_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int32的值。",
        "name": "value_set_int32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int32的值。",
        "name": "value_int32",
        "return": {
          "type": "int32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint32的值。",
        "name": "value_set_uint32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为uint32的值。",
        "name": "value_uint32",
        "return": {
          "type": "uint32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int64的值。",
        "name": "value_set_int64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为int64的值。",
        "name": "value_int64",
        "return": {
          "type": "int64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为uint64的值。",
        "name": "value_set_uint64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为uint64的值。",
        "name": "value_uint64",
        "return": {
          "type": "uint64_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为pointer的值。",
        "name": "value_set_pointer",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为pointer的值。",
        "name": "value_pointer",
        "return": {
          "type": "void*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为float\\_t的值。",
        "name": "value_set_float",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为float\\_t的值。",
        "name": "value_float",
        "return": {
          "type": "float_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为float的值。",
        "name": "value_set_float32",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为float的值。",
        "name": "value_float32",
        "return": {
          "type": "float",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为double的值。",
        "name": "value_set_double",
        "alias": "value_set_float64",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为double的值。",
        "name": "value_double",
        "alias": "value_float64",
        "return": {
          "type": "double",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为字符串的值。",
        "name": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为字符串的值(并拷贝字符串)。",
        "name": "value_dup_str",
        "alias": "value_set_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为字符串的值(并拷贝字符串)。",
        "name": "value_dup_str_with_len",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const wchar_t*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为宽字符串的值。",
        "name": "value_set_wstr",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为字符串的值。",
        "name": "value_str",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "char*",
            "name": "buff",
            "desc": "用于格式转换的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型为字符串的值。",
        "name": "value_str_ex",
        "return": {
          "type": "const char*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取类型为宽字符串的值。",
        "name": "value_wstr",
        "return": {
          "type": "const wchar_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断value是否为空值。",
        "name": "value_is_null",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          },
          {
            "type": "value_t*",
            "name": "other",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "判断两个value是否相同。",
        "name": "value_equal",
        "return": {
          "type": "bool_t",
          "desc": "为空值返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "转换为int的值。",
        "name": "value_int",
        "return": {
          "type": "int",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为int的值。",
        "name": "value_set_int",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "tk_object_t*",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为object的值。",
        "name": "value_set_object",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "转换为object的值。",
        "name": "value_object",
        "return": {
          "type": "tk_object_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "待设置的值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置类型为token的值。",
        "name": "value_set_token",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取token的值。",
        "name": "value_token",
        "return": {
          "type": "uint32_t",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为带长度的字符串的值。",
        "name": "value_set_sized_str",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取为sized_str的值。",
        "name": "value_sized_str",
        "return": {
          "type": "sized_str_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为binary_data的值。",
        "name": "value_set_binary_data",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "const void*",
            "name": "value",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为binary_data的值(复制数据)。",
        "name": "value_dup_binary_data",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取为binary_data的值。",
        "name": "value_binary_data",
        "return": {
          "type": "binary_data_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为ubjson的值。",
        "name": "value_set_ubjson",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取为ubjson的值。",
        "name": "value_ubjson",
        "return": {
          "type": "binary_data_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          },
          {
            "type": "void*",
            "name": "value",
            "desc": "待设置的值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置类型为gradient的值。",
        "name": "value_set_gradient",
        "return": {
          "type": "value_t*",
          "desc": "value对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {},
        "desc": "获取为gradient的值。",
        "name": "value_gradient",
        "return": {
          "type": "binary_data_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "dst",
            "desc": "目的value对象。"
          },
          {
            "type": "value_t*",
            "name": "src",
            "desc": "源value对象。"
          }
        ],
        "annotation": {},
        "desc": "拷贝value的值。",
        "name": "value_copy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "dst",
            "desc": "目的value对象。"
          },
          {
            "type": "value_t*",
            "name": "src",
            "desc": "源value对象。"
          }
        ],
        "annotation": {},
        "desc": "深拷贝value的值。",
        "name": "value_deep_copy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建value对象。",
        "name": "value_create",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁value对象。",
        "name": "value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "v",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true
        },
        "desc": "重置value对象。",
        "name": "value_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_t*",
            "name": "value",
            "desc": "value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为value对象。\n\n> 供脚本语言使用",
        "name": "value_cast",
        "return": {
          "type": "value_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_type_t",
            "name": "type",
            "desc": "类型。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "获取指定类型数据大小。",
        "name": "value_type_size",
        "return": {
          "type": "uint32_t",
          "desc": "返回对应数据类型的长度。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/value.h",
    "desc": "一个通用数据类型，用来存放整数、浮点数、字符串和其它对象。\n\n在C/C++中，一般不需动态创建对象，直接声明并初始化即可。如：\n\n```c\nvalue_t v;\nvalue_set_int(&v, 100);\n```\n\n> 在脚本语言中，需要动态创建对象。",
    "name": "value_t",
    "order": -9,
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "max_thread_nr",
            "desc": "最大线程数。"
          },
          {
            "type": "uint16_t",
            "name": "min_idle_nr",
            "desc": "最小空闲线程数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread_pool对象。",
        "name": "action_thread_pool_create",
        "return": {
          "type": "action_thread_pool_t*",
          "desc": "action_thread_pool对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "max_thread_nr",
            "desc": "最大线程数。"
          },
          {
            "type": "uint16_t",
            "name": "min_idle_nr",
            "desc": "最小空闲线程数。"
          },
          {
            "type": "uint32_t",
            "name": "stack_size",
            "desc": "栈的大小。"
          },
          {
            "type": "tk_thread_priority_t",
            "name": "priority",
            "desc": "优先级"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread_pool对象。",
        "name": "action_thread_pool_create_ex",
        "return": {
          "type": "action_thread_pool_t*",
          "desc": "action_thread_pool对象。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_pool_t*",
            "name": "thread_pool",
            "desc": "action_thread_pool对象。"
          },
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          }
        ],
        "annotation": {},
        "desc": "执行action。",
        "name": "action_thread_pool_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_pool_t*",
            "name": "thread_pool",
            "desc": "action_thread_pool对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "action_thread_pool_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "max_thread_nr",
        "desc": "最大线程数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min_idle_nr",
        "desc": "最小空闲线程数",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "stack_size",
        "desc": "线程池中的线程栈大小",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "priority",
        "desc": "线程池中的线程优先级",
        "type": "tk_thread_priority_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/action_thread_pool.h",
    "desc": "action线程池。",
    "name": "action_thread_pool_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread对象。",
        "name": "action_thread_create",
        "return": {
          "type": "action_thread_t*",
          "desc": "action_thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "uint32_t",
            "name": "stack_size",
            "desc": "栈的大小。"
          },
          {
            "type": "tk_thread_priority_t",
            "name": "priority",
            "desc": "优先级。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread对象。",
        "name": "action_thread_create_ex",
        "return": {
          "type": "action_thread_t*",
          "desc": "action_thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_action_queue_t*",
            "name": "queue",
            "desc": "queue对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread对象。",
        "name": "action_thread_create_with_queue",
        "return": {
          "type": "action_thread_t*",
          "desc": "action_thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_action_queue_t*",
            "name": "queue",
            "desc": "queue对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "uint32_t",
            "name": "stack_size",
            "desc": "栈的大小。"
          },
          {
            "type": "tk_thread_priority_t",
            "name": "priority",
            "desc": "优先级。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建action_thread对象。",
        "name": "action_thread_create_with_queue_ex",
        "return": {
          "type": "action_thread_t*",
          "desc": "action_thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_t*",
            "name": "thread",
            "desc": "action_thread对象。"
          },
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          }
        ],
        "annotation": {},
        "desc": "让线程执行action。",
        "name": "action_thread_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_t*",
            "name": "thread",
            "desc": "action_thread对象。"
          },
          {
            "type": "action_thread_on_idle_t",
            "name": "on_idle",
            "desc": "空闲时的回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置空闲时的回调函数。",
        "name": "action_thread_set_on_idle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_t*",
            "name": "thread",
            "desc": "action_thread对象。"
          },
          {
            "type": "action_thread_on_quit_t",
            "name": "on_quit",
            "desc": "退出时的回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置退出时的回调函数。",
        "name": "action_thread_set_on_quit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "action_thread_t*",
            "name": "thread",
            "desc": "action_thread对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "action_thread_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "thread",
        "desc": "线程对象。",
        "type": "tk_thread_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "queue",
        "desc": "action queue。",
        "type": "waitable_action_queue_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "executed_actions_nr",
        "desc": "已经执行action的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/action_thread.h",
    "desc": "执行action的线程。\n\n> 每个线程都有一个action queue，可以是共享的queue，也可以是私有的queue。",
    "name": "action_thread_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "资源类型常量定义。",
    "consts": [
      {
        "desc": "无效资源。",
        "name": "ASSET_TYPE_NONE"
      },
      {
        "desc": "字体资源。",
        "name": "ASSET_TYPE_FONT"
      },
      {
        "desc": "图片资源。",
        "name": "ASSET_TYPE_IMAGE"
      },
      {
        "desc": "窗体样式资源。",
        "name": "ASSET_TYPE_STYLE"
      },
      {
        "desc": "UI数据资源。",
        "name": "ASSET_TYPE_UI"
      },
      {
        "desc": "XML数据资源。",
        "name": "ASSET_TYPE_XML"
      },
      {
        "desc": "字符串数据资源。",
        "name": "ASSET_TYPE_STRINGS"
      },
      {
        "desc": "JS等脚本资源。",
        "name": "ASSET_TYPE_SCRIPT"
      },
      {
        "desc": "流图资源。",
        "name": "ASSET_TYPE_FLOW"
      },
      {
        "desc": "其它数据资源。",
        "name": "ASSET_TYPE_DATA"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_type_t",
    "prefix": "ASSET_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "字体资源类型定义。",
    "consts": [
      {
        "desc": "无效字体。",
        "name": "ASSET_TYPE_FONT_NONE"
      },
      {
        "desc": "TTF字体。",
        "name": "ASSET_TYPE_FONT_TTF"
      },
      {
        "desc": "位图字体。",
        "name": "ASSET_TYPE_FONT_BMP"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_font_type_t",
    "prefix": "ASSET_FONT_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "数据资源类型定义。",
    "consts": [
      {
        "desc": "未知数据类型。",
        "name": "ASSET_TYPE_DATA_NONE"
      },
      {
        "desc": "文本数据类型。",
        "name": "ASSET_TYPE_DATA_TEXT"
      },
      {
        "desc": "二进制数据类型。",
        "name": "ASSET_TYPE_DATA_BIN"
      },
      {
        "desc": "JSON数据类型。",
        "name": "ASSET_TYPE_DATA_JSON"
      },
      {
        "desc": "通用数据类型。",
        "name": "ASSET_TYPE_DATA_DAT"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_data_type_t",
    "prefix": "ASSET_DATA_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "脚本资源类型定义。",
    "consts": [
      {
        "desc": "未知脚本类型。",
        "name": "ASSET_TYPE_SCRIPT_NONE"
      },
      {
        "desc": "JS脚本类型。",
        "name": "ASSET_TYPE_SCRIPT_JS"
      },
      {
        "desc": "LUA脚本类型。",
        "name": "ASSET_TYPE_SCRIPT_LUA"
      },
      {
        "desc": "Python脚本类型。",
        "name": "ASSET_TYPE_SCRIPT_PYTHON"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_script_type_t",
    "prefix": "ASSET_SCRIPT_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "图片资源类型定义。",
    "consts": [
      {
        "desc": "未知图片类型。",
        "name": "ASSET_TYPE_IMAGE_NONE"
      },
      {
        "desc": "Raw图片类型。",
        "name": "ASSET_TYPE_IMAGE_RAW"
      },
      {
        "desc": "位图图片类型。",
        "name": "ASSET_TYPE_IMAGE_BMP"
      },
      {
        "desc": "PNG图片类型。",
        "name": "ASSET_TYPE_IMAGE_PNG"
      },
      {
        "desc": "JPG图片类型。",
        "name": "ASSET_TYPE_IMAGE_JPG"
      },
      {
        "desc": "BSVG图片类型。",
        "name": "ASSET_TYPE_IMAGE_BSVG"
      },
      {
        "desc": "GIF图片类型。",
        "name": "ASSET_TYPE_IMAGE_GIF"
      },
      {
        "desc": "WEBP图片类型。",
        "name": "ASSET_TYPE_IMAGE_WEBP"
      },
      {
        "desc": "LZ4压缩的图片类型。",
        "name": "ASSET_TYPE_IMAGE_LZ4"
      },
      {
        "desc": "其它图片类型。",
        "name": "ASSET_TYPE_IMAGE_OTHER"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_image_type_t",
    "prefix": "ASSET_IMAGE_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "UI资源类型定义。",
    "consts": [
      {
        "desc": "无效UI类型。",
        "name": "ASSET_TYPE_UI_NONE"
      },
      {
        "desc": "二进制的UI类型。",
        "name": "ASSET_TYPE_UI_BIN"
      },
      {
        "desc": "XML格式的UI类型。",
        "name": "ASSET_TYPE_UI_XML"
      }
    ],
    "header": "tkc/asset_info.h",
    "name": "asset_ui_type_t",
    "prefix": "ASSET_UI_TYPE_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/asset_info.h",
    "desc": "预加载资源的描述信息。",
    "name": "preload_res_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "type",
            "desc": "资源的类型。"
          },
          {
            "type": "uint16_t",
            "name": "subtype",
            "desc": "资源的子类型。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "资源的名称。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "资源的数据长度(用于分配空间)。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建asset_info对象。\n\n> 主要供脚本语言使用。",
        "name": "asset_info_create",
        "return": {
          "type": "asset_info_t*",
          "desc": "asset_info对象。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": "销毁asset_info对象。",
        "name": "asset_info_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {},
        "desc": "减少asset_info对象的引用计数。",
        "name": "asset_info_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {},
        "desc": "增加asset_info对象的引用计数。",
        "name": "asset_info_ref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取类型。",
        "name": "asset_info_get_type",
        "return": {
          "type": "uint16_t",
          "desc": "返回类型。"
        }
      },
      {
        "params": [
          {
            "type": "asset_info_t*",
            "name": "info",
            "desc": "asset_info对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取名称。",
        "name": "asset_info_get_name",
        "return": {
          "type": "const char*",
          "desc": "返回名称。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "未格式化名字。"
          }
        ],
        "annotation": {},
        "desc": "把资源名字格式化为符合标准长度的字符串。",
        "name": "asset_info_get_formatted_name",
        "return": {
          "type": "ret_t",
          "desc": "返回格式化后的名字。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "uint16_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "subtype",
        "desc": "子类型。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "is_in_rom",
        "desc": "资源是否在ROM中。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "size",
        "desc": "大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "refcount",
        "desc": "引用计数。\nis\\_in\\_rom == FALSE时才有效。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/asset_info.h",
    "desc": "单个资源的描述信息。",
    "name": "asset_info_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "async_exec_t",
            "name": "exec",
            "desc": "需要异步支持的函数。"
          },
          {
            "type": "async_on_result_t",
            "name": "on_result",
            "desc": "返回执行结果(可选)"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "两个回调函数的上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "异步执行exec函数，执行完成后，在后台线程调用on_result函数。",
        "name": "async_call",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "max_threads",
            "desc": "最大线程数。"
          },
          {
            "type": "uint32_t",
            "name": "min_threads",
            "desc": "最小线程数。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "全局初始化。",
        "name": "async_call_init_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "全局~初始化。",
        "name": "async_call_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/async.h",
    "desc": "在后台线程执行指定函数，不会阻塞UI线程。",
    "name": "async_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始wbuffer对象。",
        "name": "wbuffer_init",
        "return": {
          "type": "wbuffer_t*",
          "desc": "wbuffer对象本身。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "重置当前写入位置。",
        "name": "wbuffer_rewind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始wbuffer对象，容量不够时是否支持自动扩展，使用完成后需要调用wbuffer\\_deinit释放资源。",
        "name": "wbuffer_init_extendable",
        "return": {
          "type": "wbuffer_t*",
          "desc": "wbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {},
        "desc": "扩展缓冲区至指定的大小。",
        "name": "wbuffer_extend_capacity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          }
        ],
        "annotation": {},
        "desc": "释放资源。",
        "name": "wbuffer_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "delta",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": "跳过指定的长度。",
        "name": "wbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint8数据。",
        "name": "wbuffer_write_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint16_t",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint16数据。",
        "name": "wbuffer_write_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint32数据。",
        "name": "wbuffer_write_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入int32数据。",
        "name": "wbuffer_write_int32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入uint64数据。",
        "name": "wbuffer_write_uint64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入float数据。",
        "name": "wbuffer_write_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "要写入的数据。"
          }
        ],
        "annotation": {},
        "desc": "写入double数据。",
        "name": "wbuffer_write_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "要写入的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "要写入的数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入指定长度的二进制数据。",
        "name": "wbuffer_write_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "char*",
            "name": "data",
            "desc": "要写入的字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入字符串。",
        "name": "wbuffer_write_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "空间大小。"
          }
        ],
        "annotation": {},
        "desc": "是否还有空间。",
        "name": "wbuffer_has_room",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE表示无，否则表示有。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "data",
        "desc": "数据缓冲区。用于保存写入的数据。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前写入位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "数据缓冲区最大容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "extendable",
        "desc": "容量不够时是否支持自动扩展。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/buffer.h",
    "desc": "Write Buffer。用于数据打包。\n\n示例：\n\n```c\nuint8_t buff[128];\nwbuffer_t wbuffer;\nrbuffer_t rbuffer;\nconst char* str = NULL;\nwbuffer_init(&wbuffer, buff, sizeof(buff));\n\nwbuffer_write_string(&wbuffer, \"hello awtk\");\n\nrbuffer_init(&rbuffer, wbuffer.data, wbuffer.cursor);\nrbuffer_read_string(&rbuffer, &str);\n```\n\n```c\nwbuffer_t wbuffer;\nwbuffer_init_extendable(&wbuffer);\n\nwbuffer_write_string(&wbuffer, \"hello awtk\");\n\nwbuffer_deinit(&wbuffer);\n```\n> 如果初始化为extendable，则最后需要调用wbuffer\\_deinit释放资源。",
    "name": "wbuffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始rbuffer对象。",
        "name": "rbuffer_init",
        "return": {
          "type": "rbuffer_t*",
          "desc": "rbuffer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          }
        ],
        "annotation": {},
        "desc": "判断是否还有数据可读。",
        "name": "rbuffer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示还有数据可读，否则表示无数据可读。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "重置当前读取位置。",
        "name": "rbuffer_rewind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "int32_t",
            "name": "offset",
            "desc": "跳过的偏移量，正数往前负数往回跳。"
          }
        ],
        "annotation": {},
        "desc": "跳过指定的长度。",
        "name": "rbuffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint8数据。",
        "name": "rbuffer_read_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint16数据。",
        "name": "rbuffer_read_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint32数据。",
        "name": "rbuffer_read_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "int32_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取int32数据。",
        "name": "rbuffer_read_int32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint64_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint64数据。",
        "name": "rbuffer_read_uint64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "float*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取float数据。",
        "name": "rbuffer_read_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "double*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取double数据。",
        "name": "rbuffer_read_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "返回读取的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "读取的数据长度。"
          }
        ],
        "annotation": {},
        "desc": "读取指定长度的二进制数据。",
        "name": "rbuffer_read_binary",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "char**",
            "name": "str",
            "desc": "返回字符串。"
          }
        ],
        "annotation": {},
        "desc": "读取字符串。",
        "name": "rbuffer_read_string",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint8_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint8数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint16_t*",
            "name": "value",
            "desc": "返回读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint16数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rbuffer_t*",
            "name": "rbuffer",
            "desc": "rbuffer对象。"
          },
          {
            "type": "uint32_t*",
            "name": "value",
            "desc": "读取的数据。"
          }
        ],
        "annotation": {},
        "desc": "读取uint32数据，但不改变cursor的位置。",
        "name": "rbuffer_peek_uint32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "data",
        "desc": "数据缓冲区。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前读取位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "缓存区的容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/buffer.h",
    "desc": "Read Buffer。用于数据解包。\n\n示例：\n\n```c\nuint8_t buff[128];\nwbuffer_t wbuffer;\nrbuffer_t rbuffer;\nconst char* str = NULL;\nwbuffer_init(&wbuffer, buff, sizeof(buff));\n\nwbuffer_write_string(&wbuffer, \"hello awtk\");\n\nrbuffer_init(&rbuffer, wbuffer.data, wbuffer.cursor);\nrbuffer_read_string(&rbuffer, &str);\n```",
    "name": "rbuffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "color",
            "desc": "字符串格式的颜色。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "把字符串格式的颜色转换成color\\_t对象。\n\n目前支持下列格式：\n\n* 16进制格式。如：\"#112233\"\n* 颜色名称格式。如：\"green\"\n* rgb格式。如：\"rgb(11,22,33)\"\n* rgba格式。如：\"rgba(11,22,33,0.5)\"",
        "name": "color_parse",
        "return": {
          "type": "void*",
          "desc": "返回color_t对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/color_parser.h",
    "desc": "颜色解析相关函数。\n\n示例：\n\n```c\ncolor_t c;\nc = color_parse(\"#112233\");\nc = color_parse(\"white\");\nc = color_parse(\"rgb(11,22,33)\");\nc = color_parse(\"rgba(11,22,33,0.5)\");\n```",
    "name": "color_parser_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "r",
        "desc": "红色。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "g",
        "desc": "绿色。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "b",
        "desc": "蓝色。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "a",
        "desc": "alpha。",
        "type": "uint8_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      }
    ],
    "header": "tkc/color.h",
    "desc": "颜色的四个通道。",
    "name": "rgba_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "r",
            "desc": "红色。"
          },
          {
            "type": "uint8_t",
            "name": "g",
            "desc": "绿色。"
          },
          {
            "type": "uint8_t",
            "name": "b",
            "desc": "蓝色。"
          },
          {
            "type": "uint8_t",
            "name": "a",
            "desc": "alpha。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化颜色对象。",
        "name": "color_init",
        "return": {
          "type": "color_t",
          "desc": "颜色对象。"
        }
      },
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "r",
            "desc": "红色通道。"
          },
          {
            "type": "uint8_t",
            "name": "b",
            "desc": "蓝色通道。"
          },
          {
            "type": "uint8_t",
            "name": "g",
            "desc": "绿色通道。"
          },
          {
            "type": "uint8_t",
            "name": "a",
            "desc": "alpha通道。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建color对象。\n\n> 主要供脚本语言使用。",
        "name": "color_create",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "css类似的颜色值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "创建color对象。\n\n> 主要供脚本语言使用。",
        "name": "color_from_str",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取红色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_r",
        "return": {
          "type": "uint8_t",
          "desc": "返回红色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取绿色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_g",
        "return": {
          "type": "uint8_t",
          "desc": "返回绿色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取蓝色通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_b",
        "return": {
          "type": "uint8_t",
          "desc": "返回蓝色通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取alpha通道的值。\n\n> 主要供脚本语言使用。",
        "name": "color_a",
        "return": {
          "type": "uint8_t",
          "desc": "返回alpha通道的值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取颜色值。\n\n> 主要供脚本语言使用。",
        "name": "color_get_color",
        "return": {
          "type": "uint32_t",
          "desc": "返回颜色值。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "color",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为color对象。\n\n> 供脚本语言使用。",
        "name": "color_cast",
        "return": {
          "type": "color_t*",
          "desc": "color对象。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁color对象。\n> 主要供脚本语言使用。",
        "name": "color_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "内存。"
          }
        ],
        "annotation": {},
        "desc": "获取16进制格式表示的颜色",
        "name": "color_hex_str",
        "return": {
          "type": "char*",
          "desc": "获取16进制字符串表示的颜色。"
        }
      },
      {
        "params": [
          {
            "type": "color_t*",
            "name": "c",
            "desc": "color对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "内存。"
          }
        ],
        "annotation": {},
        "desc": "获取rgba格式表示的颜色",
        "name": "color_rgba_str",
        "return": {
          "type": "char*",
          "desc": "获取rgba格式表示的颜色。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "rgba",
        "desc": "颜色的RGBA值。",
        "type": "rgba_t",
        "annotation": {
          "readable": true,
          "writable": true
        }
      },
      {
        "name": "color",
        "desc": "颜色的数值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "writable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/color.h",
    "desc": "颜色。",
    "name": "color_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "compressor_t*",
            "name": "compressor",
            "desc": "compressor对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "待压缩的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "wbuffer_t*",
            "name": "out",
            "desc": "压缩之后的数据。"
          }
        ],
        "annotation": {},
        "desc": "压缩数据。",
        "name": "compressor_compress",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "compressor_t*",
            "name": "compressor",
            "desc": "compressor对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "待解压的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "wbuffer_t*",
            "name": "out",
            "desc": "解压之后的数据。"
          }
        ],
        "annotation": {},
        "desc": "解压数据。",
        "name": "compressor_uncompress",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "compressor_t*",
            "name": "compressor",
            "desc": "compressor对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁compressor对象。",
        "name": "compressor_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/compressor.h",
    "desc": "压缩解压接口。",
    "name": "compressor_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建cond_var。",
        "name": "tk_cond_var_create",
        "return": {
          "type": "tk_cond_var_t*",
          "desc": "cond_var对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_var_t*",
            "name": "cond_var",
            "desc": "cond_var对象。"
          },
          {
            "type": "uint32_t*",
            "name": "timeout_ms",
            "desc": "最长等待时间。"
          }
        ],
        "annotation": {},
        "desc": "等待。",
        "name": "tk_cond_var_wait",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_var_t*",
            "name": "cond_var",
            "desc": "cond_var对象。"
          }
        ],
        "annotation": {},
        "desc": "唤醒。",
        "name": "tk_cond_var_awake",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_var_t*",
            "name": "cond_var",
            "desc": "cond_var对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁cond_var对象。",
        "name": "tk_cond_var_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/cond_var.h",
    "desc": "简化版的条件变量。",
    "name": "tk_cond_var_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建cond。",
        "name": "tk_cond_create",
        "return": {
          "type": "tk_cond_t*",
          "desc": "cond对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_t*",
            "name": "cond",
            "desc": "cond对象。"
          },
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "等待。",
        "name": "tk_cond_wait",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_t*",
            "name": "cond",
            "desc": "cond对象。"
          },
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          },
          {
            "type": "uint32_t*",
            "name": "timeout_ms",
            "desc": "最长等待时间。"
          }
        ],
        "annotation": {},
        "desc": "等待指定时间。",
        "name": "tk_cond_wait_timeout",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_t*",
            "name": "cond",
            "desc": "cond对象。"
          }
        ],
        "annotation": {},
        "desc": "唤醒。",
        "name": "tk_cond_signal",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_cond_t*",
            "name": "cond",
            "desc": "cond对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁cond对象。",
        "name": "tk_cond_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/cond.h",
    "desc": "条件变量。",
    "name": "tk_cond_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "sum",
            "desc": "初始值(一般用INITCHECKSUM)"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "int",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算检验和。",
        "name": "tk_chksum",
        "return": {
          "type": "uint16_t",
          "desc": "返回计算结果。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "sum",
            "desc": "初始值(一般用0，或者之前的值)"
          },
          {
            "type": "uint8_t",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算单子节的检验和。",
        "name": "tk_chksum_byte",
        "return": {
          "type": "uint16_t",
          "desc": "返回计算结果。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "crc",
            "desc": "初始值(一般用PPPINITFCS16)"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "int",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算crc16。",
        "name": "tk_crc16",
        "return": {
          "type": "uint16_t",
          "desc": "返回计算结果。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t",
            "name": "crc",
            "desc": "初始值(一般用PPPINITFCS16，或者之前的值)"
          },
          {
            "type": "uint8_t",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算单子节的crc16。",
        "name": "tk_crc16_byte",
        "return": {
          "type": "uint16_t",
          "desc": "返回计算结果。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "crc",
            "desc": "初始值(一般用PPPINITFCS32)"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "int",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算crc32。",
        "name": "tk_crc32",
        "return": {
          "type": "uint32_t",
          "desc": "返回计算结果。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "crc",
            "desc": "初始值(一般用PPPINITFCS32，或者之前的值)"
          },
          {
            "type": "uint8_t",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "计算单子节的crc32。",
        "name": "tk_crc32_byte",
        "return": {
          "type": "uint32_t",
          "desc": "返回计算结果。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/crc.h",
    "desc": "crc相关函数。",
    "name": "crc_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "数组的初始容量。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建darray对象。",
        "name": "darray_create",
        "return": {
          "type": "darray_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "数组的初始容量。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {},
        "desc": "初始化darray对象。",
        "name": "darray_init",
        "return": {
          "type": "darray_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "darray_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "darray_find_ex",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "二分查找(确保数组有序)。",
        "name": "darray_bsearch_index",
        "return": {
          "type": "int32_t",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "二分查找(确保数组有序)。",
        "name": "darray_bsearch",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          }
        ],
        "annotation": {},
        "desc": "获取指定序数的元素。",
        "name": "darray_get",
        "return": {
          "type": "void*",
          "desc": "返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "设置指定序数的元素(不销毁旧的数据)。",
        "name": "darray_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "设置指定序数的元素(销毁旧的数据)。",
        "name": "darray_replace",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素，并返回位置。",
        "name": "darray_find_index",
        "return": {
          "type": "int32_t",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素，并返回位置。",
        "name": "darray_find_index_ex",
        "return": {
          "type": "int32_t",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除第一个满足条件的元素。",
        "name": "darray_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除第一个满足条件的元素。",
        "name": "darray_remove_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数。"
          }
        ],
        "annotation": {},
        "desc": "删除指定位置的元素。",
        "name": "darray_remove_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除全部满足条件的元素。",
        "name": "darray_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          }
        ],
        "annotation": {},
        "desc": "排序。",
        "name": "darray_sort",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          },
          {
            "type": "darray_t*",
            "name": "matched",
            "desc": "返回满足条件的元素。"
          }
        ],
        "annotation": {},
        "desc": "查找全部满足条件的元素。\n\n```\ndarray_t matched;\ndarray_init(&matched, 0, NULL, NULL);\ndarray_find_all(darray, mycmp, myctx, &matched);\n...\ndarray_deinit(&matched);\n\n```",
        "name": "darray_find_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出最后一个元素。",
        "name": "darray_pop",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "返回最后一个元素。",
        "name": "darray_tail",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "返回第一个元素。",
        "name": "darray_head",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加一个元素。",
        "name": "darray_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "如果不存在，在尾巴追加一个元素。",
        "name": "darray_push_unique",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待插入的元素。"
          }
        ],
        "annotation": {},
        "desc": "插入一个元素。",
        "name": "darray_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待插入的元素。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          },
          {
            "type": "bool_t",
            "name": "replace_if_exist",
            "desc": "如果存在是否替换。"
          }
        ],
        "annotation": {},
        "desc": "插入一个元素到有序数组。",
        "name": "darray_sorted_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "返回满足条件元素的个数。",
        "name": "darray_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素。",
        "name": "darray_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "遍历函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历元素。",
        "name": "darray_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素，并释放elms。",
        "name": "darray_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "darray_t*",
            "name": "darray",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁darray对象。",
        "name": "darray_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "数组中元素的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "数组的容量大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "elms",
        "desc": "数组中的元素。",
        "type": "void**",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": "元素销毁函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": "元素比较函数。",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/darray.h",
    "desc": "动态数组，根据元素个数动态调整数组的容量。\n\n用darray\\_init初始化时，用darray\\_deinit释放。如：\n\n```c\ndarray_t darray;\ndarray_init(&darray, 10, destroy, compare);\n...\ndarray_deinit(&darray);\n```\n\n用darray\\_create创建时，用darray\\_destroy销毁。如：\n\n```c\ndarray_t* darray = darray_create(10, destroy, compare);\n...\ndarray_destroy(darray);\n```",
    "name": "darray_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的data reader工厂对象。",
        "name": "data_reader_factory",
        "return": {
          "type": "data_reader_factory_t*",
          "desc": "返回data reader工厂对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_factory_t*",
            "name": "factory",
            "desc": "data reader工厂对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的data reader工厂对象。",
        "name": "data_reader_factory_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建data reader工厂对象。",
        "name": "data_reader_factory_create",
        "return": {
          "type": "data_reader_factory_t*",
          "desc": "返回data reader工厂对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_factory_t*",
            "name": "factory",
            "desc": "reader工厂对象。"
          },
          {
            "type": "const char*",
            "name": "protocol",
            "desc": "协议(如file)。"
          },
          {
            "type": "data_reader_create_t",
            "name": "create",
            "desc": "data reader创建函数。"
          }
        ],
        "annotation": {},
        "desc": "注册data reader创建函数。",
        "name": "data_reader_factory_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_factory_t*",
            "name": "factory",
            "desc": "data reader工厂对象。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "URL。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建指定类型的data reader对象。",
        "name": "data_reader_factory_create_reader",
        "return": {
          "type": "data_reader_t*",
          "desc": "返回data reader对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_factory_t*",
            "name": "factory",
            "desc": "data reader工厂对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放data reader工厂对象。",
        "name": "data_reader_factory_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_reader_factory.h",
    "desc": "data reader工厂。",
    "name": "data_reader_factory_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "data_reader_t*",
            "name": "reader",
            "desc": "reader对象。"
          },
          {
            "type": "uint64_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "用于读取数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大读取数据长度。"
          }
        ],
        "annotation": {},
        "desc": "在指定位置读取数据。",
        "name": "data_reader_read",
        "return": {
          "type": "int32_t",
          "desc": "返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_t*",
            "name": "reader",
            "desc": "reader对象。"
          }
        ],
        "annotation": {},
        "desc": "获取数据长度。",
        "name": "data_reader_get_size",
        "return": {
          "type": "uint64_t",
          "desc": "返回数据长度。"
        }
      },
      {
        "params": [
          {
            "type": "data_reader_t*",
            "name": "reader",
            "desc": "reader对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁reader对象。",
        "name": "data_reader_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "URL。"
          },
          {
            "type": "uint32_t*",
            "name": "size",
            "desc": "返回数据长度。"
          }
        ],
        "annotation": {},
        "desc": "从指定的URL读取全部数据。",
        "name": "data_reader_read_all",
        "return": {
          "type": "void*",
          "desc": "返回全部数据，调用者需要调用TKMEM_FREE释放返回值。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_reader.h",
    "desc": "数据读取接口。\n\n>对可读的媒介，如内存、文件、flash、资源和其它媒介提供一个统一的读取接口。",
    "name": "data_reader_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的data writer工厂对象。",
        "name": "data_writer_factory",
        "return": {
          "type": "data_writer_factory_t*",
          "desc": "返回data writer工厂对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_factory_t*",
            "name": "factory",
            "desc": "data writer工厂对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的data writer工厂对象。",
        "name": "data_writer_factory_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建data writer工厂对象。",
        "name": "data_writer_factory_create",
        "return": {
          "type": "data_writer_factory_t*",
          "desc": "返回data writer工厂对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_factory_t*",
            "name": "factory",
            "desc": "writer工厂对象。"
          },
          {
            "type": "const char*",
            "name": "protocol",
            "desc": "协议(如file)。"
          },
          {
            "type": "data_writer_create_t",
            "name": "create",
            "desc": "data writer创建函数。"
          }
        ],
        "annotation": {},
        "desc": "注册data writer创建函数。",
        "name": "data_writer_factory_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_factory_t*",
            "name": "factory",
            "desc": "data writer工厂对象。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "URL。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建指定类型的data writer对象。",
        "name": "data_writer_factory_create_writer",
        "return": {
          "type": "data_writer_t*",
          "desc": "返回data writer对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_factory_t*",
            "name": "factory",
            "desc": "data writer工厂对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放data writer工厂对象。",
        "name": "data_writer_factory_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_writer_factory.h",
    "desc": "data writer工厂。",
    "name": "data_writer_factory_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "data_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "uint64_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "在指定位置写入数据。",
        "name": "data_writer_write",
        "return": {
          "type": "int32_t",
          "desc": "返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "uint64_t",
            "name": "size",
            "desc": "保留长度。"
          }
        ],
        "annotation": {},
        "desc": "截去指定长度之后的数据。",
        "name": "data_writer_truncate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "flush数据。",
        "name": "data_writer_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "data_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁writer对象。",
        "name": "data_writer_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "URL。"
          }
        ],
        "annotation": {},
        "desc": "清除指定URL的数据。",
        "name": "data_writer_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "URL。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入全部数据。",
        "name": "data_writer_write_all",
        "return": {
          "type": "int32_t",
          "desc": "返回实际写入数据的长度。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_writer.h",
    "desc": "数据写入接口。\n\n>对可写的媒介，如内存、文件、flash和其它媒介提供一个统一的写入接口。",
    "name": "data_writer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建date_time对象，并初始为当前日期和时间(一般供脚本语言中使用)。",
        "name": "date_time_create",
        "return": {
          "type": "date_time_t*",
          "desc": "返回date_time对象。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {},
        "desc": "初始为当前日期和时间。",
        "name": "date_time_init",
        "return": {
          "type": "date_time_t*",
          "desc": "返回date_time对象。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置年。",
        "name": "date_time_set_year",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "month",
            "desc": "月。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置月。",
        "name": "date_time_set_month",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "day",
            "desc": "日。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置日。",
        "name": "date_time_set_day",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "hour",
            "desc": "小时。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置小时。",
        "name": "date_time_set_hour",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "minute",
            "desc": "分钟。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置分钟。",
        "name": "date_time_set_minute",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint32_t",
            "name": "second",
            "desc": "秒。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置秒。",
        "name": "date_time_set_second",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置当前时间。",
        "name": "date_time_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "uint64_t",
            "name": "time",
            "desc": "时间。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "从time转换而来。",
        "name": "date_time_from_time",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "转换成time。",
        "name": "date_time_to_time",
        "return": {
          "type": "uint64_t",
          "desc": "返回time。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          },
          {
            "type": "int64_t",
            "name": "delta",
            "desc": "偏移量(s)。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "加上一个偏移量(s)。",
        "name": "date_time_add_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "是否是闰年。",
        "name": "date_time_is_leap",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示否。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          },
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定年份月份的天数。",
        "name": "date_time_get_days",
        "return": {
          "type": "int32_t",
          "desc": "返回大于0表示天数，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "year",
            "desc": "年份。"
          },
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          },
          {
            "type": "uint32_t",
            "name": "day",
            "desc": "日(1-31)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定日期是周几(0-6, Sunday = 0)。。",
        "name": "date_time_get_wday",
        "return": {
          "type": "int32_t",
          "desc": "返回大于等于0表示周几(0-6)，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "montn",
            "desc": "月份(1-12)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取指定月份的英文名称(简写)。",
        "name": "date_time_get_month_name",
        "return": {
          "type": "const char*",
          "desc": "返回指定月份的英文名称(简写)。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "wday",
            "desc": "星期几(0-6, Sunday = 0)。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取周几的英文名称(简写)。",
        "name": "date_time_get_wday_name",
        "return": {
          "type": "const char*",
          "desc": "返回指定周几的英文名称(简写)。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_t*",
            "name": "dt",
            "desc": "date_time对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁date_time对象(一般供脚本语言中使用)。",
        "name": "date_time_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "date_time_vtable_t",
            "name": "vt",
            "desc": "日期和时间的相关函数的实现。"
          }
        ],
        "annotation": {},
        "desc": "时间日期全局初始化。\n\n> 嵌入式平台需要提供并设置获取当前日期和时间的函数，否则相关的功能(如时钟控件)将无法正常工作。",
        "name": "date_time_global_init_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "second",
        "desc": "秒(0 - 59)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "minute",
        "desc": "分(0 - 59)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "hour",
        "desc": "时(0 - 23)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "day",
        "desc": "日(1-31)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "wday",
        "desc": "星期几(0-6, Sunday = 0)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "month",
        "desc": "月(1-12)。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "year",
        "desc": "年。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/date_time.h",
    "desc": "日期时间。\n\n> 在嵌入式平台中，在系统初始时，需要调用date\\_time\\_global\\_init设置实际获取/设置系统时间的函数。",
    "name": "date_time_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "打开动态链接库。",
        "name": "tk_dl_open",
        "return": {
          "type": "tk_dl_t*",
          "desc": "动态链接库对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_dl_t*",
            "name": "dl",
            "desc": "dl对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "函数名。"
          }
        ],
        "annotation": {},
        "desc": "获取指定名称函数的地址。",
        "name": "tk_dl_sym",
        "return": {
          "type": "void*",
          "desc": "返回函数的地址。"
        }
      },
      {
        "params": [
          {
            "type": "tk_dl_t*",
            "name": "dl",
            "desc": "dl对象。"
          }
        ],
        "annotation": {},
        "desc": "关闭dl对象。",
        "name": "tk_dl_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "获取最后的错误信息。",
        "name": "tk_dl_error",
        "return": {
          "type": "const char*",
          "desc": "返回error message."
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/dl.h",
    "desc": "动态链接库对象。",
    "name": "tk_dl_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "缓动作动画常量定义。",
    "consts": [
      {
        "desc": "EASING_LINEAR。",
        "name": "EASING_LINEAR"
      },
      {
        "desc": "EASING_QUADRATIC_IN",
        "name": "EASING_QUADRATIC_IN"
      },
      {
        "desc": "EASING_QUADRATIC_OUT",
        "name": "EASING_QUADRATIC_OUT"
      },
      {
        "desc": "EASING_QUADRATIC_INOUT",
        "name": "EASING_QUADRATIC_INOUT"
      },
      {
        "desc": "EASING_CUBIC_IN",
        "name": "EASING_CUBIC_IN"
      },
      {
        "desc": "EASING_CUBIC_OUT",
        "name": "EASING_CUBIC_OUT"
      },
      {
        "desc": "EASING_SIN_IN",
        "name": "EASING_SIN_IN"
      },
      {
        "desc": "EASING_SIN_OUT",
        "name": "EASING_SIN_OUT"
      },
      {
        "desc": "EASING_SIN_OUT",
        "name": "EASING_SIN_INOUT"
      },
      {
        "desc": "EASING_POW_IN",
        "name": "EASING_POW_IN"
      },
      {
        "desc": "EASING_POW_OUT",
        "name": "EASING_POW_OUT"
      },
      {
        "desc": "EASING_POW_INOUT",
        "name": "EASING_POW_INOUT"
      },
      {
        "desc": "EASING_CIRCULAR_IN",
        "name": "EASING_CIRCULAR_IN"
      },
      {
        "desc": "EASING_CIRCULAR_OUT",
        "name": "EASING_CIRCULAR_OUT"
      },
      {
        "desc": "EASING_CIRCULAR_INOUT",
        "name": "EASING_CIRCULAR_INOUT"
      },
      {
        "desc": "EASING_ELASTIC_IN",
        "name": "EASING_ELASTIC_IN"
      },
      {
        "desc": "EASING_ELASTIC_OUT",
        "name": "EASING_ELASTIC_OUT"
      },
      {
        "desc": "EASING_ELASTIC_INOUT",
        "name": "EASING_ELASTIC_INOUT"
      },
      {
        "desc": "EASING_BACK_IN",
        "name": "EASING_BACK_IN"
      },
      {
        "desc": "EASING_BACK_OUT",
        "name": "EASING_BACK_OUT"
      },
      {
        "desc": "EASING_BACK_INOUT",
        "name": "EASING_BACK_INOUT"
      },
      {
        "desc": "EASING_BOUNCE_IN",
        "name": "EASING_BOUNCE_IN"
      },
      {
        "desc": "EASING_BOUNCE_OUT",
        "name": "EASING_BOUNCE_OUT"
      },
      {
        "desc": "EASING_BOUNCE_INOUT",
        "name": "EASING_BOUNCE_INOUT"
      }
    ],
    "header": "tkc/easing.h",
    "name": "easing_type_t",
    "prefix": "EASING_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [
      {
        "type": "easing_type_t",
        "name": "type",
        "desc": "类型。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "获取对应类型的操作函数。",
    "name": "easing_get",
    "return": {
      "type": "easing_func_t",
      "desc": "返回对应的操作函数地址。"
    },
    "type": "method",
    "header": "tkc/easing.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "event_source_manager_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "~初始化。",
        "name": "event_source_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "获取wakeup时间(ms)",
        "name": "event_source_manager_get_wakeup_time",
        "return": {
          "type": "uint32_t",
          "desc": "返回wakeup时间(ms)。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "分发事件。",
        "name": "event_source_manager_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          },
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "增加事件源对象。",
        "name": "event_source_manager_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          },
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "移除事件源对象。",
        "name": "event_source_manager_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          },
          {
            "type": "void*",
            "name": "tag",
            "desc": "tag。"
          }
        ],
        "annotation": {},
        "desc": "移除所有tag相同的事件源对象。",
        "name": "event_source_manager_remove_by_tag",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁事件源管理器。",
        "name": "event_source_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source_manager.h",
    "desc": "事件源管理器。",
    "name": "event_source_manager_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "无效事件名称。",
        "name": "EVT_NONE"
      },
      {
        "desc": "对象的属性即将改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_WILL_CHANGE"
      },
      {
        "desc": "对象的属性改变的事件名(prop_change_event_t)。",
        "name": "EVT_PROP_CHANGED"
      },
      {
        "desc": "对象即将执行命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_WILL_EXEC"
      },
      {
        "desc": "对象完成执行命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_EXECED"
      },
      {
        "desc": "对象命令是否能执行指定的命令(cmd_exec_event_t)。",
        "name": "EVT_CMD_CAN_EXEC"
      },
      {
        "desc": "即将增加和删除集合中的项目(event_t)。",
        "name": "EVT_ITEMS_WILL_CHANGE"
      },
      {
        "desc": "完成增加和删除集合中的项目(event_t)。",
        "name": "EVT_ITEMS_CHANGED"
      },
      {
        "desc": "对象的属性改变的事件名(props_event_t)。",
        "name": "EVT_PROPS_CHANGED"
      },
      {
        "desc": "进度状态(progress_event_t)。",
        "name": "EVT_PROGRESS"
      },
      {
        "desc": "完成(done_event_t)。",
        "name": "EVT_DONE"
      },
      {
        "desc": "错误(error_event_t)。",
        "name": "EVT_ERROR"
      },
      {
        "desc": "对象销毁事件名(event_t)。",
        "name": "EVT_DESTROY"
      }
    ],
    "header": "tkc/event.h",
    "name": "event_type_t",
    "prefix": "EVT_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "fps_t*",
            "name": "fps",
            "desc": "fps对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "fps_init",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fps_t*",
            "name": "fps",
            "desc": "fps对象。"
          }
        ],
        "annotation": {},
        "desc": "增加帧数。",
        "name": "fps_inc",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fps_t*",
            "name": "fps",
            "desc": "fps对象。"
          }
        ],
        "annotation": {},
        "desc": "获取FPS(帧率)。",
        "name": "fps_get",
        "export": "none",
        "return": {
          "type": "uint32_t",
          "desc": "返回FPS(帧率)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/fps.h",
    "desc": "用于计算FPS(帧率)。",
    "name": "fps_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "文件大小。",
        "type": "uint64_t"
      },
      {
        "name": "atime",
        "desc": "最后访问时间。",
        "type": "uint64_t"
      },
      {
        "name": "mtime",
        "desc": "最后修改时间。",
        "type": "uint64_t"
      },
      {
        "name": "ctime",
        "desc": "创建时间。",
        "type": "uint64_t"
      },
      {
        "name": "is_dir",
        "desc": "是否为目录。",
        "type": "bool_t"
      },
      {
        "name": "is_link",
        "desc": "是否为链接。",
        "type": "bool_t"
      },
      {
        "name": "is_reg_file",
        "desc": "是否普通文件。",
        "type": "bool_t"
      }
    ],
    "header": "tkc/fs.h",
    "desc": "文件状态信息。",
    "name": "fs_stat_info_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "void*",
            "name": "buffer",
            "desc": "用于返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "读取文件。",
        "name": "fs_file_read",
        "return": {
          "type": "int32_t",
          "desc": "返回实际读取的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "char*",
            "name": "buffer",
            "desc": "用于返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "读取一行文本。\n> 需要用二进制格式打开，否则Windows下，系统会修改换行符。",
        "name": "fs_file_read_line",
        "return": {
          "type": "int32_t",
          "desc": "返回实际读取的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "const void*",
            "name": "buffer",
            "desc": "数据缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入文件。",
        "name": "fs_file_write",
        "return": {
          "type": "int32_t",
          "desc": "返回实际写入的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "const char* const",
            "name": "format_str",
            "desc": "格式化字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入文件。",
        "name": "fs_file_printf",
        "return": {
          "type": "int32_t",
          "desc": "返回实际写入的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "定位读写指针到指定的位置。",
        "name": "fs_file_seek",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "清除文件内容。",
        "name": "fs_file_truncate",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "关闭文件。",
        "name": "fs_file_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "同步文件到磁盘。",
        "name": "fs_file_sync",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          },
          {
            "type": "fs_stat_info_t*",
            "name": "fst",
            "desc": "文件状态信息。"
          }
        ],
        "annotation": {},
        "desc": "获取文件信息。",
        "name": "fs_file_stat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "判断文件是否结束。",
        "name": "fs_file_eof",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示结束，否则表示没结束。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "获取文件当前读写位置。",
        "name": "fs_file_tell",
        "return": {
          "type": "int64_t",
          "desc": "返回文件当前读写位置。"
        }
      },
      {
        "params": [
          {
            "type": "fs_file_t*",
            "name": "file",
            "desc": "文件对象。"
          }
        ],
        "annotation": {},
        "desc": "获取文件大小。",
        "name": "fs_file_size",
        "return": {
          "type": "int64_t",
          "desc": "返回文件大小。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/fs.h",
    "desc": "文件接口。\n\n示例：\n\n```c\nint32_t ret = 0;\nconst char* file_name = \"test.txt\";\nint32_t len = file_get_size(file_name);\nuint8_t* buff = (uint8_t*)TKMEM_ALLOC(len + 1);\nreturn_value_if_fail(buff != NULL, NULL);\n\nfs_file_t* fp = fs_open_file(os_fs(), file_name, \"rb\");\nif (fp != NULL) {\nret = fs_file_read(fp, buff, len);\nfs_file_close(fp);\n}\n```",
    "name": "fs_file_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "is_dir",
        "desc": "是否是目录。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "is_link",
        "desc": "是否是符号链接。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "is_reg_file",
        "desc": "是否是普通文件。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/fs.h",
    "desc": "代表目录或文件。",
    "name": "fs_item_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "fs_dir_t*",
            "name": "dir",
            "desc": "文件夹对象。"
          }
        ],
        "annotation": {},
        "desc": "重置文件夹读取位置到开始。",
        "name": "fs_dir_rewind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_dir_t*",
            "name": "dir",
            "desc": "文件夹对象。"
          },
          {
            "type": "fs_item_t*",
            "name": "item",
            "desc": "返回一项。"
          }
        ],
        "annotation": {},
        "desc": "读取文件夹对象。",
        "name": "fs_dir_read",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_dir_t*",
            "name": "dir",
            "desc": "文件夹对象。"
          }
        ],
        "annotation": {},
        "desc": "关闭文件夹对象。",
        "name": "fs_dir_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/fs.h",
    "desc": "文件夹接口。",
    "name": "fs_dir_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "mode",
            "desc": "打开方式，取值请参考POSIX的[fopen函数](https://www.runoob.com/cprogramming/c-function-fopen.html)相应的参数。"
          }
        ],
        "annotation": {},
        "desc": "打开文件。",
        "name": "fs_open_file",
        "return": {
          "type": "ret_t",
          "desc": "返回非NULL表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "刪除文件。",
        "name": "fs_remove_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "判断文件是否存在。",
        "name": "fs_file_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "旧文件名。"
          },
          {
            "type": "const char*",
            "name": "new_name",
            "desc": "新文件名。"
          }
        ],
        "annotation": {},
        "desc": "文件重命名。",
        "name": "fs_file_rename",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "源文件名。"
          },
          {
            "type": "const char*",
            "name": "dst",
            "desc": "目标文件名。"
          }
        ],
        "annotation": {},
        "desc": "拷贝文件。",
        "name": "fs_copy_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "源目录。"
          },
          {
            "type": "const char*",
            "name": "dst",
            "desc": "目标目录。"
          }
        ],
        "annotation": {},
        "desc": "拷贝目录。",
        "name": "fs_copy_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "打开目录。",
        "name": "fs_open_dir",
        "return": {
          "type": "fs_dir_t",
          "desc": "返回非NULL表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "修改当前目录。",
        "name": "fs_change_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "创建目录。",
        "name": "fs_create_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "刪除目录。",
        "name": "fs_remove_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "递归创建目录。",
        "name": "fs_create_dir_r",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "递归刪除目录。",
        "name": "fs_remove_dir_r",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名称。"
          }
        ],
        "annotation": {},
        "desc": "判断目录是否存在。",
        "name": "fs_dir_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "旧目录名称。"
          },
          {
            "type": "const char*",
            "name": "new_name",
            "desc": "新目录名称。"
          }
        ],
        "annotation": {},
        "desc": "目录重命名。",
        "name": "fs_dir_rename",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "获取文件大小。",
        "name": "fs_get_file_size",
        "return": {
          "type": "ret_t",
          "desc": "返回不是-1表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "卷名。"
          },
          {
            "type": "int32_t*",
            "name": "free_kb",
            "desc": "用于返回空闲空间大小(KB)"
          },
          {
            "type": "int32_t*",
            "name": "total_kb",
            "desc": "用于返回总共空间大小(KB)"
          }
        ],
        "annotation": {},
        "desc": "获取文件系统信息。",
        "name": "fs_get_disk_info",
        "return": {
          "type": "ret_t",
          "desc": "返回不是-1表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "fs_stat_info_t*",
            "name": "fst",
            "desc": "文件状态信息。"
          }
        ],
        "annotation": {},
        "desc": "获取文件信息。",
        "name": "fs_stat",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "char*",
            "name": "path",
            "desc": "保存可执行文件的路径。"
          }
        ],
        "annotation": {},
        "desc": "获取可执行文件所在目录。",
        "name": "fs_get_exe",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "char*",
            "name": "path",
            "desc": "保存路径。"
          }
        ],
        "annotation": {},
        "desc": "获取home目录或者应用程序可以写入数据的目录。",
        "name": "fs_get_user_storage_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "char*",
            "name": "path",
            "desc": "保存路径。"
          }
        ],
        "annotation": {},
        "desc": "获取临时目录。",
        "name": "fs_get_temp_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fs_t*",
            "name": "fs",
            "desc": "文件系统对象，一般赋值为os_fs()。"
          },
          {
            "type": "char*",
            "name": "path",
            "desc": "保存当前所在目录的路径。"
          }
        ],
        "annotation": {},
        "desc": "获取当前所在目录。",
        "name": "fs_get_cwd",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "filename",
            "desc": "用于返回完整路径的文件名。"
          },
          {
            "type": "const char*",
            "name": "appname",
            "desc": "应用程序的名称。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名(不包括路径)。"
          }
        ],
        "annotation": {},
        "desc": "生成一个保存数据文件的完整路径的文件名。",
        "name": "fs_build_user_storage_file_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的文件系统对象。",
        "name": "os_fs",
        "return": {
          "type": "fs_t*",
          "desc": "返回文件系统对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "目录。"
          },
          {
            "type": "tk_visit_t",
            "name": "on_file",
            "desc": "回调函数(完整文件名通过data参数传入)。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历指定目录下全部常规文件。\n示例:\n```c\nstatic ret_t on_file(void* ctx, const void* data) {\nconst char* filename = (const char*)data;\nconst char* extname = (const char*)ctx;\n\nif (tk_str_end_with(filename, extname)) {\nlog_debug(\"%s\\n\", filename);\n}\nreturn RET_OK;\n}\n...\nfs_foreach_file(\"tests/testdata\", on_file, (void*)\".json\");\n```",
        "name": "fs_foreach_file",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "判断文件是否存在。",
        "name": "file_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "目录名。"
          }
        ],
        "annotation": {},
        "desc": "判断目录是否存在。",
        "name": "dir_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "刪除文件。",
        "name": "file_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "获取文件大小。",
        "name": "file_get_size",
        "return": {
          "type": "int32_t",
          "desc": "返回非负表示文件大小，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "uint32_t*",
            "name": "size",
            "desc": "返回实际读取的长度。"
          }
        ],
        "annotation": {},
        "desc": "读取文件的全部内容。",
        "name": "file_read",
        "return": {
          "type": "void*",
          "desc": "返回读取的数据，需要调用TKMEM_FREE释放。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const void*",
            "name": "buffer",
            "desc": "数据缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          }
        ],
        "annotation": {},
        "desc": "从某个位置读取文件。",
        "name": "file_read_part",
        "return": {
          "type": "int32_t",
          "desc": "返回实际读取的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const void*",
            "name": "buffer",
            "desc": "数据缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入文件。",
        "name": "file_write",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/fs.h",
    "desc": "文件系统接口。",
    "name": "fs_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "参数个数。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "目前最大容量。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "args",
        "desc": "参数列表。",
        "type": "value_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/fscript.h",
    "desc": "扩展函数的参数。",
    "name": "fscript_args_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "fscript_parser_error_t*",
            "name": "error",
            "desc": "解析错误信息。"
          }
        ],
        "annotation": {},
        "desc": "释放error对象中的资源。",
        "name": "fscript_parser_error_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "row",
        "desc": "出现错误的代码行。",
        "type": "int",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "col",
        "desc": "出现错误的代码列。",
        "type": "int",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "offset",
        "desc": "出现错误的代码偏移。",
        "type": "int",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "message",
        "desc": "错误信息。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "token",
        "desc": "当前的token。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/fscript.h",
    "desc": "解析错误信息。",
    "name": "fscript_parser_error_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "脚本执行上下文。"
          },
          {
            "type": "const char*",
            "name": "script",
            "desc": "脚本代码。"
          }
        ],
        "annotation": {},
        "desc": "创建引擎对象，并解析代码。",
        "name": "fscript_create",
        "return": {
          "type": "fscript_t*",
          "desc": "返回fscript对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "脚本执行上下文。"
          },
          {
            "type": "const char*",
            "name": "script",
            "desc": "脚本代码。"
          },
          {
            "type": "fscript_parser_error_t*",
            "name": "error",
            "desc": "用于返回错误信息。"
          }
        ],
        "annotation": {},
        "desc": "解析代码，分析是否有语法错误。\n\n示例：\n```c\nfscript_parser_error_t error;\nfscript_syntax_check(obj, \"1+1\", &error);\nfscript_parser_error_deinit(&error);\n```",
        "name": "fscript_syntax_check",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fscript_t*",
            "name": "fscript",
            "desc": "脚本引擎对象。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "执行结果(调用者需要用value_reset函数清除result)。"
          }
        ],
        "annotation": {},
        "desc": "执行解析后的代码。",
        "name": "fscript_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fscript_t*",
            "name": "fscript",
            "desc": "脚本引擎对象。"
          },
          {
            "type": "ret_t",
            "name": "code",
            "desc": "错误码。"
          },
          {
            "type": "const char*",
            "name": "func",
            "desc": "函数名。"
          },
          {
            "type": "const char*",
            "name": "message",
            "desc": "错误消息。"
          }
        ],
        "annotation": {},
        "desc": "用于扩展函数设置遇到的错误。",
        "name": "fscript_set_error",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fscript_t*",
            "name": "fscript",
            "desc": "脚本引擎对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁引擎对象。",
        "name": "fscript_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "脚本执行上下文。"
          },
          {
            "type": "const char*",
            "name": "script",
            "desc": "脚本代码。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "执行结果(调用者需要用value_reset函数清除result)。"
          }
        ],
        "annotation": {},
        "desc": "执行一段脚本。",
        "name": "fscript_eval",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "全局初始化。",
        "name": "fscript_global_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "函数名(无需加函数前缀)。"
          },
          {
            "type": "fscript_func_t*",
            "name": "func",
            "desc": "函数指针。"
          }
        ],
        "annotation": {},
        "desc": "注册全局自定义函数。",
        "name": "fscript_register_func",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const general_factory_table_t*",
            "name": "table",
            "desc": "函数表。"
          }
        ],
        "annotation": {},
        "desc": "注册全局自定义函数。",
        "name": "fscript_register_funcs",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "全局释放。",
        "name": "fscript_global_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "expr",
            "desc": "表达式。"
          }
        ],
        "annotation": {},
        "desc": "对fscript的简单包装。",
        "name": "tk_expr_eval",
        "return": {
          "type": "double",
          "desc": "返回表达式的值。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "获取fscript的全局对象。",
        "name": "fscript_get_global_object",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回fscript的全局对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "str",
        "desc": "C语言实现函数可以使用这个变量，可以有效避免内存分配。",
        "type": "str_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "obj",
        "desc": "脚本执行上下文。",
        "type": "tk_object_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "fast_vars",
        "desc": "快速访问变量。在脚本可以用a/b/c/d来访问，需要优化时使用。",
        "type": "value_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/fscript.h",
    "desc": "一个简易的函数式脚本引擎。\n用法请参考：https://github.com/zlgopen/awtk/blob/master/docs/fscript.md",
    "name": "fscript_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化parser对象。",
        "name": "func_call_parser_init",
        "return": {
          "type": "func_call_parser_t*",
          "desc": "parser对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": "开始解析。",
        "name": "func_call_parser_parse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "func_call_parser_t*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": "重置parser。",
        "name": "func_call_parser_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "解析参数，并将结果生成一个object对象。\n\n> 调用者负责释放返回的object对象。",
        "name": "func_call_parse",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/func_call_parser.h",
    "desc": "从字符串中解析出函数调用需要的参数。\n\n```\nfunc_call => func_name '(' params ')'\nparams => param ',' params\nparam => name '=' value\nfunc_name => ID\nname = ID\nvalue = int | float | ID\n```\n\n如:move(x=10, y=20)\n如:rename(old_name=aa, new_name=bb)",
    "name": "func_call_parser_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "名称。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "desc",
        "desc": "描述。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "exec",
        "desc": "函数指针。",
        "type": "func_exec_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "args",
        "desc": "函数参数描述。",
        "type": "arg_desc_t**",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "return_value",
        "desc": "函数返回值描述。",
        "type": "value_desc_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/func_desc.h",
    "desc": "函数描述。",
    "name": "func_desc_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "哈希表桶数。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          },
          {
            "type": "tk_hash_t",
            "name": "hash",
            "desc": "元素哈希函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建hash_table对象。",
        "name": "hash_table_create",
        "return": {
          "type": "hash_table_t*",
          "desc": "哈希表对象。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "哈希表桶数。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          },
          {
            "type": "tk_hash_t",
            "name": "hash",
            "desc": "元素哈希函数。"
          }
        ],
        "annotation": {},
        "desc": "初始化hash_table对象。",
        "name": "hash_table_init",
        "return": {
          "type": "hash_table_t*",
          "desc": "哈希表对象。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "hash_table_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "bool_t",
            "name": "replace_if_exist",
            "desc": "如果存在是否替换。"
          }
        ],
        "annotation": {},
        "desc": "加入一个元素。",
        "name": "hash_table_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除第一个满足条件的元素。",
        "name": "hash_table_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除全部满足条件的元素。",
        "name": "hash_table_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "单向链表对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数，为NULL则使用内置的比较函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "返回满足条件元素的个数。",
        "name": "hash_table_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素。",
        "name": "hash_table_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "遍历函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历元素。",
        "name": "hash_table_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素，并释放elms。",
        "name": "hash_table_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "hash_table_t*",
            "name": "hash_table",
            "desc": "哈希表对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁hash_table对象。",
        "name": "hash_table_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "计算字符串hash值。",
        "name": "hash_table_hash_str",
        "return": {
          "type": "uint32_t",
          "desc": "返回hash值。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "计算int的hash值。",
        "name": "hash_table_hash_int",
        "return": {
          "type": "uint32_t",
          "desc": "返回hash值。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "buckets",
        "desc": "buckets。",
        "type": "darray_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": "元素销毁函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": "元素比较函数。",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "hash",
        "desc": "元素哈希函数。",
        "type": "tk_hash_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/hash_table.h",
    "desc": "哈希表。\n\n用hash_table\\_init初始化时，用hash_table\\_deinit释放。如：\n\n```c\nhash_table_t hash_table;\nhash_table_init(&hash_table, 10, destroy, compare, hash);\n...\nhash_table_deinit(&hash_table);\n```\n\n用hash_table\\_create创建时，用hash_table\\_destroy销毁。如：\n\n```c\nhash_table_t* hash_table = hash_table_create(10, destroy, compare, hash);\n...\nhash_table_destroy(hash_table);\n```",
    "name": "hash_table_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的idle_manager_t管理器。",
        "name": "idle_manager",
        "return": {
          "type": "idle_manager_t*",
          "desc": "返回idle_manager_t管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager_t",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的idle_manager_t管理器。",
        "name": "idle_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建idle_manager_t管理器。",
        "name": "idle_manager_create",
        "return": {
          "type": "idle_manager_t*",
          "desc": "返回idle_manager_t管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化idle_manager_t管理器。",
        "name": "idle_manager_init",
        "return": {
          "type": "idle_manager_t*",
          "desc": "返回idle_manager_t管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构idle_manager_t管理器。",
        "name": "idle_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放idle_manager_t管理器。",
        "name": "idle_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "返回idle的个数。",
        "name": "idle_manager_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的个数。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "删除全部idle。",
        "name": "idle_manager_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "根据上下文删除所有符合条件的idle。",
        "name": "idle_manager_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idle_id。"
          }
        ],
        "annotation": {},
        "desc": "根据idle_id删除idle。",
        "name": "idle_manager_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          },
          {
            "type": "idle_info_t*",
            "name": "idle",
            "desc": "idle对象。"
          }
        ],
        "annotation": {},
        "desc": "追加idle。",
        "name": "idle_manager_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "idle_id",
            "desc": "idle_id。"
          }
        ],
        "annotation": {},
        "desc": "查找指定ID的idle。",
        "name": "idle_manager_find",
        "return": {
          "type": "idle_info_t*",
          "desc": "返回idle的信息。"
        }
      },
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "idle_manager_t管理器对象。"
          },
          {
            "type": "idle_func_t*",
            "name": "on_idle",
            "desc": "idle回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "idle回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "添加idle。",
        "name": "idle_manager_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回idle的ID，TK_INVALID_ID表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/idle_manager.h",
    "desc": "idle_manager_t管理器。",
    "name": "idle_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const int_str_t*",
            "name": "items",
            "desc": "int_str_t数组。"
          },
          {
            "type": "int32_t",
            "name": "name",
            "desc": "name。"
          }
        ],
        "annotation": {},
        "desc": "根据name获取对应的value。",
        "name": "int_str_value",
        "return": {
          "type": "const char*",
          "desc": "返回value。"
        }
      },
      {
        "params": [
          {
            "type": "const int_str_t*",
            "name": "items",
            "desc": "int_str_t数组。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "value。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "如果没有找到对应的name，则返回的defval默认值。"
          }
        ],
        "annotation": {},
        "desc": "根据value获取对应的name。",
        "name": "int_str_name",
        "return": {
          "type": "int32_t",
          "desc": "返回name。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/int_str.h",
    "desc": "数字-字符串类型。\n\n负责把一个数字映射成一个字符串。\n\n示例：\n\n```c\nstatic const int_str_t color_values[] = {{1, \"red\"}, {2, \"black\"}, {3, \"blue\"}, {4, \"white\"}};\nconst char* value = int_str_value(color_values, 3);\nint32_t name = int_str_name(color_values, \"blue\", 0);\nprintf(\"value = %s \\n\", value);\nprintf(\"name = %d \\n\", name);\n```",
    "name": "int_str_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "LOG的级别。",
    "consts": [
      {
        "desc": "DEBUG",
        "name": "LOG_LEVEL_DEBUG"
      },
      {
        "desc": "INFO",
        "name": "LOG_LEVEL_INFO"
      },
      {
        "desc": "WARN",
        "name": "LOG_LEVEL_WARN"
      },
      {
        "desc": "ERROR",
        "name": "LOG_LEVEL_ERROR"
      }
    ],
    "header": "tkc/log.h",
    "name": "log_level_t",
    "prefix": "LOG_LEVEL_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "获取log的级别。",
        "name": "log_get_log_level",
        "return": {
          "type": "log_level_t",
          "desc": "返回log的级别。"
        }
      },
      {
        "params": [
          {
            "type": "log_level_t",
            "name": "log_level",
            "desc": "log的级别。"
          }
        ],
        "annotation": {},
        "desc": "设置log的级别。",
        "name": "log_set_log_level",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式或信息。"
          }
        ],
        "annotation": {},
        "desc": "输出调试信息。\n> 变参函数。\n\n```\nlog_debug(\"debug message\\n\");\n```",
        "name": "log_debug",
        "export": "none",
        "return": {
          "type": "void",
          "desc": "无返回值。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式或信息。"
          }
        ],
        "annotation": {},
        "desc": "输出参考信息。\n> 变参函数。\n\n```\nlog_info(\"info message\\n\");\n```",
        "name": "log_info",
        "export": "none",
        "return": {
          "type": "void",
          "desc": "无返回值。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式或信息。"
          }
        ],
        "annotation": {},
        "desc": "输出警告信息。\n> 变参函数。\n\n```\nlog_warn(\"warn message\\n\");\n```",
        "name": "log_warn",
        "export": "none",
        "return": {
          "type": "void",
          "desc": "无返回值。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式或信息。"
          }
        ],
        "annotation": {},
        "desc": "输出错误信息。\n> 变参函数。\n\n```\nlog_error(\"error message\\n\");\n```",
        "name": "log_error",
        "export": "none",
        "return": {
          "type": "void",
          "desc": "无返回值。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/log.h",
    "desc": "log。",
    "name": "log_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化矩阵对象。",
        "name": "matrix_init",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          }
        ],
        "annotation": {},
        "desc": "重置矩阵对象为单位矩阵。",
        "name": "matrix_identity",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          }
        ],
        "annotation": {},
        "desc": "求矩阵的逆。",
        "name": "matrix_invert",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "float",
            "name": "a0",
            "desc": "a0"
          },
          {
            "type": "float",
            "name": "a1",
            "desc": "a1"
          },
          {
            "type": "float",
            "name": "a2",
            "desc": "a2"
          },
          {
            "type": "float",
            "name": "a3",
            "desc": "a3"
          },
          {
            "type": "float",
            "name": "a4",
            "desc": "a4"
          },
          {
            "type": "float",
            "name": "a5",
            "desc": "a5"
          }
        ],
        "annotation": {},
        "desc": "设置矩阵的参数。",
        "name": "matrix_set",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "matrix_t*",
            "name": "b",
            "desc": "矩阵对象。"
          }
        ],
        "annotation": {},
        "desc": "矩阵相乘。",
        "name": "matrix_multiply",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "float",
            "name": "x",
            "desc": "x"
          },
          {
            "type": "float",
            "name": "y",
            "desc": "y"
          }
        ],
        "annotation": {},
        "desc": "平移。",
        "name": "matrix_translate",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "float",
            "name": "sx",
            "desc": "sx"
          },
          {
            "type": "float",
            "name": "sy",
            "desc": "sy"
          }
        ],
        "annotation": {},
        "desc": "缩放。",
        "name": "matrix_scale",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "float",
            "name": "rad",
            "desc": "角度。"
          }
        ],
        "annotation": {},
        "desc": "旋转。",
        "name": "matrix_rotate",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y"
          },
          {
            "type": "xy_t*",
            "name": "out_x",
            "desc": "out_x"
          },
          {
            "type": "xy_t*",
            "name": "out_y",
            "desc": "out_y"
          }
        ],
        "annotation": {},
        "desc": "对点进行变换。",
        "name": "matrix_transform_point",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          },
          {
            "type": "float",
            "name": "x",
            "desc": "x"
          },
          {
            "type": "float",
            "name": "y",
            "desc": "y"
          },
          {
            "type": "float*",
            "name": "out_x",
            "desc": "out_x"
          },
          {
            "type": "float*",
            "name": "out_y",
            "desc": "out_y"
          }
        ],
        "annotation": {},
        "desc": "对点进行变换。",
        "name": "matrix_transform_pointf",
        "return": {
          "type": "matrix_t*",
          "desc": "矩阵对象。"
        }
      },
      {
        "params": [
          {
            "type": "matrix_t*",
            "name": "m",
            "desc": "矩阵对象。"
          }
        ],
        "annotation": {},
        "desc": "判断matrix是否可逆。",
        "name": "matrix_is_invertible",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可逆，否则表示不可逆。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/matrix.h",
    "desc": "2D矩阵对象。",
    "name": "matrix_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "mem_allocator_t*",
            "name": "allocator",
            "desc": "allocator对象。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存的大小。"
          },
          {
            "type": "const char*",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t",
            "name": "line",
            "desc": "分配内存的行数(用于调试)。"
          }
        ],
        "annotation": {},
        "desc": "分配指定大小的内存。",
        "name": "mem_allocator_alloc",
        "export": "none",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块的地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "mem_allocator_t*",
            "name": "allocator",
            "desc": "allocator对象。"
          },
          {
            "type": "void*",
            "name": "ptr",
            "desc": "原来内存的地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存的大小。"
          },
          {
            "type": "const char*",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t",
            "name": "line",
            "desc": "分配内存的行数(用于调试)。"
          }
        ],
        "annotation": {},
        "desc": "重新分配指定大小的内存。",
        "name": "mem_allocator_realloc",
        "export": "none",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块的地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "mem_allocator_t*",
            "name": "allocator",
            "desc": "allocator对象。"
          },
          {
            "type": "void*",
            "name": "ptr",
            "desc": "内存的地址。"
          }
        ],
        "annotation": {},
        "desc": "释放内存。",
        "name": "mem_allocator_free",
        "export": "none",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块的地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "mem_allocator_t*",
            "name": "allocator",
            "desc": "allocator对象。"
          }
        ],
        "annotation": {},
        "desc": "显示内存信息，用于调试。",
        "name": "mem_allocator_dump",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "mem_allocator_t*",
            "name": "allocator",
            "desc": "allocator对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁内存分配器。",
        "name": "mem_allocator_destroy",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator.h",
    "desc": "内存分配接口。",
    "name": "mem_allocator_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": "分配一块内存。",
        "name": "TKMEM_ALLOC",
        "export": "tk_alloc",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "nmemb",
            "desc": "内存块数量。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "每一块的大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": "分配一块内存，并将内容清零。",
        "name": "TKMEM_CALLOC",
        "export": "tk_calloc",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "p",
            "desc": "原来的内存地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "每一块的大小。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": "重新分配一块内存，如果原来的内存块大于等于需要的空间，直接返回原来的内存块。",
        "name": "TKMEM_REALLOC",
        "export": "tk_realloc",
        "return": {
          "type": "void*",
          "desc": "成功返回内存块首地址，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "p",
            "desc": "内存地址。"
          }
        ],
        "annotation": {
          "macro": true
        },
        "desc": "释放内存。",
        "name": "TKMEM_FREE",
        "export": "tk_free",
        "return": {
          "type": "void",
          "desc": "无。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "显示内存信息。",
        "name": "tk_mem_dump",
        "return": {
          "type": "void",
          "desc": "返回void。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "buffer",
            "desc": "内存地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存长度。"
          }
        ],
        "annotation": {},
        "desc": "初始化内存。",
        "name": "tk_mem_init",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "buffer",
            "desc": "内存地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存长度。"
          }
        ],
        "annotation": {},
        "desc": "初始化内存，支持多块不连续的内存。\n>最后一个参数必须为NULL。\n\n示例：\n```c\ntk_mem_init_ex(mem1, sizeof(mem1), mem2, sizeof(mem2), mem3, sizeof(mem3), NULL);\n```",
        "name": "tk_mem_init_ex",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化互斥和oom。",
        "name": "tk_mem_init_stage2",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "检查给定的地址是否是一个有效的heap地址。\n\n> 用于辅助发现内存问题。",
        "name": "tk_mem_is_valid_addr",
        "return": {
          "type": "bool_t",
          "desc": "返回FALSE一定是无效地址，返回TRUE在PC则不太确定。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mem.h",
    "desc": "内存管理相关的宏和函数。\n\n示例：\n\n```c\nchar* str = (char*)TKMEM_ALLOC(100);\n...\nTKMEM_FREE(str);\n```\n\n```c\nchar* str = (char*)TKMEM_ALLOC(100);\n...\nstr = (char*)TKMEM_REALLOC(str, 128);\n...\nTKMEM_FREE(str);\n```",
    "name": "tk_mem_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "MIME_TYPE。",
    "consts": [
      {
        "desc": "\"application/envoy\"。",
        "name": "MIME_TYPE_APPLICATION_ENVOY"
      },
      {
        "desc": "\"application/fractals\"。",
        "name": "MIME_TYPE_APPLICATION_FRACTALS"
      },
      {
        "desc": "\"application/futuresplash\"。",
        "name": "MIME_TYPE_APPLICATION_FUTURESPLASH"
      },
      {
        "desc": "\"application/hta\"。",
        "name": "MIME_TYPE_APPLICATION_HTA"
      },
      {
        "desc": "\"application/json\"。",
        "name": "MIME_TYPE_APPLICATION_JSON"
      },
      {
        "desc": "\"application/ubjson\"。",
        "name": "MIME_TYPE_APPLICATION_UBJSON"
      },
      {
        "desc": "\"application/mac-binhex40\"。",
        "name": "MIME_TYPE_APPLICATION_MAC_BINHEX40"
      },
      {
        "desc": "\"application/msword\"。",
        "name": "MIME_TYPE_APPLICATION_MSWORD"
      },
      {
        "desc": "\"application/octet-stream\"。",
        "name": "MIME_TYPE_APPLICATION_OCTET_STREAM"
      },
      {
        "desc": "\"application/oda\"。",
        "name": "MIME_TYPE_APPLICATION_ODA"
      },
      {
        "desc": "\"application/olescript\"。",
        "name": "MIME_TYPE_APPLICATION_OLESCRIPT"
      },
      {
        "desc": "\"application/pdf\"。",
        "name": "MIME_TYPE_APPLICATION_PDF"
      },
      {
        "desc": "\"application/pics-rules\"。",
        "name": "MIME_TYPE_APPLICATION_PICS_RULES"
      },
      {
        "desc": "\"application/pkcs10\"。",
        "name": "MIME_TYPE_APPLICATION_PKCS10"
      },
      {
        "desc": "\"application/pkix-crl\"。",
        "name": "MIME_TYPE_APPLICATION_PKIX_CRL"
      },
      {
        "desc": "\"application/postscript\"。",
        "name": "MIME_TYPE_APPLICATION_POSTSCRIPT"
      },
      {
        "desc": "\"application/rtf\"。",
        "name": "MIME_TYPE_APPLICATION_RTF"
      },
      {
        "desc": "\"application/vnd.ms-excel\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_EXCEL"
      },
      {
        "desc": "\"application/vnd.ms-outlook\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_OUTLOOK"
      },
      {
        "desc": "\"application/vnd.ms-pkicertstore\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKICERTSTORE"
      },
      {
        "desc": "\"application/vnd.ms-pkiseccat\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKISECCAT"
      },
      {
        "desc": "\"application/vnd.ms-pkistl\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PKISTL"
      },
      {
        "desc": "\"application/vnd.ms-powerpoint\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_POWERPOINT"
      },
      {
        "desc": "\"application/vnd.ms-project\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_PROJECT"
      },
      {
        "desc": "\"application/vnd.ms-works\"。",
        "name": "MIME_TYPE_APPLICATION_VND_MS_WORKS"
      },
      {
        "desc": "\"application/winhlp\"。",
        "name": "MIME_TYPE_APPLICATION_WINHLP"
      },
      {
        "desc": "\"application/x-bcpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_BCPIO"
      },
      {
        "desc": "\"application/x-cdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_CDF"
      },
      {
        "desc": "\"application/x-compress\"。",
        "name": "MIME_TYPE_APPLICATION_X_COMPRESS"
      },
      {
        "desc": "\"application/x-compressed\"。",
        "name": "MIME_TYPE_APPLICATION_X_COMPRESSED"
      },
      {
        "desc": "\"application/x-cpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_CPIO"
      },
      {
        "desc": "\"application/x-csh\"。",
        "name": "MIME_TYPE_APPLICATION_X_CSH"
      },
      {
        "desc": "\"application/x-director\"。",
        "name": "MIME_TYPE_APPLICATION_X_DIRECTOR"
      },
      {
        "desc": "\"application/x-dvi\"。",
        "name": "MIME_TYPE_APPLICATION_X_DVI"
      },
      {
        "desc": "\"application/x-gtar\"。",
        "name": "MIME_TYPE_APPLICATION_X_GTAR"
      },
      {
        "desc": "\"application/x-gzip\"。",
        "name": "MIME_TYPE_APPLICATION_X_GZIP"
      },
      {
        "desc": "\"application/x-hdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_HDF"
      },
      {
        "desc": "\"application/x-iphone\"。",
        "name": "MIME_TYPE_APPLICATION_X_IPHONE"
      },
      {
        "desc": "\"application/x-javascript\"。",
        "name": "MIME_TYPE_APPLICATION_X_JAVASCRIPT"
      },
      {
        "desc": "\"application/x-latex\"。",
        "name": "MIME_TYPE_APPLICATION_X_LATEX"
      },
      {
        "desc": "\"application/x-msaccess\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSACCESS"
      },
      {
        "desc": "\"application/x-mscardfile\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSCARDFILE"
      },
      {
        "desc": "\"application/x-msclip\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSCLIP"
      },
      {
        "desc": "\"application/x-msdownload\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSDOWNLOAD"
      },
      {
        "desc": "\"application/x-msmediaview\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMEDIAVIEW"
      },
      {
        "desc": "\"application/x-msmetafile\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMETAFILE"
      },
      {
        "desc": "\"application/x-msmoney\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSMONEY"
      },
      {
        "desc": "\"application/x-mspublisher\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSPUBLISHER"
      },
      {
        "desc": "\"application/x-msschedule\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSSCHEDULE"
      },
      {
        "desc": "\"application/x-msterminal\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSTERMINAL"
      },
      {
        "desc": "\"application/x-mswrite\"。",
        "name": "MIME_TYPE_APPLICATION_X_MSWRITE"
      },
      {
        "desc": "\"application/x-netcdf\"。",
        "name": "MIME_TYPE_APPLICATION_X_NETCDF"
      },
      {
        "desc": "\"application/x-perfmon\"。",
        "name": "MIME_TYPE_APPLICATION_X_PERFMON"
      },
      {
        "desc": "\"application/x-pkcs12\"。",
        "name": "MIME_TYPE_APPLICATION_X_PKCS12"
      },
      {
        "desc": "\"application/x-sh\"。",
        "name": "MIME_TYPE_APPLICATION_X_SH"
      },
      {
        "desc": "\"application/x-shar\"。",
        "name": "MIME_TYPE_APPLICATION_X_SHAR"
      },
      {
        "desc": "\"application/x-shockwave-flash\"。",
        "name": "MIME_TYPE_APPLICATION_X_SHOCKWAVE_FLASH"
      },
      {
        "desc": "\"application/x-stuffit\"。",
        "name": "MIME_TYPE_APPLICATION_X_STUFFIT"
      },
      {
        "desc": "\"application/x-sv4cpio\"。",
        "name": "MIME_TYPE_APPLICATION_X_SV4CPIO"
      },
      {
        "desc": "\"application/x-sv4crc\"。",
        "name": "MIME_TYPE_APPLICATION_X_SV4CRC"
      },
      {
        "desc": "\"application/x-tar\"。",
        "name": "MIME_TYPE_APPLICATION_X_TAR"
      },
      {
        "desc": "\"application/x-tcl\"。",
        "name": "MIME_TYPE_APPLICATION_X_TCL"
      },
      {
        "desc": "\"application/x-tex\"。",
        "name": "MIME_TYPE_APPLICATION_X_TEX"
      },
      {
        "desc": "\"application/x-texinfo\"。",
        "name": "MIME_TYPE_APPLICATION_X_TEXINFO"
      },
      {
        "desc": "\"application/x-troff\"。",
        "name": "MIME_TYPE_APPLICATION_X_TROFF"
      },
      {
        "desc": "\"application/x-ustar\"。",
        "name": "MIME_TYPE_APPLICATION_X_USTAR"
      },
      {
        "desc": "\"application/zip\"。",
        "name": "MIME_TYPE_APPLICATION_ZIP"
      },
      {
        "desc": "\"audio/basic\"。",
        "name": "MIME_TYPE_AUDIO_BASIC"
      },
      {
        "desc": "\"audio/mid\"。",
        "name": "MIME_TYPE_AUDIO_MID"
      },
      {
        "desc": "\"audio/mpeg\"。",
        "name": "MIME_TYPE_AUDIO_MPEG"
      },
      {
        "desc": "\"audio/x-aiff\"。",
        "name": "MIME_TYPE_AUDIO_X_AIFF"
      },
      {
        "desc": "\"audio/x-mpegurl\"。",
        "name": "MIME_TYPE_AUDIO_X_MPEGURL"
      },
      {
        "desc": "\"audio/x-wav\"。",
        "name": "MIME_TYPE_AUDIO_X_WAV"
      },
      {
        "desc": "\"image/bmp\"。",
        "name": "MIME_TYPE_IMAGE_BMP"
      },
      {
        "desc": "\"image/cis-cod\"。",
        "name": "MIME_TYPE_IMAGE_CIS_COD"
      },
      {
        "desc": "\"image/gif\"。",
        "name": "MIME_TYPE_IMAGE_GIF"
      },
      {
        "desc": "\"image/ief\"。",
        "name": "MIME_TYPE_IMAGE_IEF"
      },
      {
        "desc": "\"image/jpeg\"。",
        "name": "MIME_TYPE_IMAGE_JPEG"
      },
      {
        "desc": "\"image/pipeg\"。",
        "name": "MIME_TYPE_IMAGE_PIPEG"
      },
      {
        "desc": "\"image/svg+xml\"。",
        "name": "MIME_TYPE_IMAGE_SVG_XML"
      },
      {
        "desc": "\"image/tiff\"。",
        "name": "MIME_TYPE_IMAGE_TIFF"
      },
      {
        "desc": "\"image/x-cmx\"。",
        "name": "MIME_TYPE_IMAGE_X_CMX"
      },
      {
        "desc": "\"image/x-icon\"。",
        "name": "MIME_TYPE_IMAGE_X_ICON"
      },
      {
        "desc": "\"image/x-rgb\"。",
        "name": "MIME_TYPE_IMAGE_X_RGB"
      },
      {
        "desc": "\"image/x-xbitmap\"。",
        "name": "MIME_TYPE_IMAGE_X_XBITMAP"
      },
      {
        "desc": "\"image/x-xpixmap\"。",
        "name": "MIME_TYPE_IMAGE_X_XPIXMAP"
      },
      {
        "desc": "\"image/x-xwindowdump\"。",
        "name": "MIME_TYPE_IMAGE_X_XWINDOWDUMP"
      },
      {
        "desc": "\"message/rfc822\"。",
        "name": "MIME_TYPE_MESSAGE_RFC822"
      },
      {
        "desc": "\"text/css\"。",
        "name": "MIME_TYPE_TEXT_CSS"
      },
      {
        "desc": "\"text/h323\"。",
        "name": "MIME_TYPE_TEXT_H323"
      },
      {
        "desc": "\"text/html\"。",
        "name": "MIME_TYPE_TEXT_HTML"
      },
      {
        "desc": "\"text/iuls\"。",
        "name": "MIME_TYPE_TEXT_IULS"
      },
      {
        "desc": "\"text/plain\"。",
        "name": "MIME_TYPE_TEXT_PLAIN"
      },
      {
        "desc": "\"text/richtext\"。",
        "name": "MIME_TYPE_TEXT_RICHTEXT"
      },
      {
        "desc": "\"text/scriptlet\"。",
        "name": "MIME_TYPE_TEXT_SCRIPTLET"
      },
      {
        "desc": "\"text/webviewhtml\"。",
        "name": "MIME_TYPE_TEXT_WEBVIEWHTML"
      },
      {
        "desc": "\"text/x-component\"。",
        "name": "MIME_TYPE_TEXT_X_COMPONENT"
      },
      {
        "desc": "\"text/x-setext\"。",
        "name": "MIME_TYPE_TEXT_X_SETEXT"
      },
      {
        "desc": "\"text/x-vcard\"。",
        "name": "MIME_TYPE_TEXT_X_VCARD"
      },
      {
        "desc": "\"video/mpeg\"。",
        "name": "MIME_TYPE_VIDEO_MPEG"
      },
      {
        "desc": "\"video/quicktime\"。",
        "name": "MIME_TYPE_VIDEO_QUICKTIME"
      },
      {
        "desc": "\"video/x-msvideo\"。",
        "name": "MIME_TYPE_VIDEO_X_MSVIDEO"
      }
    ],
    "header": "tkc/mime_types.h",
    "name": "MIME_TYPE",
    "prefix": "MIME_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          },
          {
            "type": "bool_t",
            "name": "writable",
            "desc": "是否可写。"
          },
          {
            "type": "bool_t",
            "name": "shared",
            "desc": "是否共享。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化mmap对象。",
        "name": "mmap_create",
        "return": {
          "type": "mmap_t*",
          "desc": "mmap对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "mmap_t*",
            "name": "mmap",
            "desc": "mmap对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁mmap。",
        "name": "mmap_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "data",
        "desc": "内存地址。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "size",
        "desc": "数据长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/mmap.h",
    "desc": "把文件内容映射到内存。",
    "name": "mmap_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建嵌套互斥锁。",
        "name": "tk_mutex_nest_create",
        "return": {
          "type": "tk_mutex_nest_t*",
          "desc": "mutex_nest对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_nest_t*",
            "name": "mutex_nest",
            "desc": "mutex_nest对象。"
          }
        ],
        "annotation": {},
        "desc": "加锁。",
        "name": "tk_mutex_nest_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_nest_t*",
            "name": "mutex_nest",
            "desc": "mutex_nest对象。"
          }
        ],
        "annotation": {},
        "desc": "尝试加锁。",
        "name": "tk_mutex_nest_try_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_nest_t*",
            "name": "mutex_nest",
            "desc": "mutex_nest对象。"
          }
        ],
        "annotation": {},
        "desc": "解锁。只允许解锁当前线程所加的锁。",
        "name": "tk_mutex_nest_unlock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_nest_t*",
            "name": "mutex_nest",
            "desc": "mutex_nest对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁mutex_nest对象。",
        "name": "tk_mutex_nest_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mutex_nest.h",
    "desc": "嵌套互斥锁。允许同一个线程多次加锁。",
    "name": "tk_mutex_nest_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建mutex。",
        "name": "tk_mutex_create",
        "return": {
          "type": "tk_mutex_t*",
          "desc": "mutex对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "加锁。",
        "name": "tk_mutex_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "尝试加锁。",
        "name": "tk_mutex_try_lock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "解锁。",
        "name": "tk_mutex_unlock",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_mutex_t*",
            "name": "mutex",
            "desc": "mutex对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁mutex对象。",
        "name": "tk_mutex_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/mutex.h",
    "desc": "互斥锁。",
    "name": "tk_mutex_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建named_value对象。",
        "name": "named_value_create",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建named_value对象。",
        "name": "named_value_create_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化。",
        "name": "named_value_init",
        "return": {
          "type": "ret_t",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为named_value对象(供脚本语言使用)。",
        "name": "named_value_cast",
        "return": {
          "type": "named_value_t*",
          "desc": "返回named_value对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置名称。",
        "name": "named_value_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "named_value_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取值对象(主要给脚本语言使用)。",
        "name": "named_value_get_value",
        "return": {
          "type": "value_t*",
          "desc": "返回值对象。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true
        },
        "desc": "重置named_value对象。",
        "name": "named_value_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "named_value_t*",
            "name": "other",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {},
        "desc": "比较。",
        "name": "named_value_compare",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": "比较。",
        "name": "named_value_compare_by_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "named_value_t*",
            "name": "nv",
            "desc": "named_value对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁named_value对象。",
        "name": "named_value_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "名称。",
        "type": "char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "值。",
        "type": "value_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/named_value.h",
    "desc": "命名的值。",
    "name": "named_value_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "对象常见命令定义",
    "consts": [
      {
        "desc": "保存命令",
        "name": "TK_OBJECT_CMD_SAVE"
      },
      {
        "desc": "重新加载命令",
        "name": "TK_OBJECT_CMD_RELOAD"
      },
      {
        "desc": "和前一个属性交换位置\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_MOVE_UP"
      },
      {
        "desc": "和后一个属性交换位置\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_MOVE_DOWN"
      },
      {
        "desc": "删除属性。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_REMOVE"
      },
      {
        "desc": "删除勾选的属性。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_REMOVE_CHECKED"
      },
      {
        "desc": "清除全部属性。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_CLEAR"
      },
      {
        "desc": "增加子项。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_ADD"
      },
      {
        "desc": "显示对象详细信息。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_DETAIL"
      },
      {
        "desc": "编辑子项。\n>参数为属性的名称或路径。",
        "name": "TK_OBJECT_CMD_EDIT"
      }
    ],
    "header": "tkc/object.h",
    "name": "object_cmd_t",
    "prefix": "TK_OBJECT_CMD_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "对象常见属性定义",
    "consts": [
      {
        "desc": "属性的个数。",
        "name": "TK_OBJECT_PROP_SIZE"
      },
      {
        "desc": "属性是否勾选。",
        "name": "TK_OBJECT_PROP_CHECKED"
      }
    ],
    "header": "tkc/object.h",
    "name": "object_prop_t",
    "prefix": "OBJECT_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回文件名。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "返回文件名。",
        "name": "path_basename",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回文件扩展名。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "返回文件扩展名。",
        "name": "path_extname",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "const char*",
            "name": "extname",
            "desc": "扩展名。"
          }
        ],
        "annotation": {},
        "desc": "```c\nassert(path_extname_is(\"test.jpg\", \".jpg\"));\nassert(path_extname_is(\"test.JPG\", \".jpg\"));\n```\n检查是否是指定的扩展名。",
        "name": "path_extname_is",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回目录。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "返回目录。",
        "name": "path_dirname",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回规范后的路径。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "规范路径字符形式。",
        "name": "path_normalize",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回绝对路径。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "返回绝对路径。",
        "name": "path_abs",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          }
        ],
        "annotation": {},
        "desc": "判断路径是否为绝对路径。",
        "name": "path_is_abs",
        "return": {
          "type": "ret_t",
          "desc": "返回FALSE表示不是绝对路径，否则表示是绝对路径。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回路径。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "构造路径。\n\n> 可变参数为字符串，以NULL参数结束。",
        "name": "path_build",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回结果。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          },
          {
            "type": "char*",
            "name": "filename",
            "desc": "原始文件路径。"
          },
          {
            "type": "char*",
            "name": "basename",
            "desc": "替换后的文件名。"
          }
        ],
        "annotation": {},
        "desc": "替换文件名。",
        "name": "path_replace_basename",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "result",
            "desc": "用于返回结果。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          },
          {
            "type": "char*",
            "name": "filename",
            "desc": "原始文件路径。"
          },
          {
            "type": "char*",
            "name": "extname",
            "desc": "替换后的文件扩展名。"
          }
        ],
        "annotation": {},
        "desc": "替换文件扩展名。",
        "name": "path_replace_extname",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "path",
            "desc": "保存当前所在目录的路径。"
          }
        ],
        "annotation": {},
        "desc": "获取当前所在目录。",
        "name": "path_cwd",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "path",
            "desc": "保存可执行文件所在目录。"
          }
        ],
        "annotation": {},
        "desc": "获取可执行文件所在目录。",
        "name": "path_exe",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "path",
            "desc": "保存app所在目录。"
          }
        ],
        "annotation": {},
        "desc": "获取app所在目录。",
        "name": "path_app_root",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "目录。"
          }
        ],
        "annotation": {},
        "desc": "判断目录是否存在。",
        "name": "path_exist",
        "return": {
          "type": "ret_t",
          "desc": "返回TRUE表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "目录。"
          }
        ],
        "annotation": {},
        "desc": "去掉后面的/和\\\\字符。",
        "name": "path_remove_last_slash",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/path.h",
    "desc": "路径相关的工具函数。",
    "name": "path_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "获取当前时间(毫秒)。",
        "name": "get_time_ms64",
        "return": {
          "type": "uint64_t",
          "desc": "成功返回当前时间。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "获取当前时间(微秒)。",
        "name": "get_time_us64",
        "return": {
          "type": "uint64_t",
          "desc": "成功返回当前时间。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "ms",
            "desc": "睡眠时间(毫秒)。"
          }
        ],
        "annotation": {},
        "desc": "睡眠指定时间。",
        "name": "sleep_ms",
        "return": {
          "type": "void",
          "desc": "无。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "平台准备函数。",
        "name": "platform_prepare",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/platform.h",
    "desc": "平台接口，包括：获取时间、休眠等函数。",
    "name": "platform_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "path",
            "desc": "插件所在的目录。"
          },
          {
            "type": "plugin_get_init_func_name_t",
            "name": "get_init",
            "desc": "获取初始化函数的函数名。为NULL时使用\"init\"。"
          },
          {
            "type": "plugin_get_deinit_func_name_t",
            "name": "get_deinit",
            "desc": "获取~初始化函数的函数名。为NULL时使用\"deinit\"。"
          }
        ],
        "annotation": {},
        "desc": "创建插件管理器。",
        "name": "plugin_manager_create",
        "return": {
          "type": "plugin_manager_t*",
          "desc": "动态链接库对象。"
        }
      },
      {
        "params": [
          {
            "type": "plugin_manager_t*",
            "name": "plugin_manager",
            "desc": "plugin_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "重新扫描目录中的插件，加载没有加载的插件。",
        "name": "plugin_manager_refresh",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "plugin_manager_t*",
            "name": "plugin_manager",
            "desc": "plugin_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "卸载所有插件并重新加载。",
        "name": "plugin_manager_reload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "plugin_manager_t*",
            "name": "plugin_manager",
            "desc": "plugin_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "显示所有的插件。",
        "name": "plugin_manager_dump",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "plugin_manager_t*",
            "name": "plugin_manager",
            "desc": "plugin_manager对象。"
          },
          {
            "type": "const char*",
            "name": "lib_name",
            "desc": "动态库的名称。"
          }
        ],
        "annotation": {},
        "desc": "检查指定的插件是否存在。",
        "name": "plugin_manager_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "plugin_manager_t*",
            "name": "plugin_manager",
            "desc": "plugin_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "卸载全部插件，并销毁插件管理器对象。",
        "name": "plugin_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/plugin_manager.h",
    "desc": "插件管理器。",
    "name": "plugin_manager_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "qaction_exec_t",
            "name": "exec",
            "desc": "执行函数。"
          },
          {
            "type": "void*",
            "name": "args",
            "desc": "参数。"
          },
          {
            "type": "uint32_t",
            "name": "args_size",
            "desc": "参数长度。"
          }
        ],
        "annotation": {},
        "desc": "创建action对象。",
        "name": "qaction_create",
        "return": {
          "type": "qaction_t*",
          "desc": "返回action对象。"
        }
      },
      {
        "params": [
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          },
          {
            "type": "qaction_on_event_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          }
        ],
        "annotation": {},
        "desc": "设置事件处理函数(回调函数在后台线程执行)。\n\n> exec执行完成后，会触发EVT\\_DONE事件，一般在EVT\\_DONE事件中调用qaction\\_destroy函数销毁action。",
        "name": "qaction_set_on_event",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          }
        ],
        "annotation": {},
        "desc": "执行。",
        "name": "qaction_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          },
          {
            "type": "event_t**",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {},
        "desc": "事件通知。",
        "name": "qaction_notify",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "qaction_t*",
            "name": "q",
            "desc": "qaction对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "qaction_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "exec",
        "desc": "执行函数。",
        "type": "qaction_exec_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_event",
        "desc": "事件处理函数。如进度、错误和完成等。",
        "type": "qaction_on_event_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "args",
        "desc": "exec的参数(视具体的action而不同)。",
        "type": "uint32_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/qaction.h",
    "desc": "代表一个action，放在action queue中。",
    "name": "qaction_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "init_capacity",
            "desc": "初始容量。"
          },
          {
            "type": "uint32_t",
            "name": "max_capacity",
            "desc": "最大容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建ring_buffer对象。",
        "name": "ring_buffer_create",
        "return": {
          "type": "ring_buffer_t*",
          "desc": "ring_buffer对象。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "检查ring_buffer是否满。",
        "name": "ring_buffer_is_full",
        "return": {
          "type": "bool_t",
          "desc": "是否满。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "检查ring_buffer是否空。",
        "name": "ring_buffer_is_empty",
        "return": {
          "type": "bool_t",
          "desc": "是否空。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "获取数据长度。",
        "name": "ring_buffer_size",
        "return": {
          "type": "uint32_t",
          "desc": "数据长度。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "获取空闲空间的长度。",
        "name": "ring_buffer_free_size",
        "return": {
          "type": "uint32_t",
          "desc": "空闲空间的长度。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "获取容量。",
        "name": "ring_buffer_capacity",
        "return": {
          "type": "uint32_t",
          "desc": "容量。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "读取数据。",
        "name": "ring_buffer_read",
        "return": {
          "type": "uint32_t",
          "desc": "返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "读取数据(不修改读取位置)。",
        "name": "ring_buffer_peek",
        "return": {
          "type": "uint32_t",
          "desc": "返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "写入数据。",
        "name": "ring_buffer_write",
        "return": {
          "type": "uint32_t",
          "desc": "返回实际写入数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "读取指定长度数据，要么成功要么失败。",
        "name": "ring_buffer_read_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "跳过指定长度数据，要么成功要么失败。",
        "name": "ring_buffer_skip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "写入指定长度数据，要么成功要么失败。",
        "name": "ring_buffer_write_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "重置ring_buffer为空。",
        "name": "ring_buffer_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "r",
            "desc": "读取光标的位置。"
          }
        ],
        "annotation": {},
        "desc": "设置读取光标的位置。",
        "name": "ring_buffer_set_read_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "r_delta",
            "desc": "读取光标的位置(delta)。"
          }
        ],
        "annotation": {},
        "desc": "设置读取光标的位置(delta)。",
        "name": "ring_buffer_set_read_cursor_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "w",
            "desc": "写入光标的位置。"
          }
        ],
        "annotation": {},
        "desc": "设置写入光标的位置。",
        "name": "ring_buffer_set_write_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "w_delta",
            "desc": "写入光标的位置(delta)。"
          }
        ],
        "annotation": {},
        "desc": "设置写入光标的位置(delta)。",
        "name": "ring_buffer_set_write_cursor_delta",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "需要的大小。"
          }
        ],
        "annotation": {},
        "desc": "扩展buffer。",
        "name": "ring_buffer_ensure_write_space",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ring_buffer_t*",
            "name": "ring_buffer",
            "desc": "ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁ring_buffer。",
        "name": "ring_buffer_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "r",
        "desc": "读取位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "w",
        "desc": "写入位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "full",
        "desc": "是否满。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "当前容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max_capacity",
        "desc": "最大容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data",
        "desc": "数据。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/ring_buffer.h",
    "desc": "循环缓存区。",
    "name": "ring_buffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename_pattern",
            "desc": "用来确定文件名的路径和文件名。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "log文件占用最大磁盘空间(字节)。"
          },
          {
            "type": "uint32_t",
            "name": "buff_size",
            "desc": "用于指定print时的buff大小。"
          }
        ],
        "annotation": {
          "scriptable": true,
          "constructor": true
        },
        "desc": "创建rlog对象。\n\n```c\nrlog_t* log = rlog_create(\"./logs/%d.log\", 1020*1024, 256);\nrlog_write(log, \"hello\\n\");\nrlog_destroy(log);\n```",
        "name": "rlog_create",
        "return": {
          "type": "rlog_t*",
          "desc": "返回rlog对象。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "日志字符串。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "写入一条日志记录。",
        "name": "rlog_write",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入一条日志记录。",
        "name": "rlog_print",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁日志对象。",
        "name": "rlog_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          },
          {
            "type": "uint32_t*",
            "name": "size",
            "desc": "获取的日志大小。"
          }
        ],
        "annotation": {},
        "desc": "获取日志大小。",
        "name": "rlog_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          }
        ],
        "annotation": {},
        "desc": "清空日志。",
        "name": "rlog_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rlog_t*",
            "name": "log",
            "desc": "日志对象。"
          },
          {
            "type": "uint32_t",
            "name": "offs",
            "desc": "日志偏移量。"
          },
          {
            "type": "char*",
            "name": "buff",
            "desc": "存放日志的缓存。"
          },
          {
            "type": "uint32_t",
            "name": "buffsz",
            "desc": "缓存大小。"
          },
          {
            "type": "uint32_t*",
            "name": "readsz",
            "desc": "读取出的日志大小。"
          }
        ],
        "annotation": {},
        "desc": "读取日志。",
        "name": "rlog_read",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/rlog.h",
    "desc": "循环记录日志(支持多线程访问)。\n如果我们把日志写入文件中，随着时间的推移，日志文件会越来越大，最终占满这个磁盘，出现不可预料的错误。\nrlog提供一个循环记录日志的功能，让日志文件始终不会超出指定的大小，达到指定大小后再从头开始写。\n\n> 为了实现简单，我们把日志文件分成0和1两个文件，先写文件0，到达指定最大值的一半时，再写文件1。\n> 文件1到达指定最大值的一半时，删除文件0，并将文件1改名为文件0，重新创建文件1，继续写文件1，重复此过程。",
    "name": "rlog_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "mode",
            "desc": "打开方式。"
          }
        ],
        "annotation": {},
        "desc": "打开文件。",
        "name": "rom_fopen",
        "return": {
          "type": "ret_t",
          "desc": "返回不是NULL表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "容量。"
          }
        ],
        "annotation": {},
        "desc": "打开文件。",
        "name": "rom_fopen_buff",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          }
        ],
        "annotation": {},
        "desc": "返回文件当前位置。",
        "name": "rom_ftell",
        "return": {
          "type": "long",
          "desc": "返回当前位置。"
        }
      },
      {
        "params": [
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          }
        ],
        "annotation": {},
        "desc": "判断是否到文件末尾。",
        "name": "rom_feof",
        "return": {
          "type": "int",
          "desc": "返回当前位置。"
        }
      },
      {
        "params": [
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          },
          {
            "type": "long",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "int",
            "name": "whence",
            "desc": "要从哪个位置开始偏移， SEEK_SET表示从头开始，SEEK_CUR表示从当前位置开始，SEEK_END表示从文件末尾开始。"
          }
        ],
        "annotation": {},
        "desc": "设置文件当前位置。",
        "name": "rom_fseek",
        "return": {
          "type": "int",
          "desc": "返回0表示成功。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ptr",
            "desc": "数据的缓冲区。"
          },
          {
            "type": "size_t",
            "name": "size",
            "desc": "缓冲区大小。"
          },
          {
            "type": "size_t",
            "name": "nitems",
            "desc": "元素的个数。"
          },
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          }
        ],
        "annotation": {},
        "desc": "读取文件。",
        "name": "rom_fread",
        "return": {
          "type": "size_t",
          "desc": "返回实际读取的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ptr",
            "desc": "数据的缓冲区。"
          },
          {
            "type": "size_t",
            "name": "size",
            "desc": "缓冲区大小。"
          },
          {
            "type": "size_t",
            "name": "nitems",
            "desc": "元素的个数。"
          },
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          }
        ],
        "annotation": {},
        "desc": "写文件。\n> 本函数什么也不做。",
        "name": "rom_fwrite",
        "return": {
          "type": "size_t",
          "desc": "返回实际写的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "rom_file_t*",
            "name": "f",
            "desc": "rom_file_t对象。"
          }
        ],
        "annotation": {},
        "desc": "关闭文件。",
        "name": "rom_fclose",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/rom_fs.h",
    "desc": "rom_file接口。\n\n> 主要用于给google pinyin输入提供兼容的文件系统API。\n\n示例：\n\n```c\nchar rbuff[100];\nsize_t len = 0;\nconst char* buff = \"hello world\";\nrom_file_t* f = rom_fopen_buff((const uint8_t*)buff, sizeof(buff));\nlen = rom_fread(rbuff, 2, 1, f);\nrom_fclose(f);\n```",
    "name": "rom_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "value",
            "desc": "初始值。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": "创建信号量对象。",
        "name": "tk_semaphore_create",
        "return": {
          "type": "tk_semaphore_t*",
          "desc": "semaphore对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_semaphore_t*",
            "name": "semaphore",
            "desc": "信号量对象。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间。"
          }
        ],
        "annotation": {},
        "desc": "获取资源。",
        "name": "tk_semaphore_wait",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_semaphore_t*",
            "name": "semaphore",
            "desc": "信号量对象。"
          }
        ],
        "annotation": {},
        "desc": "释放资源。",
        "name": "tk_semaphore_post",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_semaphore_t*",
            "name": "semaphore",
            "desc": "信号量对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁信号量对象。",
        "name": "tk_semaphore_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/semaphore.h",
    "desc": "信号量。",
    "name": "tk_semaphore_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_sha256_t*",
            "name": "sha256",
            "desc": "sha256对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "tk_sha256_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_sha256_t*",
            "name": "sha256",
            "desc": "sha256对象。"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "更新数据。",
        "name": "tk_sha256_hash",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_sha256_t*",
            "name": "sha256",
            "desc": "sha256对象。"
          },
          {
            "type": "uint8_t*",
            "name": "hash",
            "desc": "用于返回计算结果。"
          }
        ],
        "annotation": {},
        "desc": "完成计算。",
        "name": "tk_sha256_done",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "数据长度。"
          },
          {
            "type": "str_t*",
            "name": "hash",
            "desc": "用于返回计算结果。"
          }
        ],
        "annotation": {},
        "desc": "计算数据的sha256哈希值。",
        "name": "tk_sha256",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/sha256.h",
    "desc": "sha256",
    "name": "tk_sha256_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建slist对象",
        "name": "slist_create",
        "return": {
          "type": "slist_t*",
          "desc": "单向链表对象。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {},
        "desc": "初始化slist对象",
        "name": "slist_init",
        "return": {
          "type": "slist_t*",
          "desc": "单向链表对象。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "slist_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "删除第一个满足条件的元素。",
        "name": "slist_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          },
          {
            "type": "int32_t",
            "name": "remove_size",
            "desc": "删除个数。"
          }
        ],
        "annotation": {},
        "desc": "删除满足条件的元素。\n备注：\n如果队列中符合条件的元素不足 remove_size，移除最后一个符合条件的元素后返回 RET_OK。\n如果队列中符合条件的元素大于 remove_size，在队列中移除 remove_size 个元素后返回 RET_OK。\nremove_size 为负数则会移除所有符合条件的元素。",
        "name": "slist_remove_with_compare",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "删除全部元素。",
        "name": "slist_remove_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加一个元素。",
        "name": "slist_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "插入一个元素。",
        "name": "slist_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在头部追加一个元素。",
        "name": "slist_prepend",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "遍历函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历元素。",
        "name": "slist_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出最后一个元素。",
        "name": "slist_tail_pop",
        "return": {
          "type": "ret_t",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出第一个元素。",
        "name": "slist_head_pop",
        "return": {
          "type": "ret_t",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "返回元素个数。",
        "name": "slist_size",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "返回满足条件元素的个数。",
        "name": "slist_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "清除单向链表中的元素。",
        "name": "slist_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "slist_t*",
            "name": "slist",
            "desc": "单向链表对象。"
          }
        ],
        "annotation": {},
        "desc": "清除单向链表中的元素，并释放单向链表对象。",
        "name": "slist_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "first",
        "desc": "首节点。",
        "type": "slist_node_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": "元素销毁函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": "元素比较函数。",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/slist.h",
    "desc": "单向链表\n\n用slist\\_init初始化时，用slist\\_deinit释放。如：\n\n```c\nslist_t slist;\nslist_init(&slist, destroy, compare);\n...\nslist_deinit(&slist);\n```\n\n用slist\\_create创建时，用slist\\_destroy销毁。如：\n\n```c\nslist_t* slist = slist_create(destroy, compare);\n...\nslist_destroy(slist);\n```",
    "name": "slist_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "tcp/udp 平台初始化。",
        "name": "tk_socket_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "tcp/udp 平台~初始化。",
        "name": "tk_socket_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "关闭socket句柄。",
        "name": "tk_socket_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口号。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "绑定到指定端口。",
        "name": "tk_socket_bind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "判断最后一次IO操作是否正常。",
        "name": "socket_last_io_has_error",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示有错误，否则表示正常。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "等待时间(ms)。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "等待数据。",
        "name": "tk_socket_wait_for_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          },
          {
            "type": "bool_t",
            "name": "blocking",
            "desc": "是否阻塞。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "设置为阻塞或非阻塞模式。",
        "name": "tk_socket_set_blocking",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          },
          {
            "type": "bool_t",
            "name": "",
            "desc": "g"
          },
          {
            "type": "struct sockaddr_in*",
            "name": "addr",
            "desc": "地址对象。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "解析主机名，并初始化addr对象。",
        "name": "socket_resolve",
        "return": {
          "type": "struct sockaddr*",
          "desc": "返回地址对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/socket_helper.h",
    "desc": "",
    "name": "socket",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "port",
            "desc": "端口号。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "监听指定端口，成功返回sock句柄。",
        "name": "tk_tcp_listen",
        "return": {
          "type": "int",
          "desc": "返回sock句柄。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket句柄。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "监听指定端口，成功返回sock句柄。",
        "name": "tk_tcp_accept",
        "return": {
          "type": "int",
          "desc": "返回sock句柄。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "host",
            "desc": "主机名或IP地址。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口号。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "连接到指定服务器。",
        "name": "tk_tcp_connect",
        "return": {
          "type": "int",
          "desc": "返回sock句柄。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/socket_helper.h",
    "desc": "",
    "name": "tcp_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "port",
            "desc": "端口号。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "监听指定端口，成功返回sock句柄。",
        "name": "tk_udp_listen",
        "return": {
          "type": "int",
          "desc": "返回sock句柄。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "host",
            "desc": "主机名或IP地址。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口号。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "连接到指定服务器。",
        "name": "tk_udp_connect",
        "return": {
          "type": "int",
          "desc": "返回sock句柄。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/socket_helper.h",
    "desc": "",
    "name": "udp_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int*",
            "name": "socks",
            "desc": "由于返回生成的socket句柄。"
          }
        ],
        "annotation": {},
        "desc": "生成两个socket句柄。两者可以模拟客户端和服务器通信。",
        "name": "tk_socketpair",
        "return": {
          "type": "int",
          "desc": "小于0表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/socket_pair.h",
    "desc": "socketpair",
    "name": "socketpair_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/state_machine.h",
    "desc": "状态机事件",
    "name": "tk_sm_event_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/state_machine.h",
    "desc": "状态转换条件",
    "name": "tk_sm_transition_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/state_machine.h",
    "desc": "状态结构体",
    "name": "tk_sm_state_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_state_machine_t*",
            "name": "fsm",
            "desc": "状态机地址"
          },
          {
            "type": "const tk_sm_state_t*",
            "name": "initial_state",
            "desc": "初始状态"
          }
        ],
        "annotation": {},
        "desc": "初始化",
        "name": "tk_state_machine_init",
        "return": {
          "type": "ret_t",
          "desc": "返回 ret_t 值"
        }
      },
      {
        "params": [
          {
            "type": "tk_state_machine_t*",
            "name": "fsm",
            "desc": "状态机地址"
          },
          {
            "type": "tk_sm_event_t*",
            "name": "event",
            "desc": "事件"
          }
        ],
        "annotation": {},
        "desc": "事件处理",
        "name": "tk_state_machine_handle",
        "return": {
          "type": "ret_t",
          "desc": "返回 ret_t 值"
        }
      },
      {
        "params": [
          {
            "type": "tk_state_machine_t*",
            "name": "fsm",
            "desc": "状态机地址"
          }
        ],
        "annotation": {},
        "desc": "获取上一个状态",
        "name": "tk_state_machine_previous_get",
        "return": {
          "type": "tk_sm_state_t*",
          "desc": "返回 tk_sm_state_t 对象"
        }
      },
      {
        "params": [
          {
            "type": "tk_state_machine_t*",
            "name": "fsm",
            "desc": "状态机地址"
          }
        ],
        "annotation": {},
        "desc": "获取当前状态",
        "name": "tk_state_machine_current_get",
        "return": {
          "type": "tk_sm_state_t*",
          "desc": "返回 tk_sm_state_t 对象"
        }
      },
      {
        "params": [
          {
            "type": "tk_state_machine_t*",
            "name": "fsm",
            "desc": "状态机地址"
          },
          {
            "type": "tk_sm_event_t*",
            "name": "event",
            "desc": "事件"
          }
        ],
        "annotation": {},
        "desc": "反初始化",
        "name": "tk_state_machine_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回 ret_t 值"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/state_machine.h",
    "desc": "状态机结构体",
    "name": "tk_state_machine_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const str_str_t*",
            "name": "items",
            "desc": "str_str_t数组。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "name。"
          }
        ],
        "annotation": {},
        "desc": "根据name获取对应的value。",
        "name": "str_str_value",
        "return": {
          "type": "const char*",
          "desc": "返回value。"
        }
      },
      {
        "params": [
          {
            "type": "const str_str_t*",
            "name": "items",
            "desc": "str_str_t数组。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "value"
          }
        ],
        "annotation": {},
        "desc": "根据value获取对应的name。",
        "name": "str_str_name",
        "return": {
          "type": "const char*",
          "desc": "返回name。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/str_str.h",
    "desc": "字符串-字符串类型。\n\n负责把一个字符串映射成另外一个字符串。\n\n示例：\n\n```c\nstatic const str_str_t color_values[] = {{\"1\", \"red\"}, {\"2\", \"black\"}, {\"3\", \"blue\"}, {\"4\", \"white\"}};\nconst char* value = str_str_value(color_values, \"3\");\nconst char* name = str_str_name(color_values, \"blue\", \"0\");\nprintf(\"value = %s \\n\", value);\nprintf(\"name = %s \\n\", name);\n```",
    "name": "str_str_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化字符串对象。",
        "name": "str_init",
        "return": {
          "type": "str_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {},
        "desc": "扩展字符串到指定的容量。",
        "name": "str_extend",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待比较的字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断两个字符串是否相等。",
        "name": "str_eq",
        "return": {
          "type": "bool_t",
          "desc": "返回是否相等。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "str_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "清除字符串内容。",
        "name": "str_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "str_set_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "str_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "追加多个字符串。以NULL结束。\n\n示例：\n\n```c\nstr_t s;\nstr_init(&s, 0);\n\nstr_append_more(&s, \"abc\", \"123\", NULL);\nlog_debug(\"%s\\n\", s.str);\n\nstr_reset(&s);\n```",
        "name": "str_append_more",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要追加的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "str_append_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          }
        ],
        "annotation": {},
        "desc": "插入子字符串。",
        "name": "str_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要插入的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "插入子字符串。",
        "name": "str_insert_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "删除子字符串。",
        "name": "str_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char",
            "name": "c",
            "desc": "要追加的字符。"
          }
        ],
        "annotation": {},
        "desc": "追加一个字符。",
        "name": "str_append_char",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char",
            "name": "c",
            "desc": "要追加的字符。"
          },
          {
            "type": "uint32_t",
            "name": "n",
            "desc": "字符的个数。"
          }
        ],
        "annotation": {},
        "desc": "同一个字符追加n次。",
        "name": "str_append_n_chars",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "要追加的整数。"
          }
        ],
        "annotation": {},
        "desc": "追加一个整数。",
        "name": "str_append_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "要追加的整数。"
          }
        ],
        "annotation": {},
        "desc": "追加一个int64整数。",
        "name": "str_append_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint64_t",
            "name": "value",
            "desc": "要追加的整数。"
          }
        ],
        "annotation": {},
        "desc": "追加一个uint64整数。",
        "name": "str_append_uint64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "要追加的浮点数。"
          }
        ],
        "annotation": {},
        "desc": "追加一个浮点数。",
        "name": "str_append_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "json_str",
            "desc": "待追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "追加一个字符串，字符串前后加英文双引号，字符串本身的双引号被转义为\\\"。",
        "name": "str_append_json_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "追加int格式的json键值对。",
        "name": "str_append_json_int_pair",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串格式的json键值对。",
        "name": "str_append_json_str_pair",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "追加doube格式的json键值对。",
        "name": "str_append_json_double_pair",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "追加bool格式的json键值对。",
        "name": "str_append_json_bool_pair",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "删除最后一个字符。",
        "name": "str_pop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "对字符串进行反转义。如：把\"\\n\"转换成'\\n'。",
        "name": "str_unescape",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          }
        ],
        "annotation": {},
        "desc": "对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。",
        "name": "str_decode_xml_entity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要解码的XML文本。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "对XML基本的entity进行解码，目前仅支持&lt;&gt;&quota;&amp;。",
        "name": "str_decode_xml_entity_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": "用整数初始化字符串。",
        "name": "str_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": "用浮点数初始化字符串。",
        "name": "str_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "str_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "wstr",
            "desc": "Unicode字符串。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "str_from_wstr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "wstr",
            "desc": "Unicode字符串"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "Unicode字符串的长度。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "str_from_wstr_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成整数。",
        "name": "str_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数。",
        "name": "str_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式(如:\"%02x\" 表示生成小写)"
          }
        ],
        "annotation": {},
        "desc": "把二进制的数据编码成16进制格式的字符串。",
        "name": "str_encode_hex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "数据缓存区(返回)。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据最大长度。"
          }
        ],
        "annotation": {},
        "desc": "把16进制格式的字符串解码成字符串。",
        "name": "str_encode_hex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断字符串是否以指定的子串结尾。",
        "name": "str_end_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串结尾。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断字符串是否以指定的子串开头。",
        "name": "str_start_with",
        "return": {
          "type": "bool_t",
          "desc": "返回是否以指定的子串开头。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除首尾指定的字符。",
        "name": "str_trim",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除首部指定的字符。",
        "name": "str_trim_left",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要去除的字符集合。"
          }
        ],
        "annotation": {},
        "desc": "去除尾部指定的字符。",
        "name": "str_trim_right",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "待替换的子串。"
          },
          {
            "type": "char*",
            "name": "new_text",
            "desc": "将替换成的子串。"
          }
        ],
        "annotation": {},
        "desc": "字符串替换。",
        "name": "str_replace",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成小写。",
        "name": "str_to_lower",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成大写。",
        "name": "str_to_upper",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "将字符串中的变量展开为obj中对应的属性值。\n\n变量的格式为${xxx}：\n\n* xxx为变量名时，${xxx}被展开为obj的属性xxx的值。\n* xxx为表达式时，${xxx}被展开为表达式的值，表达式中可以用变量，$为变量的前缀，如${$x+$y}。\n* xxx为变量名时，而不存在obj的属性时，${xxx}被移出。",
        "name": "str_expand_vars",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "other",
            "desc": "另外一个字符串。"
          }
        ],
        "annotation": {},
        "desc": "计算str和other的共同前缀，并设置到str中。",
        "name": "str_common_prefix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "重置字符串为空。",
        "name": "str_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "前后颠倒字符串。",
        "name": "str_reverse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "substr",
            "desc": "字串。"
          }
        ],
        "annotation": {},
        "desc": "统计字串出现的次数。",
        "name": "str_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回字符串出现的次数。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": "字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/str.h",
    "desc": "可变长度的UTF8字符串。\n\n示例：\n\n```c\nstr_t s;\nstr_init(&s, 0);\n\nstr_append(&s, \"abc\");\nstr_append(&s, \"123\");\nlog_debug(\"%s\\n\", s.str);\n\nstr_reset(&s);\n```\n\n> 先调str\\_init进行初始化，最后调用str\\_reset释放内存。",
    "name": "str_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_thread_entry_t",
            "name": "entry",
            "desc": "线程函数。"
          },
          {
            "type": "void*",
            "name": "args",
            "desc": "线程函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "创建thread对象。",
        "name": "tk_thread_create",
        "return": {
          "type": "tk_thread_t*",
          "desc": "thread对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": "设置线程的名称。\n\n> 需要在调用start之前调用本函数。",
        "name": "tk_thread_set_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          },
          {
            "type": "uint32_t",
            "name": "stack_size",
            "desc": "栈的大小。"
          }
        ],
        "annotation": {},
        "desc": "设置线程的栈大小。\n\n> 需要在调用start之前调用本函数。",
        "name": "tk_thread_set_stack_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          },
          {
            "type": "tk_thread_priority_t",
            "name": "priority",
            "desc": "优先级。"
          }
        ],
        "annotation": {},
        "desc": "设置线程的优先级。\n\n> 部分平台支持。",
        "name": "tk_thread_set_priority",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_priority_t",
            "name": "priority",
            "desc": "优先级。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "获取平台相关的优先级\n\n> 部分平台支持。\n> 根据 AWTK 通用优先级枚举获取平台相关的优先级",
        "name": "tk_thread_get_priority_from_platform",
        "return": {
          "type": "int32_t",
          "desc": "返回平台相关的优先级。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "启动线程。",
        "name": "tk_thread_start",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "等待线程退出。\n必须调用 tk_thread_destroy 函数来释放线程资源，以免出现内存泄漏的问题。",
        "name": "tk_thread_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "获取线程的参数。",
        "name": "tk_thread_get_args",
        "return": {
          "type": "void*",
          "desc": "返回线程的参数。"
        }
      },
      {
        "params": [
          {
            "type": "tk_thread_t*",
            "name": "thread",
            "desc": "thread对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁thread对象。\n在销毁对象前必须调用 tk_thread_join 函数等待退出线程",
        "name": "tk_thread_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "获取当前线程的原生句柄。",
        "name": "tk_thread_self",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前线程的原生句柄。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/thread.h",
    "desc": "线程对象。",
    "name": "tk_thread_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(秒)。",
        "name": "time_now_s",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(秒)。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(毫秒)。",
        "name": "time_now_ms",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(毫秒)。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "获取当前时间(微秒)。",
        "name": "time_now_us",
        "return": {
          "type": "uint64_t",
          "desc": "返回当前时间(微秒)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/time_now.h",
    "desc": "获取当前时间的函数。\n这里的当前时间是相对的，在嵌入式系统一般相对于开机时间。\n它本身并没有任何意义，一般用来计算时间间隔，如实现定时器和动画等等。",
    "name": "time_now_t",
    "annotation": {
      "scriptable": true,
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的定时器管理器。",
        "name": "timer_manager",
        "return": {
          "type": "timer_manager_t*",
          "desc": "返回定时器管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager_t",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省的定时器管理器。",
        "name": "timer_manager_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_get_time_t",
            "name": "get_time",
            "desc": "获取当前时间的函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建定时器管理器。",
        "name": "timer_manager_create",
        "return": {
          "type": "timer_manager_t*",
          "desc": "返回定时器管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "timer_get_time_t",
            "name": "get_time",
            "desc": "获取当前时间的函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化定时器管理器。",
        "name": "timer_manager_init",
        "return": {
          "type": "timer_manager_t*",
          "desc": "返回定时器管理器对象。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构定时器管理器。",
        "name": "timer_manager_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "析构并释放定时器管理器。",
        "name": "timer_manager_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "timer_func_t*",
            "name": "on_timer",
            "desc": "timer回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "时间。"
          }
        ],
        "annotation": {},
        "desc": "添加定时器。",
        "name": "timer_manager_add",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的ID，TK_INVALID_ID表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timer_id。"
          }
        ],
        "annotation": {},
        "desc": "根据id删除定时器。",
        "name": "timer_manager_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "timer回调函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "根据上下文删除所有对应的定时器。",
        "name": "timer_manager_all_remove_by_ctx",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "uint32_t*",
            "name": "timer_id",
            "desc": "timer_id。"
          }
        ],
        "annotation": {},
        "desc": "重置定时器。",
        "name": "timer_manager_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          },
          {
            "type": "uint32_t",
            "name": "timer_id",
            "desc": "timer_id"
          }
        ],
        "annotation": {},
        "desc": "查找指定ID的定时器。",
        "name": "timer_manager_find",
        "return": {
          "type": "timer_info_t*",
          "desc": "返回timer的信息。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "检查全部定时器的函数，如果时间到期，调用相应的timer函数。",
        "name": "timer_manager_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "返回定时器的个数。",
        "name": "timer_manager_count",
        "return": {
          "type": "uint32_t",
          "desc": "返回timer的个数。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "返回最近的定时器到期时间。",
        "name": "timer_manager_next_time",
        "return": {
          "type": "uint64_t",
          "desc": "返回最近的timer到期时间。"
        }
      },
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。。"
          },
          {
            "type": "timer_info_t*",
            "name": "timer",
            "desc": "timer对象。"
          }
        ],
        "annotation": {},
        "desc": "追加定时器。",
        "name": "timer_manager_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/timer_manager.h",
    "desc": "定时器管理器。",
    "name": "timer_manager_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          },
          {
            "type": "char*",
            "name": "separtor",
            "desc": "分隔字符。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化tokenizer对象。",
        "name": "tokenizer_init",
        "return": {
          "type": "tokenizer_t*",
          "desc": "tokenizer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "要解析的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "字符串长度。"
          },
          {
            "type": "char*",
            "name": "separtor",
            "desc": "分隔字符。"
          },
          {
            "type": "char*",
            "name": "single_char_token",
            "desc": "单字符token。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化tokenizer对象。",
        "name": "tokenizer_init_ex",
        "return": {
          "type": "tokenizer_t*",
          "desc": "tokenizer对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "是否还有下一个token。",
        "name": "tokenizer_has_more",
        "return": {
          "type": "bool_t",
          "desc": "还有下一个token返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token。",
        "name": "tokenizer_next",
        "return": {
          "type": "char*",
          "desc": "成功返回token，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符集。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token，该token直到遇到指定的char。",
        "name": "tokenizer_next_until",
        "return": {
          "type": "char*",
          "desc": "成功返回token，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符集。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个expr，该expr直到遇到指定的char。",
        "name": "tokenizer_next_expr_until",
        "return": {
          "type": "char*",
          "desc": "成功返回token，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "int",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token，并转换成int。",
        "name": "tokenizer_next_int",
        "return": {
          "type": "char*",
          "desc": "成功返回token的int值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          },
          {
            "type": "float",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取下一个token，并转换成float。",
        "name": "tokenizer_next_float",
        "return": {
          "type": "char*",
          "desc": "成功返回token的float值，失败返回缺省值。"
        }
      },
      {
        "params": [
          {
            "type": "tokenizer_t*",
            "name": "tokenizer",
            "desc": "tokenizer对象。"
          }
        ],
        "annotation": {},
        "desc": "重置tokenizer。",
        "name": "tokenizer_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "str",
        "desc": "字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "size",
        "desc": "字符串的长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "当前位置。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "separtor",
        "desc": "分隔字符串。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "single_char_token",
        "desc": "单字符的token。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/tokenizer.h",
    "desc": "从字符串中解析出一个一个的token。\n\n```c\ntokenizer_t tokenizer;\ntokenizer_t* t = tokenizer_init(&tokenizer, \"20,111.2,22.3,333.3,44,555.5\", 0xffffff, \",\");\n\nwhile(tokenizer_has_more(t)) {\ndouble v = tokenizer_next_float(t, 0);\nlog_debug(\"%lf\\n\", v);\n}\n\ntokenizer_deinit(t);\n```",
    "name": "tokenizer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_type_t",
            "name": "type",
            "desc": "元素的类型。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "数组的初始容量(元素个数)。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建typed_array对象。",
        "name": "typed_array_create",
        "return": {
          "type": "typed_array_t*",
          "desc": "数组对象。"
        }
      },
      {
        "params": [
          {
            "type": "value_type_t",
            "name": "type",
            "desc": "元素的类型。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "数组的容量(元素个数)。"
          }
        ],
        "annotation": {},
        "desc": "扩展typed_array到指定容量。",
        "name": "typed_array_extend",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回的元素。"
          }
        ],
        "annotation": {},
        "desc": "获取指定序数的元素。",
        "name": "typed_array_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "元素。"
          }
        ],
        "annotation": {},
        "desc": "设置指定序数的元素。",
        "name": "typed_array_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序数。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "元素。"
          }
        ],
        "annotation": {},
        "desc": "在指定序数插入元素。",
        "name": "typed_array_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置序数。"
          }
        ],
        "annotation": {},
        "desc": "删除指定位置的元素。",
        "name": "typed_array_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出最后一个元素。",
        "name": "typed_array_pop",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回的元素。"
          }
        ],
        "annotation": {},
        "desc": "返回最后一个元素。",
        "name": "typed_array_tail",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加一个元素。",
        "name": "typed_array_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素。",
        "name": "typed_array_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "typed_array_t*",
            "name": "typed_array",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁typed_array对象。",
        "name": "typed_array_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "数组中元素的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "数组的容量大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data",
        "desc": "数组中的元素。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "type",
        "desc": "元素的类型。",
        "type": "value_type_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "element_size",
        "desc": "单个元素的大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/typed_array.h",
    "desc": "带类型的动态数组，根据元素个数动态调整数组的容量。\n\n示例：\n\n```c\nvalue_t v;\ntyped_array_t* typed_array = typed_array_create(VALUE_TYPE_INT, 10);\ntyped_array_push(a, value_set_int(&v, 123));\ntyped_array_push(a, value_set_int(&v, 234));\n...\ntyped_array_destroy(typed_array);\n```",
    "name": "typed_array_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "函数返回值常量定义。",
    "consts": [
      {
        "desc": "成功。",
        "name": "RET_OK"
      },
      {
        "desc": "Out of memory。",
        "name": "RET_OOM"
      },
      {
        "desc": "失败。",
        "name": "RET_FAIL"
      },
      {
        "desc": "没有实现/不支持。",
        "name": "RET_NOT_IMPL"
      },
      {
        "desc": "退出。通常用于主循环。",
        "name": "RET_QUIT"
      },
      {
        "desc": "找到。",
        "name": "RET_FOUND"
      },
      {
        "desc": "对象忙。",
        "name": "RET_BUSY"
      },
      {
        "desc": "移出。通常用于定时器。",
        "name": "RET_REMOVE"
      },
      {
        "desc": "重复。通常用于定时器。",
        "name": "RET_REPEAT"
      },
      {
        "desc": "没找到。",
        "name": "RET_NOT_FOUND"
      },
      {
        "desc": "操作完成。",
        "name": "RET_DONE"
      },
      {
        "desc": "停止后续操作。",
        "name": "RET_STOP"
      },
      {
        "desc": "跳过当前项。",
        "name": "RET_SKIP"
      },
      {
        "desc": "继续后续操作。",
        "name": "RET_CONTINUE"
      },
      {
        "desc": "对象属性变化。",
        "name": "RET_OBJECT_CHANGED"
      },
      {
        "desc": "集合数目变化。",
        "name": "RET_ITEMS_CHANGED"
      },
      {
        "desc": "无效参数。",
        "name": "RET_BAD_PARAMS"
      },
      {
        "desc": "超时。",
        "name": "RET_TIMEOUT"
      },
      {
        "desc": "CRC错误。",
        "name": "RET_CRC"
      },
      {
        "desc": "IO错误。",
        "name": "RET_IO"
      },
      {
        "desc": "End of Stream",
        "name": "RET_EOS"
      },
      {
        "desc": "没有改变。",
        "name": "RET_NOT_MODIFIED"
      }
    ],
    "header": "tkc/types_def.h",
    "name": "ret_t",
    "prefix": "RET_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "surl",
            "desc": "字符串格式的URL。"
          }
        ],
        "annotation": {},
        "desc": "创建URL对象。",
        "name": "url_create",
        "return": {
          "type": "url_t*",
          "desc": "返回URL对象。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "schema",
            "desc": "schema。"
          }
        ],
        "annotation": {},
        "desc": "设置schema。",
        "name": "url_set_schema",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "user_name",
            "desc": "用户名。"
          }
        ],
        "annotation": {},
        "desc": "设置用户名。",
        "name": "url_set_user_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "password",
            "desc": "密码。"
          }
        ],
        "annotation": {},
        "desc": "设置密码。",
        "name": "url_set_password",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "host",
            "desc": "主机名。"
          }
        ],
        "annotation": {},
        "desc": "设置主机名。",
        "name": "url_set_host",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "int32_t",
            "name": "port",
            "desc": "端口。"
          }
        ],
        "annotation": {},
        "desc": "设置端口。",
        "name": "url_set_port",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          }
        ],
        "annotation": {},
        "desc": "设置路径。",
        "name": "url_set_path",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "参数值。"
          }
        ],
        "annotation": {},
        "desc": "设置参数。",
        "name": "url_set_param",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "参数名。"
          }
        ],
        "annotation": {},
        "desc": "获取参数。",
        "name": "url_get_param",
        "return": {
          "type": "const char*",
          "desc": "返回指定参数名的参数值。"
        }
      },
      {
        "params": [
          {
            "type": "url_t*",
            "name": "url",
            "desc": "url对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁url对象。",
        "name": "url_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "schema",
        "desc": "schema。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "user_name",
        "desc": "用户名。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "password",
        "desc": "密码。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "host",
        "desc": "主机名。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "path",
        "desc": "路径。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "port",
        "desc": "端口。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "params",
        "desc": "参数集合。",
        "type": "tk_object_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/url.h",
    "desc": "URL",
    "name": "url_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "in",
            "desc": "输入字符串。"
          },
          {
            "type": "const char*",
            "name": "out",
            "desc": "输出字符串。"
          },
          {
            "type": "uint32_t",
            "name": "out_size",
            "desc": "输出字符串的最大长度。"
          }
        ],
        "annotation": {},
        "desc": "把ucs字符串转成UTF8字符串。",
        "name": "tk_utf8_from_utf16",
        "return": {
          "type": "char*",
          "desc": "返回UTF8字符串。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "in",
            "desc": "输入字符串。"
          },
          {
            "type": "uint32_t",
            "name": "in_size",
            "desc": "输入字符串的长度。"
          },
          {
            "type": "const char*",
            "name": "out",
            "desc": "输出字符串。"
          },
          {
            "type": "uint32_t",
            "name": "out_size",
            "desc": "输出字符串的最大长度。"
          }
        ],
        "annotation": {},
        "desc": "把ucs字符串转成UTF8字符串。",
        "name": "tk_utf8_from_utf16_ex",
        "return": {
          "type": "char*",
          "desc": "返回UTF8字符串。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "str。"
          },
          {
            "type": "const wchar_t*",
            "name": "out",
            "desc": "返回结果缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "将char类型转换为wchar_t类型。",
        "name": "tk_utf8_to_utf16",
        "return": {
          "type": "wchar_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "str。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区大小。"
          },
          {
            "type": "const wchar_t*",
            "name": "out",
            "desc": "返回结果缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "out_size",
            "desc": "缓冲区大小。"
          }
        ],
        "annotation": {},
        "desc": "将char类型转换为wchar_t类型。",
        "name": "tk_utf8_to_utf16_ex",
        "return": {
          "type": "wchar_t*",
          "desc": "值。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "in",
            "desc": "输入字符串。"
          },
          {
            "type": "int32_t",
            "name": "size",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "把ucs字符串转成UTF8字符串。\n> 由调用者释放返回的指针。",
        "name": "tk_utf8_dup_utf16",
        "return": {
          "type": "char*",
          "desc": "返回UTF8字符串。"
        }
      },
      {
        "params": [
          {
            "type": "uint8_t",
            "name": "c",
            "desc": "字符的第一个字节。"
          }
        ],
        "annotation": {},
        "desc": "获取第一个字节为c的字符的字节数。",
        "name": "tk_utf8_get_bytes_of_leading",
        "return": {
          "type": "uint32_t",
          "desc": "返回字符的字节数。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "输入字符串。"
          }
        ],
        "annotation": {},
        "desc": "如果字符串最后一个字符串是无效的，删掉该无效字符。\n\n> 对于用strncpy/snprintf等生成字符串时，如果目标字符串内存大小不够，\n> 可能最后一个字符被从中间截断，导致该字符是无效的，这可能会触发assert，\n> 本函数可以用来删除最后一个无效字符。",
        "name": "tk_utf8_trim_invalid_char",
        "return": {
          "type": "char*",
          "desc": "返回UTF8字符串。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/utf8.h",
    "desc": "wchar_t和char类型转换接口。\n\n示例：\n\n```c\nconst char* str = \"hello\";\nconst wchar_t* wstr = L\"hello\";\nchar res_str[128];\nwchar_t res_wstr[128];\n\ntk_utf8_to_utf16(str, res_wstr, ARRAY_SIZE(res_wstr));\ntk_utf8_from_utf16(wstr, res_str, ARRAY_SIZE(res_str));\n```",
    "name": "utf8_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为整型数的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为整型数。",
        "name": "tk_atoi",
        "return": {
          "type": "int32_t",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为整型的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为整型。",
        "name": "tk_atol",
        "return": {
          "type": "int64_t",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为整型的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为整型。",
        "name": "tk_atoul",
        "return": {
          "type": "uint64_t",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为布尔类型的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为布尔类型。",
        "name": "tk_atob",
        "return": {
          "type": "bool_t",
          "desc": "返回转换后的布尔类型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为浮点类型的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为浮点类型。",
        "name": "tk_atof",
        "return": {
          "type": "double",
          "desc": "返回转换后的浮点类型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "a",
            "desc": "要进行比较的第一个字符串。"
          },
          {
            "type": "const char*",
            "name": "b",
            "desc": "要进行比较的第二个字符串。"
          }
        ],
        "annotation": {},
        "desc": "字符串比较函数。",
        "name": "tk_str_cmp",
        "return": {
          "type": "int32_t",
          "desc": "如果返回值=-1，则表示a为NULL；如果返回值=1，则表示b为NULL；如果返回值<0，则表示a小于b；如果返回值>0，则表示a大于b；如果返回值=0，则表示a等于b。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "a",
            "desc": "要进行比较的第一个字符串。"
          },
          {
            "type": "const char*",
            "name": "b",
            "desc": "要进行比较的第二个字符串。"
          }
        ],
        "annotation": {},
        "desc": "字符串比较函数（不区分大小写）。",
        "name": "tk_str_icmp",
        "return": {
          "type": "int32_t",
          "desc": "如果返回值=-1，则表示a为NULL；如果返回值=1，则表示b为NULL；如果返回值<0，则表示a小于b；如果返回值>0，则表示a大于b；如果返回值=0，则表示a等于b。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "要转换为整型的宽字符串。"
          }
        ],
        "annotation": {},
        "desc": "将宽字符串转换为整型。",
        "name": "tk_watoi",
        "return": {
          "type": "int",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "要转换为整型的宽字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "将宽字符串转换为整型。",
        "name": "tk_watoi_n",
        "return": {
          "type": "int",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "要转换为布尔类型的宽字符串。"
          }
        ],
        "annotation": {},
        "desc": "将宽字符串转换为布尔类型。",
        "name": "tk_watob",
        "return": {
          "type": "bool_t",
          "desc": "返回转换后的布尔类型。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "要转换为浮点类型的宽字符串。"
          }
        ],
        "annotation": {},
        "desc": "将宽字符串转换为浮点类型。",
        "name": "tk_watof",
        "return": {
          "type": "double",
          "desc": "返回转换后的浮点类型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要输入的原始字符串。"
          }
        ],
        "annotation": {},
        "desc": "跳过字符串函数，如：字符串\"hello123world\"，返回的结果是\"123world\"。",
        "name": "tk_skip_to_num",
        "return": {
          "type": "const char*",
          "desc": "返回转换后的字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "保存字符串缓冲区。"
          },
          {
            "type": "int",
            "name": "len",
            "desc": "缓冲区大小。"
          },
          {
            "type": "int",
            "name": "n",
            "desc": "要转换的整型。"
          }
        ],
        "annotation": {},
        "desc": "将整型转换为字符串。",
        "name": "tk_itoa",
        "return": {
          "type": "const char*",
          "desc": "返回字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "保存字符串缓冲区。"
          },
          {
            "type": "int",
            "name": "len",
            "desc": "缓冲区大小。"
          },
          {
            "type": "double",
            "name": "f",
            "desc": "要转换的浮点型。"
          }
        ],
        "annotation": {},
        "desc": "将浮点型转换为字符串。",
        "name": "tk_ftoa",
        "return": {
          "type": "const char*",
          "desc": "返回字符串。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为整型的字符串。"
          },
          {
            "type": "const char**",
            "name": "end",
            "desc": "对类型char*的对象的引用。"
          },
          {
            "type": "int",
            "name": "base",
            "desc": "基数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为整型。",
        "name": "tk_strtoi",
        "return": {
          "type": "int32_t",
          "desc": "返回转换后的整型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为长整型的字符串。"
          },
          {
            "type": "const char**",
            "name": "end",
            "desc": "对类型char*的对象的引用。"
          },
          {
            "type": "int",
            "name": "base",
            "desc": "基数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为长整型。",
        "name": "tk_strtol",
        "return": {
          "type": "long",
          "desc": "返回转换后的长整型。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要转换为长整型的字符串。"
          },
          {
            "type": "const char**",
            "name": "end",
            "desc": "对类型char*的对象的引用。"
          },
          {
            "type": "int",
            "name": "base",
            "desc": "基数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转换为长整型。",
        "name": "tk_strtoll",
        "return": {
          "type": "int64_t",
          "desc": "返回转换后的长整型。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "dst",
            "desc": "目标字符串。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "原字符串。"
          }
        ],
        "annotation": {},
        "desc": "将src所指向的字符串复制到dst。",
        "name": "tk_strcpy",
        "return": {
          "type": "char*",
          "desc": "返回目标字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "dst",
            "desc": "目标字符串。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "源字符串。"
          },
          {
            "type": "size_t",
            "name": "len",
            "desc": "要复制的字符串个数。"
          }
        ],
        "annotation": {},
        "desc": "将src所指向的字符串复制到dst，最多复制len个字符串，并在[len]位置添加'\\0'。\n\n> 请确保dst的长度>=(len+1)",
        "name": "tk_strncpy",
        "return": {
          "type": "char*",
          "desc": "返回目标字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "dst",
            "desc": "目标字符串。"
          },
          {
            "type": "size_t",
            "name": "dst_len",
            "desc": "目标字符串内存长度。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "源字符串。"
          },
          {
            "type": "size_t",
            "name": "src_len",
            "desc": "要复制的字符串个数。"
          }
        ],
        "annotation": {},
        "desc": "将src所指向的字符串复制到dst，最多复制min(dst_len-1, src_len)个字符串，并在[len]位置添加'\\0'。",
        "name": "tk_strncpy_s",
        "return": {
          "type": "char*",
          "desc": "返回目标字符串。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "原字符串。"
          }
        ],
        "annotation": {},
        "desc": "字符串拷贝函数。",
        "name": "tk_strdup",
        "return": {
          "type": "char*",
          "desc": "返回指向的复制字符串指针，如果失败则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "原宽字符串。"
          }
        ],
        "annotation": {},
        "desc": "宽字符串拷贝函数。",
        "name": "tk_wstrdup",
        "return": {
          "type": "wchar_t*",
          "desc": "返回指向的复制宽字符串指针，如果失败则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "原字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "要复制的字符串个数。"
          }
        ],
        "annotation": {},
        "desc": "字符串拷贝函数，最多复制len个字符串。",
        "name": "tk_strndup",
        "return": {
          "type": "char*",
          "desc": "返回指向的复制字符串指针，如果失败则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          }
        ],
        "annotation": {},
        "desc": "获取字符串的长度。str为空时返回0。",
        "name": "tk_strlen",
        "return": {
          "type": "uint32_t",
          "desc": "返回字符串的长度。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "const char*",
            "name": "substr",
            "desc": "子字符串。"
          }
        ],
        "annotation": {},
        "desc": "从后往前查找指定的字符串。",
        "name": "tk_strrstr",
        "return": {
          "type": "const char*",
          "desc": "返回字符串的位置或者NULL。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "被追加字符串。"
          },
          {
            "type": "uint32_t",
            "name": "max_len",
            "desc": "字符串的最大长度。"
          },
          {
            "type": "const char*",
            "name": "s",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "字符串追加函数。",
        "name": "tk_str_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t*",
            "name": "buff",
            "desc": "buff"
          },
          {
            "type": "uint16_t",
            "name": "val",
            "desc": "值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          }
        ],
        "annotation": {},
        "desc": "设置数据2字节。",
        "name": "tk_memset16",
        "return": {
          "type": "uint16_t*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t*",
            "name": "buff",
            "desc": "buff。"
          },
          {
            "type": "void*",
            "name": "val",
            "desc": "值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          }
        ],
        "annotation": {},
        "desc": "设置数据3字节。",
        "name": "tk_memset24",
        "return": {
          "type": "uint32_t*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t*",
            "name": "buff",
            "desc": "buff。"
          },
          {
            "type": "uint32_t",
            "name": "val",
            "desc": "值。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          }
        ],
        "annotation": {},
        "desc": "设置数据4字节。",
        "name": "tk_memset32",
        "return": {
          "type": "uint32_t*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "uint16_t*",
            "name": "dst",
            "desc": "目标"
          },
          {
            "type": "uint16_t*",
            "name": "src",
            "desc": "源。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          }
        ],
        "annotation": {},
        "desc": "拷贝数据2字节。",
        "name": "tk_memcpy16",
        "return": {
          "type": "uint16_t*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t*",
            "name": "dst",
            "desc": "目标"
          },
          {
            "type": "uint32_t*",
            "name": "src",
            "desc": "源。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          }
        ],
        "annotation": {},
        "desc": "拷贝数据4字节。",
        "name": "tk_memcpy32",
        "return": {
          "type": "uint32_t*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "dst",
            "desc": "目标"
          },
          {
            "type": "void*",
            "name": "src",
            "desc": "源。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "个数。"
          },
          {
            "type": "uint8_t",
            "name": "bpp",
            "desc": "单个数据的字节数。"
          }
        ],
        "annotation": {},
        "desc": "已bpp字节为标准拷贝数据。",
        "name": "tk_pixel_copy",
        "return": {
          "type": "void*",
          "desc": "返回设置好的buff。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "目标字符串。"
          },
          {
            "type": "size_t",
            "name": "size",
            "desc": "拷贝字节数。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式化字符串。"
          }
        ],
        "annotation": {},
        "desc": "将可变参数(...)按照format格式化字符串，并将字符串复制到str中。",
        "name": "tk_snprintf",
        "return": {
          "type": "int",
          "desc": "返回格式化后的字符串长度。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "目标字符串。"
          },
          {
            "type": "size_t",
            "name": "size",
            "desc": "拷贝字节数。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式化字符串。"
          },
          {
            "type": "va_list",
            "name": "ap",
            "desc": "可变参数。"
          }
        ],
        "annotation": {},
        "desc": "将可变参数ap按照format格式化字符串，并将字符串复制到str中。",
        "name": "tk_vsnprintf",
        "return": {
          "type": "int",
          "desc": "返回格式化后的字符串长度。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "要输入的字符串。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式化字符串。"
          }
        ],
        "annotation": {},
        "desc": "从字符串读取格式化输入。",
        "name": "tk_sscanf",
        "return": {
          "type": "int",
          "desc": "返回成功匹配和赋值的个数。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "完整的文件名。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "用于返回文件名。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "文件名(str参数)的最大长度。"
          }
        ],
        "annotation": {},
        "desc": "从完整文件名中获取文件名。",
        "name": "filename_to_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "完整的文件名。"
          },
          {
            "type": "char*",
            "name": "str",
            "desc": "用于返回文件名。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "文件名(str参数)的最大长度。"
          },
          {
            "type": "bool_t",
            "name": "remove_extname",
            "desc": "是否移除扩展名。"
          }
        ],
        "annotation": {},
        "desc": "从完整文件名中获取文件名。",
        "name": "filename_to_name_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          },
          {
            "type": "str_t*",
            "name": "s",
            "desc": "用于返回内容。"
          }
        ],
        "annotation": {},
        "desc": "expand include process instruction to file content: <?include filename=\"view_me.inc\" ?>",
        "name": "xml_file_expand_read",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "dst",
            "desc": "目标字符串。"
          },
          {
            "type": "const char*",
            "name": "src",
            "desc": "源字符串。"
          }
        ],
        "annotation": {},
        "desc": "字符串拷贝函数。\n> XXX: 要求dst为NULL或内存块的首地址，本函数调用之后，dst可能无效，请保留返回的地址",
        "name": "tk_str_copy",
        "return": {
          "type": "char*",
          "desc": "返回指向的复制字符串指针，如果失败则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "空的destroy函数。",
        "name": "dummy_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "缺省的destroy函数。释放data指向的内存。",
        "name": "default_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "a",
            "desc": "数据a。"
          },
          {
            "type": "const void*",
            "name": "b",
            "desc": "数据b。"
          }
        ],
        "annotation": {},
        "desc": "指针比较。",
        "name": "pointer_compare",
        "return": {
          "type": "int",
          "desc": "返回0表示相等，返回负数表示小于，返回整数表示大于。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "a",
            "desc": "数据a。"
          },
          {
            "type": "const void*",
            "name": "b",
            "desc": "数据b。"
          }
        ],
        "annotation": {},
        "desc": "始终返回相等。",
        "name": "compare_always_equal",
        "return": {
          "type": "int",
          "desc": "始终返回0。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名字字符串。"
          }
        ],
        "annotation": {},
        "desc": "判断是否是有效的属性名。",
        "name": "tk_is_valid_name",
        "return": {
          "type": "bool_t",
          "desc": "如果名称有效返回TRUE，否则返回FALSE。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要检查字符串。"
          },
          {
            "type": "const char*",
            "name": "prefix",
            "desc": "被检查的字符串。"
          }
        ],
        "annotation": {},
        "desc": "检查字符串是否以指定的字符串prefix开头。",
        "name": "tk_str_start_with",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是；否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "要检查字符串。"
          },
          {
            "type": "const char*",
            "name": "appendix",
            "desc": "被检查的字符串。"
          }
        ],
        "annotation": {},
        "desc": "检查字符串是否以指定的字符串appendix结尾。",
        "name": "tk_str_end_with",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是；否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "下划线名字。"
          },
          {
            "type": "char*",
            "name": "out",
            "desc": "驼峰名字(保存结果)。"
          },
          {
            "type": "uint32_t",
            "name": "max_out_size",
            "desc": "结果最大长度。"
          }
        ],
        "annotation": {},
        "desc": "将下划线名字转成驼峰名字。",
        "name": "tk_under_score_to_camel",
        "return": {
          "type": "const char*",
          "desc": "返回T驼峰名字。"
        }
      },
      {
        "params": [
          {
            "type": "const void*",
            "name": "p",
            "desc": "指针。"
          }
        ],
        "annotation": {},
        "desc": "将指针转换成int。\n\n>与tk_pointer_from_int配套使用，也就是pointer本身必须就是整数，而不是指针，否则pointer会被截断。",
        "name": "tk_pointer_to_int",
        "return": {
          "type": "int32_t",
          "desc": "返回对应的int数据。"
        }
      },
      {
        "params": [
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": "将int转换成指针。\n\n> 常用于将int类型的数据作为回调函数的ctx。",
        "name": "tk_pointer_from_int",
        "return": {
          "type": "void*",
          "desc": "返回对应的指针。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "要被转换成大写字母的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将小写字母转换为大写字母。\n>修改传入的字符串。",
        "name": "tk_str_toupper",
        "return": {
          "type": "char*",
          "desc": "返回转换后的大写字母字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "被转换的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将单词首字母转换为大写字母。\n>修改传入的字符串。",
        "name": "tk_str_totitle",
        "return": {
          "type": "char*",
          "desc": "返回转换后的字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "要被转换成小写字母的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将大写字母转换为小写字母。\n>修改传入的字符串。",
        "name": "tk_str_tolower",
        "return": {
          "type": "char*",
          "desc": "返回转换后的小写字母字符串。"
        }
      },
      {
        "params": [
          {
            "type": "char*",
            "name": "str",
            "desc": "utf8编码的字符串。"
          }
        ],
        "annotation": {},
        "desc": "将utf8字符串拷贝为UCS字符串。",
        "name": "tk_wstr_dup_utf8",
        "return": {
          "type": "wchar_t*",
          "desc": "返回UCS字符串(需要调用TKMEM_FREE释放)。"
        }
      },
      {
        "params": [
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": "统计UCS字符串中某个字符出现的次数。",
        "name": "tk_wstr_count_c",
        "return": {
          "type": "uint32_t",
          "desc": "返回字符出现的次数。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "img_w",
            "desc": "图片宽度。"
          },
          {
            "type": "uint32_t",
            "name": "img_h",
            "desc": "图片宽度。"
          },
          {
            "type": "const char*",
            "name": "region",
            "desc": "region。"
          },
          {
            "type": "rect_t*",
            "name": "r",
            "desc": "返回具体位置。"
          }
        ],
        "annotation": {},
        "desc": "解析子图的区域信息。",
        "name": "image_region_parse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object对象。"
          },
          {
            "type": "str_t*",
            "name": "str",
            "desc": "用于返回结果。"
          }
        ],
        "annotation": {},
        "desc": "将对象转换成json字符串。",
        "name": "object_to_json",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "dst_url",
            "desc": "目标URL。"
          },
          {
            "type": "const char*",
            "name": "src_url",
            "desc": "源URL。"
          }
        ],
        "annotation": {},
        "desc": "将数据从源URL拷贝到目标URL。",
        "name": "data_url_copy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void**",
            "name": "array",
            "desc": "数据。"
          },
          {
            "type": "size_t",
            "name": "nr",
            "desc": "元素个数。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数。"
          }
        ],
        "annotation": {},
        "desc": "快速排序。",
        "name": "tk_qsort",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串。"
          },
          {
            "type": "const char**",
            "name": "str_array",
            "desc": "字符串数组。"
          },
          {
            "type": "uint32_t",
            "name": "array_size",
            "desc": "字符串数组中字符串的个数。"
          }
        ],
        "annotation": {},
        "desc": "检查字符串是否在字符串数组中。",
        "name": "tk_str_is_in_array",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示在，否则表示不在。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/utils.h",
    "desc": "工具类。",
    "name": "utils_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述类型常量定义。",
    "consts": [
      {
        "desc": "有符号8位整数类型。",
        "name": "VALUE_DESC_TYPE_INT8"
      },
      {
        "desc": "无符号8位整数类型。",
        "name": "VALUE_DESC_TYPE_UINT8"
      },
      {
        "desc": "有符号16位整数类型。",
        "name": "VALUE_DESC_TYPE_INT16"
      },
      {
        "desc": "无符号16位整数类型。",
        "name": "VALUE_DESC_TYPE_UINT16"
      },
      {
        "desc": "有符号32位整数类型。",
        "name": "VALUE_DESC_TYPE_INT32"
      },
      {
        "desc": "无符号32位整数类型。",
        "name": "VALUE_DESC_TYPE_UINT32"
      },
      {
        "desc": "有符号64位整数类型。",
        "name": "VALUE_DESC_TYPE_INT64"
      },
      {
        "desc": "无符号64位整数类型。",
        "name": "VALUE_DESC_TYPE_UINT64"
      },
      {
        "desc": "单精度浮点数类型。",
        "name": "VALUE_DESC_TYPE_FLOAT"
      },
      {
        "desc": "双精度浮点数类型。",
        "name": "VALUE_DESC_TYPE_DOUBLE"
      },
      {
        "desc": "布尔类型。",
        "name": "VALUE_DESC_TYPE_BOOL"
      },
      {
        "desc": "字符串类型。",
        "name": "VALUE_DESC_TYPE_STRING"
      },
      {
        "desc": "二进制类型。",
        "name": "VALUE_DESC_TYPE_BINARY"
      },
      {
        "desc": "整数枚举类型。",
        "name": "VALUE_DESC_TYPE_INT_ENUMS"
      },
      {
        "desc": "字符串枚举类型。",
        "name": "VALUE_DESC_TYPE_STRING_ENUMS"
      }
    ],
    "header": "tkc/value_desc.h",
    "name": "value_desc_type_t",
    "prefix": "VALUE_DESC_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述格式常量定义。",
    "consts": [
      {
        "desc": "无特殊格式。",
        "name": "VALUE_FORMAT_TYPE_NONE"
      },
      {
        "desc": "16进制格式。",
        "name": "VALUE_FORMAT_TYPE_HEX"
      },
      {
        "desc": "非负格式(用于进一步限制float/double)。",
        "name": "VALUE_FORMAT_TYPE_HEX"
      },
      {
        "desc": "手机号码格式。",
        "name": "VALUE_FORMAT_TYPE_PHONE"
      },
      {
        "desc": "邮件格式。",
        "name": "VALUE_FORMAT_TYPE_PHONE"
      },
      {
        "desc": "ip4地址格式。",
        "name": "VALUE_FORMAT_TYPE_IP4_ADDRESS"
      },
      {
        "desc": "域名格式。",
        "name": "VALUE_FORMAT_TYPE_DOMAIN_NAME"
      },
      {
        "desc": "URL格式。",
        "name": "VALUE_FORMAT_TYPE_URL"
      },
      {
        "desc": "JSON格式。",
        "name": "VALUE_FORMAT_TYPE_JSON"
      },
      {
        "desc": "XML格式。",
        "name": "VALUE_FORMAT_TYPE_XML"
      },
      {
        "desc": "UBJSON格式。",
        "name": "VALUE_FORMAT_TYPE_UBJSON"
      },
      {
        "desc": "JS格式。",
        "name": "VALUE_FORMAT_TYPE_JS"
      },
      {
        "desc": "CSV格式。",
        "name": "VALUE_FORMAT_TYPE_CSV"
      }
    ],
    "header": "tkc/value_desc.h",
    "name": "value_format_type_t",
    "prefix": "VALUE_FORMAT_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述范围常量定义。",
    "consts": [
      {
        "desc": "单个对象的属性。",
        "name": "PROP_DESC_FLAG_OBJECT"
      },
      {
        "desc": "同一个类所有实例共享属性。",
        "name": "PROP_DESC_FLAG_CLASS"
      },
      {
        "desc": "全局属性。",
        "name": "PROP_DESC_FLAG_GLOBAL"
      },
      {
        "desc": "可读取。",
        "name": "PROP_DESC_FLAG_READABLE,"
      },
      {
        "desc": "可修改。",
        "name": "PROP_DESC_FLAG_WRITBALE,"
      },
      {
        "desc": "可配置。",
        "name": "PROP_DESC_FLAG_CONFIGURABLE"
      },
      {
        "desc": "需要持久化。",
        "name": "PROP_DESC_FLAG_PERSISTENT"
      }
    ],
    "header": "tkc/value_desc.h",
    "name": "prop_desc_flags_t",
    "prefix": "PROP_DESC_FLAGS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "参数描述范围常量定义。",
    "consts": [
      {
        "desc": "必须提供。",
        "name": "ARG_DESC_FLAGS_REQUIRED"
      }
    ],
    "header": "tkc/value_desc.h",
    "name": "arg_desc_flags_t",
    "prefix": "ARG_DESC_FLAGS_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "format",
        "desc": "格式。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "flags",
        "desc": "flags。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "name",
        "desc": "名称。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "display_name",
        "desc": "显示名称。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "desc",
        "desc": "描述。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "属性描述。",
    "name": "value_desc_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "const  char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "enums",
        "desc": "枚举值。",
        "type": "const char**",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "字符串枚举类型属性描述。",
    "name": "value_desc_string_enums_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "类型常量定义。",
    "consts": [
      {
        "desc": "无效类型。",
        "name": "VALUE_TYPE_INVALID"
      },
      {
        "desc": "BOOL类型。",
        "name": "VALUE_TYPE_BOOL"
      },
      {
        "desc": "int8_t类型。",
        "name": "VALUE_TYPE_INT8"
      },
      {
        "desc": "uint8_t类型。",
        "name": "VALUE_TYPE_UINT8"
      },
      {
        "desc": "int16_t类型。",
        "name": "VALUE_TYPE_INT16"
      },
      {
        "desc": "uint16_t类型。",
        "name": "VALUE_TYPE_UINT16"
      },
      {
        "desc": "int32_t类型。",
        "name": "VALUE_TYPE_INT32"
      },
      {
        "desc": "uint32_t类型。",
        "name": "VALUE_TYPE_UINT32"
      },
      {
        "desc": "int64_t类型。",
        "name": "VALUE_TYPE_INT64"
      },
      {
        "desc": "uint64_t类型。",
        "name": "VALUE_TYPE_UINT64"
      },
      {
        "desc": "void*类型。",
        "name": "VALUE_TYPE_POINTER"
      },
      {
        "desc": "float_t类型。",
        "name": "VALUE_TYPE_FLOAT"
      },
      {
        "desc": "float类型。",
        "name": "VALUE_TYPE_FLOAT32"
      },
      {
        "desc": "double类型。",
        "name": "VALUE_TYPE_DOUBLE"
      },
      {
        "desc": "char*类型。",
        "name": "VALUE_TYPE_STRING"
      },
      {
        "desc": "wchar_t*类型。",
        "name": "VALUE_TYPE_WSTRING"
      },
      {
        "desc": "tk_object_t*类型。",
        "name": "VALUE_TYPE_OBJECT"
      },
      {
        "desc": "带长度的字符串。",
        "name": "VALUE_TYPE_SIZED_STRING"
      },
      {
        "desc": "二进制数据。",
        "name": "VALUE_TYPE_BINARY"
      },
      {
        "desc": "二进制数据(UBJSON)。",
        "name": "VALUE_TYPE_UBJSON"
      },
      {
        "desc": "特殊用途。",
        "name": "VALUE_TYPE_TOKEN"
      },
      {
        "desc": "渐变颜色。",
        "name": "VALUE_TYPE_GRADIENT"
      }
    ],
    "header": "tkc/value.h",
    "name": "value_type_t",
    "prefix": "VALUE_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "action的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建waitable_action_queue对象。",
        "name": "waitable_action_queue_create",
        "return": {
          "type": "waitable_action_queue_t*",
          "desc": "waitable_action_queue对象。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_action_queue_t*",
            "name": "q",
            "desc": "waitable_action_queue对象。"
          },
          {
            "type": "qaction_t**",
            "name": "action",
            "desc": "用于返回action对象。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间(ms)"
          }
        ],
        "annotation": {},
        "desc": "接收一个请求。",
        "name": "waitable_action_queue_recv",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_action_queue_t*",
            "name": "q",
            "desc": "waitable_action_queue对象。"
          },
          {
            "type": "qaction_t*",
            "name": "action",
            "desc": "action对象。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间(ms)"
          }
        ],
        "annotation": {},
        "desc": "发送一个请求。",
        "name": "waitable_action_queue_send",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_action_queue_t*",
            "name": "q",
            "desc": "waitable_action_queue对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "waitable_action_queue_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/waitable_action_queue.h",
    "desc": "waitable actionqueue",
    "name": "waitable_action_queue_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "容量。"
          },
          {
            "type": "uint32_t",
            "name": "block_size",
            "desc": "块的大小。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建waitable_ring_buffer对象。",
        "name": "waitable_ring_buffer_create",
        "return": {
          "type": "waitable_ring_buffer_t*",
          "desc": "waitable_ring_buffer对象。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_ring_buffer_t*",
            "name": "rb",
            "desc": "waitable_ring_buffer对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "接收数据的buff。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "读取数据的长度(必须等于 block_size)。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间(ms)"
          }
        ],
        "annotation": {},
        "desc": "读取数据。",
        "name": "waitable_ring_buffer_read",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_ring_buffer_t*",
            "name": "rb",
            "desc": "waitable_ring_buffer对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "要写入的数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据的长度(必须等于 block_size)。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间(ms)"
          }
        ],
        "annotation": {},
        "desc": "写入数据。",
        "name": "waitable_ring_buffer_write",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "waitable_ring_buffer_t*",
            "name": "rb",
            "desc": "waitable_ring_buffer对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁。",
        "name": "waitable_ring_buffer_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/waitable_ring_buffer.h",
    "desc": "waitable ring buffer",
    "name": "waitable_ring_buffer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "初始容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "初始化字符串对象。",
        "name": "wstr_init",
        "return": {
          "type": "wstr_t*",
          "desc": "str对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "wstr_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要设置的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "设置字符串。",
        "name": "wstr_set_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "清除字符串内容。",
        "name": "wstr_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          }
        ],
        "annotation": {},
        "desc": "设置UTF8字符串。",
        "name": "wstr_set_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "要设置的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "长度。"
          }
        ],
        "annotation": {},
        "desc": "设置UTF8字符串。",
        "name": "wstr_set_utf8_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "char*",
            "name": "text",
            "desc": "返回的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "text最大长度。"
          }
        ],
        "annotation": {},
        "desc": "获取UTF8字符串。",
        "name": "wstr_get_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "要删除的字符数。"
          }
        ],
        "annotation": {},
        "desc": "删除指定范围的字符。",
        "name": "wstr_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "指定的位置。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "待插入的文本。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "要插入的字符数。"
          }
        ],
        "annotation": {},
        "desc": "在指定位置插入字符串。",
        "name": "wstr_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要追加的字符串。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "wstr_append",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t*",
            "name": "text",
            "desc": "要追加的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串长度。"
          }
        ],
        "annotation": {},
        "desc": "追加字符串。",
        "name": "wstr_append_with_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": "追加一个字符。",
        "name": "wstr_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "删除尾部字符。",
        "name": "wstr_pop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "format",
            "desc": "格式(用于snprintf格式化数值)"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "数值。"
          }
        ],
        "annotation": {},
        "desc": "追加一个整数。",
        "name": "wstr_push_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wstr_t*",
            "name": "other",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "判断两个字符是否相同。",
        "name": "wstr_equal",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示相同，否则表示不同。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "整数。"
          }
        ],
        "annotation": {},
        "desc": "用整数初始化字符串。",
        "name": "wstr_from_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "浮点数。"
          }
        ],
        "annotation": {},
        "desc": "用浮点数初始化字符串。",
        "name": "wstr_from_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "value_t",
            "name": "v",
            "desc": "value。"
          }
        ],
        "annotation": {},
        "desc": "用value初始化字符串。",
        "name": "wstr_from_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "int32_t*",
            "name": "v",
            "desc": "用于返回整数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成整数。",
        "name": "wstr_to_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double*",
            "name": "v",
            "desc": "用于返回浮点数。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数。",
        "name": "wstr_to_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "double",
            "name": "delta",
            "desc": "要加上的值。"
          }
        ],
        "annotation": {},
        "desc": "将字符串转成浮点数，加上delta，再转换回来。",
        "name": "wstr_add_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "去掉浮点数小数点尾部的零。",
        "name": "wstr_trim_float_zero",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t",
            "name": "newline",
            "desc": "换行符。"
          }
        ],
        "annotation": {},
        "desc": "规范化换行符。",
        "name": "wstr_normalize_newline",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "wchar_t",
            "name": "c",
            "desc": "字符。"
          }
        ],
        "annotation": {},
        "desc": "统计指定字符的个数。",
        "name": "wstr_count_char",
        "return": {
          "type": "uint32_t",
          "desc": "返回指定字符的个数。"
        }
      },
      {
        "params": [
          {
            "type": "wstr_t*",
            "name": "str",
            "desc": "str对象。"
          }
        ],
        "annotation": {},
        "desc": "重置字符串为空。",
        "name": "wstr_reset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "str",
        "desc": "字符串。",
        "type": "wchar_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/wstr.h",
    "desc": "可变长度的宽字符字符串。\n\n示例：\n\n```c\nwstr_t s;\nwstr_init(&s, 0);\n\nwstr_append(&s, L\"abc\");\nwstr_append(&s, L\"123\");\n\nwstr_reset(&s);\n```\n> 先调wstr\\_init进行初始化，最后调用wstr\\_reset释放内存。",
    "name": "wstr_t",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const wchar_t*",
        "name": "s",
        "desc": "wchar_t*。"
      },
      {
        "type": "wchar_t",
        "name": "c",
        "desc": "wchar_t。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "查找字符位置",
    "name": "wcs_chr",
    "return": {
      "type": "const wchar_t*",
      "desc": "返回找到c的地址。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "wchar_t*",
        "name": "s1",
        "desc": "目标串。"
      },
      {
        "type": "const wchar_t*",
        "name": "s2",
        "desc": "源串。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "复制字符串",
    "name": "wcs_cpy",
    "return": {
      "type": "const wchar_t*",
      "desc": "复制后的串地址。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "wchar_t*",
        "name": "s1",
        "desc": "目标串。"
      },
      {
        "type": "const wchar_t*",
        "name": "s2",
        "desc": "源串。"
      },
      {
        "type": "uint32_t",
        "name": "n",
        "desc": "拷贝长度。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "按照长度来复制字符串",
    "name": "wcs_ncpy",
    "return": {
      "type": "const wchar_t*",
      "desc": "复制后的串地址。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const wchar_t*",
        "name": "s1",
        "desc": "目标串。"
      },
      {
        "type": "const wchar_t*",
        "name": "s2",
        "desc": "源串。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "比较字符串",
    "name": "wcs_cmp",
    "return": {
      "type": "int",
      "desc": "小于0表示s1<s2,等于0表示s1==s2,大于0表示s1>s2。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const wchar_t*",
        "name": "s",
        "desc": "串地址。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "获取字符串长度。",
    "name": "wcs_len",
    "return": {
      "type": "size_t",
      "desc": "返回串长度'\\0'结尾。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const wchar_t*",
        "name": "s",
        "desc": "源字符串。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "获取一个新的内存保存s串。",
    "name": "wcs_dup",
    "return": {
      "type": "wchar_t*",
      "desc": "返回新的字符串地址。"
    },
    "type": "method",
    "header": "tkc/wstr.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "tag",
            "desc": "tag名称。"
          },
          {
            "type": "const char**",
            "name": "attrs",
            "desc": "属性列表。"
          }
        ],
        "annotation": {},
        "desc": "解析到tag开始时调用本函数。",
        "name": "xml_builder_on_start",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "tag",
            "desc": "tag名称。"
          }
        ],
        "annotation": {},
        "desc": "解析到tag结束时调用本函数。",
        "name": "xml_builder_on_end",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "文本。"
          },
          {
            "type": "size_t",
            "name": "length",
            "desc": "文本长度。"
          }
        ],
        "annotation": {},
        "desc": "解析到文本时调用本函数。",
        "name": "xml_builder_on_text",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "注释。"
          },
          {
            "type": "size_t",
            "name": "length",
            "desc": "注释长度。"
          }
        ],
        "annotation": {},
        "desc": "解析到注释时调用本函数。",
        "name": "xml_builder_on_comment",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "const char*",
            "name": "tag",
            "desc": "tag名称。"
          },
          {
            "type": "const char**",
            "name": "attrs",
            "desc": "属性列表。"
          }
        ],
        "annotation": {},
        "desc": "解析到处理指令时调用本函数。",
        "name": "xml_builder_on_pi",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          },
          {
            "type": "int",
            "name": "line",
            "desc": "出现错误的行。"
          },
          {
            "type": "int",
            "name": "col",
            "desc": "出现错误的列。"
          },
          {
            "type": "const char*",
            "name": "message",
            "desc": "错误信息。"
          }
        ],
        "annotation": {},
        "desc": "解析遇到错误时调用本函数。",
        "name": "xml_builder_on_error",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁builder对象。",
        "name": "xml_builder_destroy",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "const char**",
            "name": "attrs",
            "desc": "属性列表。"
          },
          {
            "type": "const char*",
            "name": "attr",
            "desc": "属性名。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "获取属性。",
        "name": "xml_builder_get_attr",
        "return": {
          "type": "const char*",
          "desc": "返回属性的值。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "xml/xml_builder.h",
    "desc": "xml builder interface",
    "name": "xml_builder_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建解析器。",
        "name": "xml_parser_create",
        "return": {
          "type": "XmlParser*",
          "desc": "返回parser对象。"
        }
      },
      {
        "params": [
          {
            "type": "XmlParser*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "XmlBuilder*",
            "name": "builder",
            "desc": "builder对象。"
          }
        ],
        "annotation": {},
        "desc": "设置builder。",
        "name": "xml_parser_set_builder",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlParser*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "bool_t",
            "name": "trim_text",
            "desc": "是否去掉文本两端的空白字符。"
          }
        ],
        "annotation": {},
        "desc": "设置是否去掉文本两端的空白字符。\n\n> 默认值为去掉文本两端的空白字符，如果不希望去掉，调用本函数设置为FALSE。",
        "name": "xml_parser_set_trim_text",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlParser*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "const char*",
            "name": "xml",
            "desc": "数据。"
          },
          {
            "type": "int",
            "name": "length",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "解析数据。",
        "name": "xml_parser_parse",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlParser*",
            "name": "parser",
            "desc": "parser对象。"
          },
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "解析文件。",
        "name": "xml_parser_parse_file",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      },
      {
        "params": [
          {
            "type": "XmlParser*",
            "name": "parser",
            "desc": "parser对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁parser对象。",
        "name": "xml_parser_destroy",
        "return": {
          "type": "void",
          "desc": "返回无。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "xml/xml_parser.h",
    "desc": "xml解析器",
    "name": "XmlParser",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "编码名称。",
    "consts": [
      {
        "desc": "UTF-8。",
        "name": "ENCODING_UTF8"
      },
      {
        "desc": "UTF-16。",
        "name": "ENCODING_UTF16"
      },
      {
        "desc": "UTF-32。",
        "name": "ENCODING_UTF32"
      },
      {
        "desc": "GBK。",
        "name": "ENCODING_GBK"
      },
      {
        "desc": "BIG5-2003。",
        "name": "ENCODING_BIG"
      },
      {
        "desc": "GB_2312-80。",
        "name": "ENCODING_GB2312"
      },
      {
        "desc": "GB18030。",
        "name": "ENCODING_GB18030"
      }
    ],
    "header": "charset/encoding.h",
    "name": "encoding_name_t",
    "prefix": "ENCODING_NAME_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "encoding_name_t",
            "name": "from",
            "desc": "源字符串的编码名称。"
          },
          {
            "type": "const char*",
            "name": "from_str",
            "desc": "源字符串。"
          },
          {
            "type": "uint32_t",
            "name": "from_size",
            "desc": "源字符串的长度。"
          },
          {
            "type": "encoding_name_t",
            "name": "to",
            "desc": "目标字符串的编码名称。"
          },
          {
            "type": "const char*",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t",
            "name": "to_size",
            "desc": "目标字符串的最大长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "字符集转换。",
        "name": "encoding_convert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "from_str",
            "desc": "源字符串(utf8)。"
          },
          {
            "type": "uint32_t",
            "name": "from_size",
            "desc": "源字符串的长度。"
          },
          {
            "type": "const char*",
            "name": "to_str",
            "desc": "目标字符串(gbk)。"
          },
          {
            "type": "uint32_t",
            "name": "to_size",
            "desc": "目标字符串的最大长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将utf8转换成gbk编码。",
        "name": "encoding_utf8_to_gbk",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "from_str",
            "desc": "源字符串(gbk)。"
          },
          {
            "type": "uint32_t",
            "name": "from_size",
            "desc": "源字符串的长度。"
          },
          {
            "type": "const char*",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t",
            "name": "to_size",
            "desc": "目标字符串的最大长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将gbk转换成utf8编码。",
        "name": "encoding_gbk_to_utf8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册app_conf函数。",
        "name": "fscript_app_conf_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册typed array函数。",
        "name": "fscript_array_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册数学函数。",
        "name": "fscript_bits_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册crc16/crc32/cksum等函数。",
        "name": "fscript_crc_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册date time函数。",
        "name": "fscript_date_time_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册大端小断转换函数等函数。",
        "name": "fscript_endian_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册扩展函数。",
        "name": "fscript_ext_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册文件系统函数。",
        "name": "fscript_fs_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册iostream_file相关函数。",
        "name": "fscript_iostream_file_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册iostream_inet相关函数。",
        "name": "fscript_iostream_inet_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册iostream_serial相关函数。",
        "name": "fscript_iostream_serial_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册iostream相关函数。",
        "name": "fscript_iostream_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册istream相关等函数。",
        "name": "fscript_istream_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册json函数。",
        "name": "fscript_json_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册数学函数。",
        "name": "fscript_math_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册object函数。",
        "name": "fscript_object_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册ostream相关函数。",
        "name": "fscript_ostream_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册rbuffer相关函数。",
        "name": "fscript_rbuffer_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册typed array函数。",
        "name": "fscript_typed_array_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fscript_args_t*",
            "name": "args",
            "desc": "参数。"
          },
          {
            "type": "const uint8_t**",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t*",
            "name": "ret_size",
            "desc": "返回数据的长度。"
          }
        ],
        "annotation": {},
        "desc": "从参数中获取数据和长度。",
        "name": "fargs_get_data_and_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册wbuffer相关函数。",
        "name": "fscript_wbuffer_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "注册widget函数。",
        "name": "fscript_widget_register",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "charset/encoding.h",
    "desc": "encoding conversion\n\n示例：\n\n```c\n```",
    "name": "encoding_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据的长度。"
          },
          {
            "type": "ubjson_on_key_value_t",
            "name": "on_key_value",
            "desc": "回调函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "回调函数的上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "解析ubjson数据，遇到key/value时调用提供的回调函数。",
        "name": "ubjson_parse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据的长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "解析ubjson数据，生成object对象。",
        "name": "ubjson_to_object",
        "return": {
          "type": "void*",
          "desc": "返回object表示的数据。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据的长度。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将ubjson数据打印到控制台。",
        "name": "ubjson_dump",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ubjson/ubjson_parser.h",
    "desc": "ubjson parser",
    "name": "ubjson_parser_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "ubjson_write_callback_t",
            "name": "write",
            "desc": "真正写入数据的函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "write函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "ubjson_writer_init",
        "return": {
          "type": "ubjson_writer_t*",
          "desc": "返回writer对象。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "key的名称。"
          }
        ],
        "annotation": {},
        "desc": "写入key。",
        "name": "ubjson_writer_write_key",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入null。",
        "name": "ubjson_writer_write_null",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入noop。",
        "name": "ubjson_writer_write_noop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入true。",
        "name": "ubjson_writer_write_true",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入false。",
        "name": "ubjson_writer_write_false",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入int。",
        "name": "ubjson_writer_write_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "int8_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入int8。",
        "name": "ubjson_writer_write_int8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "uint8_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入uint8。",
        "name": "ubjson_writer_write_uint8",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "int16_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入int16。",
        "name": "ubjson_writer_write_int16",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入int32。",
        "name": "ubjson_writer_write_int32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入int64。",
        "name": "ubjson_writer_write_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入float。",
        "name": "ubjson_writer_write_float32",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入double。",
        "name": "ubjson_writer_write_float64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "char",
            "name": "value",
            "desc": "要写入的值。"
          }
        ],
        "annotation": {},
        "desc": "写入char。",
        "name": "ubjson_writer_write_char",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "要写入的字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入str。",
        "name": "ubjson_writer_write_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "要写入的字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串的长度。"
          }
        ],
        "annotation": {},
        "desc": "写入str。",
        "name": "ubjson_writer_write_str_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "要写入的对象。"
          }
        ],
        "annotation": {},
        "desc": "写入obj。",
        "name": "ubjson_writer_write_object",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入数组开始。\n> 即： [",
        "name": "ubjson_writer_write_array_begin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入数组结束。\n> 即： ]",
        "name": "ubjson_writer_write_array_end",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入对象开始。\n> 即： {",
        "name": "ubjson_writer_write_object_begin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          }
        ],
        "annotation": {},
        "desc": "写入对象结束。\n> 即：}",
        "name": "ubjson_writer_write_object_end",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "写入二进制数据。",
        "name": "ubjson_writer_write_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键值。"
          }
        ],
        "annotation": {},
        "desc": "写key和对象的开始。\n\n> 即：\"key\": {",
        "name": "ubjson_writer_write_kv_object_begin",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "tk_object_t*",
            "name": "value",
            "desc": "对象。"
          }
        ],
        "annotation": {},
        "desc": "写key和对象。\n\n> 即：\"key\": { object }",
        "name": "ubjson_writer_write_kv_object",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "int32_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和int的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "int64_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和int64_t的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "float",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和float的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "double",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和double的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "bool_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和bool的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "字符串。"
          }
        ],
        "annotation": {},
        "desc": "写入key和str的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "字符串。"
          },
          {
            "type": "uint32_t",
            "name": "len",
            "desc": "字符串的长度。"
          }
        ],
        "annotation": {},
        "desc": "写入key和str的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_str_len",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "ubjson_writer_t*",
            "name": "writer",
            "desc": "writer对象。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "键名。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "写入key和value_t的值。\n\n> 即：\"key\": value",
        "name": "ubjson_writer_write_kv_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "ubjson/ubjson_writer.h",
    "desc": "ubjson writer",
    "name": "ubjson_writer_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "char",
            "name": "sep",
            "desc": "分隔符。"
          },
          {
            "type": "csv_file_filter_t",
            "name": "filter",
            "desc": "过滤函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "过滤函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "创建空的csv对象。",
        "name": "csv_file_create_empty",
        "return": {
          "type": "csv_file_t*",
          "desc": "返回csv对象。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "csv_file_filter_t",
            "name": "filter",
            "desc": "过滤函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "过滤函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "设置过滤函数。",
        "name": "csv_file_set_filter",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          },
          {
            "type": "char",
            "name": "sep",
            "desc": "分隔符。"
          }
        ],
        "annotation": {},
        "desc": "根据文件创建csv对象。",
        "name": "csv_file_create",
        "return": {
          "type": "csv_file_t*",
          "desc": "返回csv对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "buff",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          },
          {
            "type": "char",
            "name": "sep",
            "desc": "分隔符。"
          }
        ],
        "annotation": {},
        "desc": "根据buff创建csv对象。",
        "name": "csv_file_create_with_buff",
        "return": {
          "type": "csv_file_t",
          "desc": "返回csv对象。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "从文件加载csv。",
        "name": "csv_file_load_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "buff",
            "desc": "数据。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "数据长度。"
          }
        ],
        "annotation": {},
        "desc": "从内存加载csv。",
        "name": "csv_file_load_buff",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "丢弃内存中的修改，重新加载当前文件。",
        "name": "csv_file_reload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          },
          {
            "type": "uint32_t",
            "name": "col",
            "desc": "列号。"
          }
        ],
        "annotation": {},
        "desc": "获取指定行列的数据。",
        "name": "csv_file_get",
        "return": {
          "type": "const char*",
          "desc": "返回数据。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          },
          {
            "type": "uint32_t",
            "name": "col",
            "desc": "列号。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "修改指定行列的数据。",
        "name": "csv_file_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          },
          {
            "type": "bool_t",
            "name": "checked",
            "desc": "是否勾选。"
          }
        ],
        "annotation": {},
        "desc": "勾选指定行。",
        "name": "csv_file_set_row_checked",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          }
        ],
        "annotation": {},
        "desc": "判断指定行是否勾选。",
        "name": "csv_file_is_row_checked",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示勾选，否则表示没勾选。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "删除全部勾选的行。",
        "name": "csv_file_remove_checked_rows",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "获取标题(不存在则返回NULL)。",
        "name": "csv_file_get_title",
        "return": {
          "type": "const char*",
          "desc": "返回标题。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "获取行数(包括标题)。",
        "name": "csv_file_get_rows",
        "return": {
          "type": "uint32_t",
          "desc": "返回行数。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "获取checked行数(包括标题)。",
        "name": "csv_file_get_checked_rows",
        "return": {
          "type": "uint32_t",
          "desc": "返回checked行数。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "获取列数。",
        "name": "csv_file_get_cols",
        "return": {
          "type": "uint32_t",
          "desc": "返回列数。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          }
        ],
        "annotation": {},
        "desc": "删除指定行。",
        "name": "csv_file_remove_row",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "追加一行。",
        "name": "csv_file_append_row",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "uint32_t",
            "name": "row",
            "desc": "行号。"
          },
          {
            "type": "const char*",
            "name": "data",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "插入一行。",
        "name": "csv_file_insert_row",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "保存。",
        "name": "csv_file_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "保存。",
        "name": "csv_file_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          },
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "保存。",
        "name": "csv_file_load_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁csv对象。",
        "name": "csv_file_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "has_title",
        "desc": "是否有标题。",
        "type": "bool_t"
      }
    ],
    "header": "csv/csv_file.h",
    "desc": "操作CSV文件。",
    "name": "csv_file_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "缓存不够时丢弃数据的策略。",
    "consts": [
      {
        "desc": "丢弃旧的数据。",
        "name": "DATA_DISCARD_OLD"
      },
      {
        "desc": "丢弃新的数据。",
        "name": "DATA_DISCARD_NEW"
      }
    ],
    "header": "misc/ostream_retry.h",
    "name": "data_discard_policy_t",
    "prefix": "DATA_DISCARD_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "fd",
            "desc": "fd."
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_serial_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "serial/ostream_serial.h",
    "desc": "基于串口实现的输出流。\n\ninput stream base on fd",
    "name": "tk_ostream_serial_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述WIFI的认证方式。",
    "consts": [
      {
        "desc": "WEP认证。",
        "name": "NETWORK_INTERFACE_WIFI_AUTH_WEP"
      },
      {
        "desc": "WPA/WPA2 认证。",
        "name": "NETWORK_INTERFACE_WIFI_AUTH_WPAWPA2"
      },
      {
        "desc": "无认证。",
        "name": "NETWORK_INTERFACE_WIFI_AUTH_NONE"
      }
    ],
    "header": "hal/network_interface.h",
    "name": "network_interface_wifi_auth_t",
    "prefix": "NETWORK_INTERFACE_WIFI_AUTH_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述WIFI的频段。",
    "consts": [
      {
        "desc": "2.4G频段。",
        "name": "NETWORK_INTERFACE_WIFI_FREQ_2_4G"
      },
      {
        "desc": "5G频段。",
        "name": "NETWORK_INTERFACE_WIFI_FREQ_5G"
      }
    ],
    "header": "hal/network_interface.h",
    "name": "network_interface_wifi_freq_t",
    "prefix": "NETWORK_INTERFACE_WIFI_FREQ_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "属性描述网卡类型。",
    "consts": [
      {
        "desc": "以太网。",
        "name": "NETWORK_INTERFACE_TYPE_ETH"
      },
      {
        "desc": "WIFI。",
        "name": "NETWORK_INTERFACE_TYPE_WIFI"
      },
      {
        "desc": "3G/4G/5G。",
        "name": "NETWORK_INTERFACE_TYPE_MOBILE"
      },
      {
        "desc": "未知类型。",
        "name": "NETWORK_INTERFACE_TYPE_UNKNOWN"
      }
    ],
    "header": "hal/network_interface.h",
    "name": "network_interface_type_t",
    "prefix": "NETWORK_INTERFACE_TYPE_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "char *",
            "name": "interface",
            "desc": "网卡名。"
          },
          {
            "type": "type",
            "name": "network_interface_type_t",
            "desc": "网卡接口类型。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口创建函数。",
        "name": "network_interface_create",
        "return": {
          "type": "network_interface_t",
          "desc": "网卡接口对象。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口使能函数。",
        "name": "network_interface_enable",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口禁能函数。",
        "name": "network_interface_disable",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口获取IP地址。",
        "name": "network_interface_get_ipaddr",
        "return": {
          "type": "char *",
          "desc": "返回IP地址成功，NULL失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口获取MAC地址。",
        "name": "network_interface_get_macaddr",
        "return": {
          "type": "char *",
          "desc": "返回MAC地址成功，NULL失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口获取状态。",
        "name": "network_interface_get_status",
        "return": {
          "type": "int",
          "desc": "0表示未连接，1表示连接成功，-1表示操作失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口获取通信质量。",
        "name": "network_interface_get_quality",
        "return": {
          "type": "int",
          "desc": "对于无线网络返回信号RSSI的绝对值， 对于有线网络，返回10、100、1000M带宽。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          },
          {
            "type": "char *",
            "name": "ipaddr",
            "desc": "网卡IP。"
          },
          {
            "type": "char *",
            "name": "netmask",
            "desc": "网卡MASK。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置IP地址。",
        "name": "network_interface_set_ipaddr",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          },
          {
            "type": "char *",
            "name": "dns",
            "desc": "网卡dns。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置DNS。",
        "name": "network_interface_set_dns",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置DNS。",
        "name": "network_interface_set_dhcp",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          },
          {
            "type": "char *",
            "name": "gateway",
            "desc": "网卡网关。"
          },
          {
            "type": "char *",
            "name": "dev",
            "desc": "出口网卡设备名。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置DNS。",
        "name": "network_interface_set_gateway",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          },
          {
            "type": "char *",
            "name": "essid",
            "desc": "wifi帐号 。"
          },
          {
            "type": "char *",
            "name": "passwd",
            "desc": "wifi密码。"
          },
          {
            "type": "network_interface_wifi_auth_t  ",
            "name": "auth",
            "desc": "wifi认证方式。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置WIFI STA模式。",
        "name": "network_interface_set_wifi_sta",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          },
          {
            "type": "char *",
            "name": "essid",
            "desc": "wifi帐号 。"
          },
          {
            "type": "char *",
            "name": "passwd",
            "desc": "wifi密码。"
          },
          {
            "type": "network_interface_wifi_auth_t  ",
            "name": "auth",
            "desc": "wifi认证方式。"
          },
          {
            "type": "uint8_t ",
            "name": "channel",
            "desc": "wifi通道。"
          },
          {
            "type": "network_interface_wifi_freq_t  ",
            "name": "freq",
            "desc": "wifi频段。"
          },
          {
            "type": "uint8_t ",
            "name": "hidden",
            "desc": "wifi是否隐藏。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口设置WIFI AP模式。",
        "name": "network_interface_set_wifi_ap",
        "return": {
          "type": "ret_t",
          "desc": "RET_OK表示成功，否则失败。"
        }
      },
      {
        "params": [
          {
            "type": "network_interface_t *",
            "name": "interface",
            "desc": "网卡对象。"
          }
        ],
        "annotation": {},
        "desc": "网卡接口销毁函数。",
        "name": "network_interface_destroy",
        "return": {
          "type": "void",
          "desc": "。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "hal/network_interface.h",
    "desc": "网卡接口。",
    "name": "network_interface_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "运行shell。",
        "name": "hal_shell_run",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "network_shell/network_shell.h",
    "desc": "a shell to access network interface",
    "name": "hal_shell_t",
    "annotation": {
      "fake": true
    },
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "app_name",
        "desc": "应用程序名称。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "初始化应用程序的配置信息。",
    "name": "app_conf_init_ini",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "conf_io/app_conf_init_ini.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "app_name",
        "desc": "应用程序名称。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "初始化应用程序的配置信息。",
    "name": "app_conf_init_json",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "conf_io/app_conf_init_json.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "app_name",
        "desc": "应用程序名称。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "初始化应用程序的配置信息。",
    "name": "app_conf_init_ubjson",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "conf_io/app_conf_init_ubjson.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "conf_loader_t",
        "name": "load",
        "desc": "配置加载函数。"
      },
      {
        "type": "const char*",
        "name": "app_name",
        "desc": "应用程序名称。"
      },
      {
        "type": "const char*",
        "name": "extname",
        "desc": "文件扩展名。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "初始化。",
    "name": "app_conf_init",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "conf_io/app_conf_init.h",
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": "恢复出厂设置。",
    "name": "app_conf_reset",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "conf_io/app_conf_init.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "",
            "desc": "。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "设置app_conf实例。",
        "name": "app_conf_set_instance",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "获取app_conf实例。",
        "name": "app_conf_get_instance",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回app_conf实例。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "持久保存配置。",
        "name": "app_conf_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "重新加载配置(内存中的配置丢失)。",
        "name": "app_conf_reload",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_func_t",
            "name": "on_event",
            "desc": "事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注册配置变化事件。",
        "name": "app_conf_on_changed",
        "return": {
          "type": "uint32_t",
          "desc": "返回id，用于app_conf_off_changed。"
        }
      },
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "id",
            "desc": "app_conf_on_changed返回的ID。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注销配置变化事件。",
        "name": "app_conf_off_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "void*",
            "name": "ctx",
            "desc": "事件处理函数上下文。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注销配置变化事件。",
        "name": "app_conf_off_changed_by_ctx",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "释放conf对象。",
        "name": "app_conf_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "设置配置项的值。",
        "name": "app_conf_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "配置项的值(用于返回)。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "获取配置项的值。",
        "name": "app_conf_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "检查配置项是否存在。",
        "name": "app_conf_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，FALSE表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置整数类型配置项的值。",
        "name": "app_conf_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int64_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置64位整数类型配置项的值。",
        "name": "app_conf_set_int64",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "bool_t",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置bool类型配置项的值。",
        "name": "app_conf_set_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "double",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置双精度类型配置项的值。",
        "name": "app_conf_set_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const char*",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "设置字符串类型配置项的值。",
        "name": "app_conf_set_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const wchar_t*",
            "name": "v",
            "desc": "配置项的值。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "设置宽字符串类型配置项的值。",
        "name": "app_conf_set_wstr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取整数类型配置项的值。",
        "name": "app_conf_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "int64_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取64位整数类型配置项的值。",
        "name": "app_conf_get_int64",
        "return": {
          "type": "int64_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取bool类型配置项的值。",
        "name": "app_conf_get_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "double",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取单精度浮点数类型配置项的值。",
        "name": "app_conf_get_double",
        "return": {
          "type": "double",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "获取字符串类型配置项的值。",
        "name": "app_conf_get_str",
        "return": {
          "type": "const char*",
          "desc": "返回配置项的值（如果不存在返回缺省值）。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          },
          {
            "type": "const wchar_t*",
            "name": "str",
            "desc": "返回值。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "最大长度(字符数)。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "获取宽字符串类型配置项的值。",
        "name": "app_conf_get_wstr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "key",
            "desc": "配置项的名称。"
          }
        ],
        "annotation": {
          "static": true,
          "scriptable": true
        },
        "desc": "删除配置项。",
        "name": "app_conf_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/app_conf.h",
    "desc": "应用程序的配置信息。\n\n底层实现可以是任何格式，比如INI，XML，JSON和UBJSON。\n\n对于树状的文档，key可以是多级的，用.分隔。如network.ip。\n\nconf-io是可选组件，需要自己包含头文件，否则64位数据类型会被截断成32位的数据。\n\n```c\n#include \"conf_io/app_conf.h\"\n```",
    "name": "app_conf_t",
    "annotation": {
      "fake": true,
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "data",
        "desc": "数据。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "从缓存区加载ini格式的conf doc对象。",
    "name": "conf_doc_load_ini",
    "return": {
      "type": "conf_doc_t*",
      "desc": "返回conf_doc对象。"
    },
    "type": "method",
    "header": "conf_io/conf_ini.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "conf_doc_t*",
        "name": "doc",
        "desc": "conf doc对象。"
      },
      {
        "type": "str_t*",
        "name": "str",
        "desc": "保存结果。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "保存conf doc对象为ini格式。",
    "name": "conf_doc_save_ini",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败"
    },
    "type": "method",
    "header": "conf_io/conf_ini.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "data",
        "desc": "JSON数据。"
      },
      {
        "type": "int32_t",
        "name": "size",
        "desc": "JSON数据长度。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "",
    "name": "conf_doc_load_json",
    "return": {
      "type": "conf_doc_t*",
      "desc": "返回doc对象。"
    },
    "type": "method",
    "header": "conf_io/conf_json.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "conf_doc_t*",
        "name": "doc",
        "desc": "doc对象。"
      },
      {
        "type": "str_t*",
        "name": "str",
        "desc": "保存结果。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "",
    "name": "conf_doc_save_json",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败"
    },
    "type": "method",
    "header": "conf_io/conf_json.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "prealloc_nodes_nr",
            "desc": "预先分配的节点数。"
          }
        ],
        "annotation": {},
        "desc": "构造函数。",
        "name": "conf_doc_create",
        "return": {
          "type": "conf_doc_t*",
          "desc": "返回doc对象。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "节点名称。"
          }
        ],
        "annotation": {},
        "desc": "创建一个空节点。",
        "name": "conf_doc_create_node",
        "return": {
          "type": "conf_node_t*",
          "desc": "返回节点对象。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁节点对象。",
        "name": "conf_doc_destroy_node",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "sibling",
            "desc": "待追加节点对象。"
          }
        ],
        "annotation": {},
        "desc": "追加一个兄弟节点。",
        "name": "conf_doc_append_sibling",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "从该节点查找。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "路径。"
          },
          {
            "type": "bool_t",
            "name": "create_if_not_exist",
            "desc": "不存在是否创建。"
          }
        ],
        "annotation": {},
        "desc": "根据path查找节点。",
        "name": "conf_doc_find_node",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "child",
            "desc": "待追加节点对象。"
          }
        ],
        "annotation": {},
        "desc": "追加一个子节点。",
        "name": "conf_doc_append_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "sibling",
            "desc": "待删除节点对象。"
          }
        ],
        "annotation": {},
        "desc": "删除指定的兄弟节点。",
        "name": "conf_doc_remove_sibling",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "child",
            "desc": "待删除节点对象。"
          }
        ],
        "annotation": {},
        "desc": "删除指定的子节点。",
        "name": "conf_doc_remove_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "待删除节点的名称。"
          }
        ],
        "annotation": {},
        "desc": "删除指定的子节点。",
        "name": "conf_doc_remove_child_by_name",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          }
        ],
        "annotation": {},
        "desc": "删除全部子节点。",
        "name": "conf_doc_remove_children",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定路径节点的值。",
        "name": "conf_doc_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "int32_t",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定路径节点的值。",
        "name": "conf_doc_set_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "bool_t",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定路径节点的值。",
        "name": "conf_doc_set_bool",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "float",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定路径节点的值。",
        "name": "conf_doc_set_float",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "const char*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定路径节点的值。",
        "name": "conf_doc_set_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "从该节点查找。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "int32_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get_int",
        "return": {
          "type": "int32_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "bool_t",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get_bool",
        "return": {
          "type": "bool_t",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "float",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get_float",
        "return": {
          "type": "float",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          },
          {
            "type": "const char*",
            "name": "defval",
            "desc": "缺省值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定路径节点的值。",
        "name": "conf_doc_get_str",
        "return": {
          "type": "const char*",
          "desc": "返回值。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "删除指定路径的节点。",
        "name": "conf_doc_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "删除指定路径的节点的全部子节点。",
        "name": "conf_doc_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "和前一个兄弟节点交换位置。",
        "name": "conf_doc_move_up",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "和后一个兄弟节点交换位置。",
        "name": "conf_doc_move_down",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "判断指定路径的节点是否存在。",
        "name": "conf_doc_exists",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示成功，FALSE表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "检查指定节点是否在兄弟节点中排第一。",
        "name": "conf_doc_is_first",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "检查指定节点是否在兄弟节点中排最后。",
        "name": "conf_doc_is_last",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示是，否则表示不是。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          },
          {
            "type": "const char*",
            "name": "path",
            "desc": "节点的路径。"
          }
        ],
        "annotation": {},
        "desc": "追加一个子节点。",
        "name": "conf_doc_add_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_doc_t*",
            "name": "doc",
            "desc": "文档对象。"
          }
        ],
        "annotation": {},
        "desc": "析构函数。",
        "name": "conf_doc_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "root",
        "desc": "根节点。",
        "type": "conf_node_t*"
      }
    ],
    "header": "conf_io/conf_node.h",
    "desc": "代表整个配置文件。",
    "name": "conf_doc_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "节点类型。",
    "consts": [
      {
        "desc": "无效节点。",
        "name": "CONF_NODE_NONE"
      },
      {
        "desc": "对象节点。",
        "name": "CONF_NODE_OBJECT"
      },
      {
        "desc": "数组节点。",
        "name": "CONF_NODE_ARRAY"
      },
      {
        "desc": "简单节点。",
        "name": "CONF_NODE_SIMPLE"
      }
    ],
    "header": "conf_io/conf_node.h",
    "name": "conf_node_type_t",
    "prefix": "CONF_NODE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "节点值得类型。",
    "consts": [
      {
        "desc": "无效类型。",
        "name": "CONF_NODE_VALUE_NONE"
      },
      {
        "desc": "bool_t类型。",
        "name": "CONF_NODE_VALUE_BOOL"
      },
      {
        "desc": "int8_t类型。",
        "name": "CONF_NODE_VALUE_INT8"
      },
      {
        "desc": "uint8_t类型。",
        "name": "CONF_NODE_VALUE_UINT8"
      },
      {
        "desc": "int16_t类型。",
        "name": "CONF_NODE_VALUE_INT16"
      },
      {
        "desc": "uint16_t类型。",
        "name": "CONF_NODE_VALUE_UINT16"
      },
      {
        "desc": "int32_t类型。",
        "name": "CONF_NODE_VALUE_INT32"
      },
      {
        "desc": "uint32_t类型。",
        "name": "CONF_NODE_VALUE_UINT32"
      },
      {
        "desc": "int64_t类型。",
        "name": "CONF_NODE_VALUE_INT64"
      },
      {
        "desc": "uint64_t类型。",
        "name": "CONF_NODE_VALUE_UINT64"
      },
      {
        "desc": "float类型。",
        "name": "CONF_NODE_VALUE_FLOAT32"
      },
      {
        "desc": "double类型。",
        "name": "CONF_NODE_VALUE_DOUBLE"
      },
      {
        "desc": "字符串类型。",
        "name": "CONF_NODE_VALUE_STRING"
      },
      {
        "desc": "短字符(len<=7)串类型。",
        "name": "CONF_NODE_VALUE_SMALL_STR"
      },
      {
        "desc": "节点类型。",
        "name": "CONF_NODE_VALUE_NODE"
      }
    ],
    "header": "conf_io/conf_node.h",
    "name": "conf_node_value_t",
    "prefix": "CONF_NODE_VALUE_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          }
        ],
        "annotation": {},
        "desc": "获得节点的名称。",
        "name": "conf_node_get_name",
        "return": {
          "type": "const char*",
          "desc": "返回节点名称。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "节点名称。"
          }
        ],
        "annotation": {},
        "desc": "查找指定名称的子节点。",
        "name": "conf_node_find_child",
        "return": {
          "type": "conf_node_t*",
          "desc": "返回节点对象。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "节点名称。"
          }
        ],
        "annotation": {},
        "desc": "查找指定名称的兄弟节点。",
        "name": "conf_node_find_sibling",
        "return": {
          "type": "conf_node_t*",
          "desc": "返回节点对象。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {},
        "desc": "设置节点的值。",
        "name": "conf_node_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "值(返回)。"
          }
        ],
        "annotation": {},
        "desc": "设置节点的值。",
        "name": "conf_node_get_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          }
        ],
        "annotation": {},
        "desc": "获取第一个子节点。",
        "name": "conf_node_get_first_child",
        "return": {
          "type": "conf_node_t*",
          "desc": "返回第一个子节点。"
        }
      },
      {
        "params": [
          {
            "type": "conf_node_t*",
            "name": "node",
            "desc": "节点对象。"
          },
          {
            "type": "conf_node_t*",
            "name": "child",
            "desc": "子节点对象。"
          }
        ],
        "annotation": {},
        "desc": "设置第一个子节点。",
        "name": "conf_node_set_first_child",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "next",
        "desc": "下一个兄弟节点。",
        "type": "conf_node_t*"
      },
      {
        "name": "parent",
        "desc": "父节点。",
        "type": "conf_node_t*"
      },
      {
        "name": "value_type",
        "desc": "值的类型。",
        "type": "uint8_t"
      },
      {
        "name": "node_type",
        "desc": "节点类型。",
        "type": "uint8_t"
      }
    ],
    "header": "conf_io/conf_node.h",
    "desc": "节点。",
    "name": "conf_node_t",
    "level": 1
  },
  {
    "params": [
      {
        "type": "const void*",
        "name": "data",
        "desc": "数据。"
      },
      {
        "type": "uint32_t",
        "name": "size",
        "desc": "数据长度。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "从缓存区加载ubjson格式的conf doc对象。",
    "name": "conf_doc_load_ubjson",
    "return": {
      "type": "conf_doc_t*",
      "desc": "返回conf_doc对象。"
    },
    "type": "method",
    "header": "conf_io/conf_ubjson.h",
    "level": 1
  },
  {
    "params": [
      {
        "type": "conf_doc_t*",
        "name": "doc",
        "desc": "conf doc对象。"
      },
      {
        "type": "ubjson_writer_t*",
        "name": "writer",
        "desc": "ubjson writer对象。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "保存conf doc对象为ubjson格式。",
    "name": "conf_doc_save_ubjson",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败"
    },
    "type": "method",
    "header": "conf_io/conf_ubjson.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建基于文件的data reader。\n> 不要直接调用，而是注册到 data\\_reader\\_factory后，通过data\\_reader\\_factory调用。",
        "name": "data_reader_file_create",
        "return": {
          "type": "data_reader_t*",
          "desc": "返回data reader对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_reader_file.h",
    "desc": "基于文件实现的 data_reader。通过 data_reader_factory 创建 reader 时，URL的格式如下(请用函数data_reader_file_build_url生成)：\n\n```\nfile://filename\n```",
    "name": "data_reader_file_t",
    "parent": "data_reader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "memname",
            "desc": "内存地址和大小的字符串格式表示 。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建基于内存的 data reader。\n\n> 不要直接调用，而是注册到 data\\_reader\\_factory后，通过data\\_reader\\_factory调用。",
        "name": "data_reader_mem_create",
        "return": {
          "type": "data_reader_t*",
          "desc": "返回data reader对象。"
        }
      },
      {
        "params": [
          {
            "type": "mem_t*",
            "name": "mem",
            "desc": "内存的地址。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "内存的长度。"
          },
          {
            "type": "char*",
            "name": "url",
            "desc": "生成的URL。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "构造内存URL。",
        "name": "data_reader_mem_build_url",
        "return": {
          "type": "const char*",
          "desc": "返回URL。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_reader_mem.h",
    "desc": "基于内存实现的 data_reader。通过 data_reader_factory 创建 reader 时，URL的格式如下(请用函数data_reader_mem_build_url生成)：\n\n```\nmem://addr:size\n```",
    "name": "data_reader_mem_t",
    "parent": "data_reader_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建基于文件的data writer。\n\n> 不要直接调用，而是注册到 data\\_writer\\_factory后，通过data\\_writer\\_factory调用",
        "name": "data_writer_file_create",
        "return": {
          "type": "data_writer_t*",
          "desc": "返回data writer对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_writer_file.h",
    "desc": "基于文件实现的 data_writer。通过 data_writer_factory 创建 writer 时，URL的格式如下：\n\n```\nfile://filename\n```",
    "name": "data_writer_file_t",
    "parent": "data_writer_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "wbuffer_name",
            "desc": "wbuffer地址的字符串格式表示 。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建基于wbuffer的data writer。\n\n> 不要直接调用，而是注册到 data\\_writer\\_factory后，通过data\\_writer\\_factory调用",
        "name": "data_writer_wbuffer_create",
        "return": {
          "type": "data_writer_t*",
          "desc": "返回data writer对象。"
        }
      },
      {
        "params": [
          {
            "type": "wbuffer_t*",
            "name": "wbuffer",
            "desc": "wbuffer对象。"
          },
          {
            "type": "char*",
            "name": "url",
            "desc": "生成的URL。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "构造wbuffer的URL。",
        "name": "data_writer_wbuffer_build_url",
        "return": {
          "type": "const char*",
          "desc": "返回URL。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/data_writer_wbuffer.h",
    "desc": "基于内存实现的 data_writer。通过 data_writer_factory 创建 writer 时，URL的格式如下(请用函数data_writer_wbuffer_build_url生成)：\n\n```\nwbuffer://addr\n```",
    "name": "data_writer_wbuffer_t",
    "parent": "data_writer_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_source_manager_t*",
            "name": "manager",
            "desc": "event_source_manager对象。"
          }
        ],
        "annotation": {},
        "desc": "创建事件源管理器。",
        "name": "event_source_manager_default_create",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source_manager_default.h",
    "desc": "缺省的事件源管理器。",
    "name": "event_source_manager_default_t",
    "parent": "event_source_manager_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转prop_change_event_t对象，主要给脚本语言使用。",
        "name": "prop_change_event_cast",
        "return": {
          "type": "prop_change_event_t*",
          "desc": "返回event对象。"
        }
      },
      {
        "params": [
          {
            "type": "prop_change_event_t*",
            "name": "event",
            "desc": "event对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const value_t*",
            "name": "value",
            "desc": "属性的值。"
          }
        ],
        "annotation": {},
        "desc": "初始prop change event。",
        "name": "prop_change_event_init",
        "return": {
          "type": "event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "属性的名称。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "value",
        "desc": "属性的值。",
        "type": "const value_t*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "对象属性变化事件。",
    "name": "prop_change_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转progress_event_t对象，主要给脚本语言使用。",
        "name": "progress_event_cast",
        "return": {
          "type": "progress_event_t*",
          "desc": "返回event对象。"
        }
      },
      {
        "params": [
          {
            "type": "progress_event_t*",
            "name": "event",
            "desc": "event对象。"
          },
          {
            "type": "uint32_t",
            "name": "percent",
            "desc": "进度。"
          }
        ],
        "annotation": {},
        "desc": "初始progress event。",
        "name": "progress_event_init",
        "return": {
          "type": "event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "percent",
        "desc": "进度百分比。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "进度变化事件。",
    "name": "progress_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转done_event_t对象，主要给脚本语言使用。",
        "name": "done_event_cast",
        "return": {
          "type": "done_event_t*",
          "desc": "返回event对象。"
        }
      },
      {
        "params": [
          {
            "type": "done_event_t*",
            "name": "event",
            "desc": "event对象。"
          },
          {
            "type": "ret_t",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {},
        "desc": "初始done event。",
        "name": "done_event_init",
        "return": {
          "type": "event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "result",
        "desc": "执行结果。",
        "type": "ret_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "执行完成事件。",
    "name": "done_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转error_event_t对象，主要给脚本语言使用。",
        "name": "error_event_cast",
        "return": {
          "type": "error_event_t*",
          "desc": "返回event对象。"
        }
      },
      {
        "params": [
          {
            "type": "error_event_t*",
            "name": "event",
            "desc": "event对象。"
          },
          {
            "type": "int32_t",
            "name": "code",
            "desc": "错误码。"
          },
          {
            "type": "const char*",
            "name": "message",
            "desc": "错误消息。"
          }
        ],
        "annotation": {},
        "desc": "初始error event。",
        "name": "error_event_init",
        "return": {
          "type": "event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "code",
        "desc": "错误码。",
        "type": "int32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "message",
        "desc": "错误信息。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "执行完成事件。",
    "name": "error_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_t*",
            "name": "event",
            "desc": "event对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "把event对象转cmd_exec_event_t对象，主要给脚本语言使用。",
        "name": "cmd_exec_event_cast",
        "return": {
          "type": "cmd_exec_event_t*",
          "desc": "返回event对象。"
        }
      },
      {
        "params": [
          {
            "type": "cmd_exec_event_t*",
            "name": "event",
            "desc": "event对象。"
          },
          {
            "type": "uint32_t",
            "name": "type",
            "desc": "事件类型。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令参数。"
          }
        ],
        "annotation": {},
        "desc": "初始命令执行事件。",
        "name": "cmd_exec_event_init",
        "return": {
          "type": "event_t*",
          "desc": "返回event对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "name",
        "desc": "命令的名称。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "args",
        "desc": "命令的参数。",
        "type": "const char*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "result",
        "desc": "执行结果(适用于EXECED)。",
        "type": "ret_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "can_exec",
        "desc": "标识命令是否可以执行(适用于CAN_EXEC)。",
        "type": "bool_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      }
    ],
    "header": "tkc/event.h",
    "desc": "对象执行命令的事件。",
    "name": "cmd_exec_event_t",
    "annotation": {
      "scriptable": true
    },
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_composite.h",
    "desc": "支持多个不连续的内存块。",
    "name": "mem_allocator_composite_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_debug.h",
    "desc": "对现有的allocator进行包装，记录分配的内存，用于帮助分析内存的使用和泄露。",
    "name": "mem_allocator_debug_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_lock.h",
    "desc": "对现有的allocator进行包装，提供互斥功能。",
    "name": "mem_allocator_lock_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_oom.h",
    "desc": "对现有的allocator进行包装，如果分配内存失败，调用预先设置的回调函数释放内存，然后再重试。",
    "name": "mem_allocator_oom_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_pool.h",
    "desc": "对现有的allocator进行包装，预先分配一部分内存，用于分配小块内存，可以避免内存碎片。",
    "name": "mem_allocator_pool_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_simple.h",
    "desc": "简单的内存分配器。",
    "name": "mem_allocator_simple_t",
    "parent": "mem_allocator_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "tkc/mem_allocator_std.h",
    "desc": "将标准的C的内存分配函数包装成内存分配器。",
    "name": "mem_allocator_std_t",
    "parent": "mem_allocator_t",
    "annotation": {
      "fake": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "int8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "有符号8位整数类型属性描述。",
    "name": "value_desc_int8_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "uint8_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "无符号8位整数类型属性描述。",
    "name": "value_desc_uint8_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "int16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "int16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "int16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "int16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "有符号16位整数类型属性描述。",
    "name": "value_desc_int16_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "uint16_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "无符号16位整数类型属性描述。",
    "name": "value_desc_uint16_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "有符号32位整数类型属性描述。",
    "name": "value_desc_int32_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "无符号32位整数类型属性描述。",
    "name": "value_desc_uint32_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "int64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "int64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "int64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "int64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "有符号64位整数类型属性描述。",
    "name": "value_desc_int64_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "uint64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "uint64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "uint64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "uint64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "无符号64位整数类型属性描述。",
    "name": "value_desc_uint64_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "float",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "float",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "float",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "float_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "单精度浮点数类型属性描述。",
    "name": "value_desc_float_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "double",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小值。",
        "type": "double",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值。",
        "type": "double",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "step",
        "desc": "步长。",
        "type": "double",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit",
        "desc": "单位。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "单精度浮点数类型属性描述。",
    "name": "value_desc_double_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "布尔类型属性描述。",
    "name": "value_desc_bool_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "const char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "min",
        "desc": "最小长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "字符串类型属性描述。",
    "name": "value_desc_string_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "min",
        "desc": "最小长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max",
        "desc": "最大长度。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "二进制类型属性描述。",
    "name": "value_desc_binary_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "defvalue",
        "desc": "缺省值。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "enums",
        "desc": "枚举值（每一项用英文冒号分隔值和名称）。",
        "type": "const char**",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/value_desc.h",
    "desc": "整数枚举类型属性描述。",
    "name": "value_desc_int_enums_t",
    "parent": "value_desc_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "fd",
            "desc": "可以用select等待的文件描述符。"
          },
          {
            "type": "event_source_on_event_t",
            "name": "on_event",
            "desc": "用户的事件处理函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "on_event函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "创建fd事件源。",
        "name": "event_source_fd_create",
        "return": {
          "type": "event_source_t*",
          "desc": "返回事件源对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source_fd.h",
    "desc": "fd事件源。用于文件、管道和套接字。",
    "name": "event_source_fd_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_manager_t*",
            "name": "idle_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "创建idle事件源。",
        "name": "event_source_idle_create",
        "return": {
          "type": "event_source_t*",
          "desc": "返回事件源对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source_idle.h",
    "desc": "idle事件源。",
    "name": "event_source_idle_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_manager_t*",
            "name": "timer_manager",
            "desc": "定时器管理器对象。"
          }
        ],
        "annotation": {},
        "desc": "创建timer事件源。",
        "name": "event_source_timer_create",
        "return": {
          "type": "event_source_t*",
          "desc": "返回事件源对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source_timer.h",
    "desc": "timer事件源。",
    "name": "event_source_timer_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "获取文件描述符。",
        "name": "event_source_get_fd",
        "return": {
          "type": "int32_t",
          "desc": "返回文件描述符。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "分发事件。",
        "name": "event_source_dispatch",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          },
          {
            "type": "void*",
            "name": "tag",
            "desc": "tag。"
          }
        ],
        "annotation": {},
        "desc": "设置tag，方便通过tag一次移除多个事件源。",
        "name": "event_source_set_tag",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "对于没有文件描述符的事件源，需要自己检查是否准备就绪。",
        "name": "event_source_check",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "event_source_t*",
            "name": "source",
            "desc": "event_source对象。"
          }
        ],
        "annotation": {},
        "desc": "获取唤醒时间(ms)。",
        "name": "event_source_get_wakeup_time",
        "return": {
          "type": "uint32_t",
          "desc": "返回唤醒时间(ms)。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/event_source.h",
    "desc": "表示一个事件源。\n\n事件源有下列两种方式：\n\n* 对于有文件描述符的事件源(如socket)，get_fd返回一个有效的文件描述符。\n* 对于定时器，则get_wakeup_time返回下次唤醒的时间。",
    "name": "event_source_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "idle_info_t*",
            "name": "idle",
            "desc": "idle_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为idle_info对象(供脚本语言使用)。",
        "name": "idle_info_cast",
        "return": {
          "type": "idle_info_t*",
          "desc": "idle_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "on_idle",
        "desc": "idle回调函数。",
        "type": "idle_func_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ctx",
        "desc": "idle回调函数上下文。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "extra_ctx",
        "desc": "idle回调函数上下文。",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": "idle的ID\n\n> 为TK\\_INVALID\\_ID时表示无效idle。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "on_destroy_ctx",
        "desc": "idle销毁时的回调函数的上下文。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy",
        "desc": "idle销毁时的回调函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/idle_info.h",
    "desc": "单个idle的信息。",
    "name": "idle_info_t",
    "parent": "tk_object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          }
        ],
        "annotation": {},
        "desc": "获取输入流对象。",
        "name": "tk_iostream_get_istream",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回输入流对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          }
        ],
        "annotation": {},
        "desc": "获取输出流对象。",
        "name": "tk_iostream_get_ostream",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回输出流对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          }
        ],
        "annotation": {},
        "desc": "读取数据。",
        "name": "tk_iostream_read",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示读取失败，否则返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "timeout."
          }
        ],
        "annotation": {},
        "desc": "读取指定长度的数据。",
        "name": "tk_iostream_read_len",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示读取失败，否则返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          }
        ],
        "annotation": {},
        "desc": "写入数据。",
        "name": "tk_iostream_write",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示写入失败，否则返回实际写入数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "stream",
            "desc": "iostream对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "timeout."
          }
        ],
        "annotation": {},
        "desc": "写入指定长度的数据。",
        "name": "tk_iostream_write_len",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示写入失败，否则返回实际写入数据的长度。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/iostream.h",
    "desc": "输入输出流的接口。",
    "name": "tk_iostream_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          }
        ],
        "annotation": {},
        "desc": "读取数据。",
        "name": "tk_istream_read",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示读取失败，否则返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          }
        ],
        "annotation": {},
        "desc": "设置偏移量。",
        "name": "tk_istream_seek",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          }
        ],
        "annotation": {},
        "desc": "获取当前读取位置。",
        "name": "tk_istream_tell",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示失败，否则返回当前读取位置。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          }
        ],
        "annotation": {},
        "desc": "判断数据是否读完。",
        "name": "tk_istream_eos",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示数据读完，否则表示还有数据。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "超时时间。"
          }
        ],
        "annotation": {},
        "desc": "等待数据。",
        "name": "tk_istream_wait_for_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          }
        ],
        "annotation": {},
        "desc": "刷新数据。",
        "name": "tk_istream_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "timeout."
          }
        ],
        "annotation": {},
        "desc": "读取指定长度的数据。",
        "name": "tk_istream_read_len",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示读取失败，否则返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "timeout."
          }
        ],
        "annotation": {},
        "desc": "读取一行数据。",
        "name": "tk_istream_read_line",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示读取失败，否则返回实际读取数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "str_t*",
            "name": "str",
            "desc": "返回数据的str对象。"
          }
        ],
        "annotation": {},
        "desc": "读取一行数据。",
        "name": "tk_istream_read_line_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/istream.h",
    "desc": "输入流的接口。",
    "name": "tk_istream_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建对象。",
        "name": "object_array_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "o",
            "desc": "被克隆的对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "克隆对象。",
        "name": "object_array_clone",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "for script gc",
        "name": "object_array_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除全部属性。",
        "name": "object_array_clear_props",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置插入一个元素。",
        "name": "object_array_insert",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "追加一个元素。",
        "name": "object_array_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找元素出现的第一个位置。",
        "name": "object_array_index_of",
        "return": {
          "type": "int32_t",
          "desc": "如果找到返回其位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "查找元素出现的最后一个位置。",
        "name": "object_array_last_index_of",
        "return": {
          "type": "int32_t",
          "desc": "如果找到返回其位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置删除一个元素。",
        "name": "object_array_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "位置。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "用于返回值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在指定位置删除一个元素，并返回它。",
        "name": "object_array_get_and_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回值。"
          }
        ],
        "annotation": {},
        "desc": "弹出最后一个元素。",
        "name": "object_array_pop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回值。"
          }
        ],
        "annotation": {},
        "desc": "弹出第一个元素。",
        "name": "object_array_shift",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "i",
            "desc": "序数。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "返回的元素。"
          }
        ],
        "annotation": {},
        "desc": "获取指定序数的元素。",
        "name": "object_array_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "i",
            "desc": "序数。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "元素。"
          }
        ],
        "annotation": {},
        "desc": "设置指定序数的元素。",
        "name": "object_array_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "字符串"
          },
          {
            "type": "const char*",
            "name": "sep",
            "desc": "分隔符。"
          },
          {
            "type": "value_type_t",
            "name": "type",
            "desc": "类型。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "通过字符串构建数组。",
        "name": "object_array_create_with_str",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "const char*",
            "name": "sep",
            "desc": "分隔符。"
          },
          {
            "type": "str_t*",
            "name": "result",
            "desc": "生成的字符串。"
          }
        ],
        "annotation": {},
        "desc": "使用分隔符把各个元素拼接起来。",
        "name": "object_array_join",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {},
        "desc": "查找最小值。",
        "name": "object_array_min",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {},
        "desc": "查找最大值。",
        "name": "object_array_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {},
        "desc": "求和。",
        "name": "object_array_sum",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "value_t*",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {},
        "desc": "求平均值。",
        "name": "object_array_avg",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "uint32_t",
            "name": "start",
            "desc": "开始的位置。"
          },
          {
            "type": "uint32_t",
            "name": "end",
            "desc": "结束的位置(不包含)。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "复制部分或全部元素。",
        "name": "object_array_dup",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数。"
          }
        ],
        "annotation": {},
        "desc": "排序。",
        "name": "object_array_sort",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "bool_t",
            "name": "ascending",
            "desc": "升序或降序。"
          }
        ],
        "annotation": {},
        "desc": "按整数排序。",
        "name": "object_array_sort_as_int",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "bool_t",
            "name": "ascending",
            "desc": "升序或降序。"
          }
        ],
        "annotation": {},
        "desc": "按浮点数排序。",
        "name": "object_array_sort_as_double",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          },
          {
            "type": "bool_t",
            "name": "ascending",
            "desc": "升序或降序。"
          },
          {
            "type": "bool_t",
            "name": "ignore_case",
            "desc": "是否忽略大小写。"
          }
        ],
        "annotation": {},
        "desc": "按字符串排序。",
        "name": "object_array_sort_as_str",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "数组对象。"
          }
        ],
        "annotation": {},
        "desc": "反向。",
        "name": "object_array_reverse",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_array对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_array对象。",
        "name": "object_array_cast",
        "return": {
          "type": "object_array_t*",
          "desc": "object_array对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "size",
        "desc": "属性个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "capacity",
        "desc": "属性数组的容量。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "props",
        "desc": "属性数组。",
        "type": "value_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_array.h",
    "desc": "简单的动态数组，内部存放value对象。\n\n访问时属性名称为：\n\n* \"size\"/\"length\" 用于获取数组的长度。\n* index 用于访问属性，-1可以用来追加新元素。",
    "name": "object_array_t",
    "parent": "tk_object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj1",
            "desc": "对象1。"
          },
          {
            "type": "tk_object_t*",
            "name": "obj2",
            "desc": "对象2。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建对象。",
        "name": "object_compositor_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_compositor对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_compositor对象。",
        "name": "object_compositor_cast",
        "return": {
          "type": "object_compositor_t*",
          "desc": "object_compositor对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/object_compositor.h",
    "desc": "将两个对象包装为一个对象，优先访问第一个对象，如果访问失败则访问第二个对象。",
    "name": "object_compositor_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建对象。",
        "name": "object_date_time_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_date_time对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_date_time对象。",
        "name": "object_date_time_cast",
        "return": {
          "type": "object_date_time_t*",
          "desc": "object_date_time对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "dt",
        "desc": "date time对象。",
        "type": "date_time_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_date_time.h",
    "desc": "将date_time包装成object。",
    "name": "object_date_time_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建对象。",
        "name": "object_default_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "bool_t",
            "name": "enable_path",
            "desc": "是否支持按路径访问属性。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "创建对象。",
        "name": "object_default_create_ex",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_default_t*",
            "name": "o",
            "desc": "被克隆的对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "克隆对象。",
        "name": "object_default_clone",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "for script gc",
        "name": "object_default_unref",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除全部属性。",
        "name": "object_default_clear_props",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "对象。"
          },
          {
            "type": "tk_compare_t",
            "name": "cmp",
            "desc": "比较函数。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "要比较的数据。"
          }
        ],
        "annotation": {},
        "desc": "查找满足条件的属性，并返回它的值。",
        "name": "object_default_find_prop",
        "return": {
          "type": "value_t*",
          "desc": "返回属性的值。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_default对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_default对象。",
        "name": "object_default_cast",
        "return": {
          "type": "object_default_t*",
          "desc": "object_default对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/object_default.h",
    "desc": "对象接口的缺省实现。\n\n内部使用有序数组保存所有属性，可以快速查找指定名称的属性。",
    "name": "object_default_t",
    "parent": "tk_object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "待装饰的对象。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建对象。",
        "name": "object_locker_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_locker对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_locker对象。",
        "name": "object_locker_cast",
        "return": {
          "type": "object_locker_t*",
          "desc": "object_locker对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/object_locker.h",
    "desc": "对现有的object对象进行装饰，添加访问互斥功能。",
    "name": "object_locker_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建rbuffer对象。",
        "name": "object_rbuffer_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_rbuffer对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_rbuffer对象。",
        "name": "object_rbuffer_cast",
        "return": {
          "type": "object_rbuffer_t*",
          "desc": "object_rbuffer对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "rbuffer",
        "desc": "rbuffer对象。",
        "type": "rbuffer_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_rbuffer.h",
    "desc": "将rbuffer包装成object。",
    "name": "object_rbuffer_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_type_t",
            "name": "type",
            "desc": "元素的类型。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "数组的初始容量(元素个数)。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建对象。",
        "name": "object_typed_array_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_typed_array对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_typed_array对象。",
        "name": "object_typed_array_cast",
        "return": {
          "type": "object_typed_array_t*",
          "desc": "object_typed_array对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "arr",
        "desc": "typed array对象。",
        "type": "typed_array_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_typed_array.h",
    "desc": "将typed_array包装成object。",
    "name": "object_typed_array_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t*",
            "name": "data",
            "desc": "缓冲区。"
          },
          {
            "type": "uint16_t",
            "name": "capacity",
            "desc": "缓冲区的容量。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建wbuffer对象。",
        "name": "object_wbuffer_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建可扩展的wbuffer对象。",
        "name": "object_wbuffer_create_extendable",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "object_wbuffer对象。"
          }
        ],
        "annotation": {
          "cast": true
        },
        "desc": "转换为object_wbuffer对象。",
        "name": "object_wbuffer_cast",
        "return": {
          "type": "object_wbuffer_t*",
          "desc": "object_wbuffer对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "wbuffer",
        "desc": "wbuffer对象。",
        "type": "wbuffer_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/object_wbuffer.h",
    "desc": "将wbuffer包装成object。",
    "name": "object_wbuffer_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          }
        ],
        "annotation": {},
        "desc": "写入数据。",
        "name": "tk_ostream_write",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示写入失败，否则返回实际写入数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "uint32_t",
            "name": "offset",
            "desc": "偏移量。"
          }
        ],
        "annotation": {},
        "desc": "设置偏移量。",
        "name": "tk_ostream_seek",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "获取当前读取位置。",
        "name": "tk_ostream_tell",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示失败，否则返回当前读取位置。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "const void*",
            "name": "buff",
            "desc": "数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "max_size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "timeout_ms",
            "desc": "timeout."
          }
        ],
        "annotation": {},
        "desc": "写入指定长度的数据。",
        "name": "tk_ostream_write_len",
        "return": {
          "type": "int32_t",
          "desc": "返回负数表示写入失败，否则返回实际写入数据的长度。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "uint8_t",
            "name": "byte",
            "desc": "数据。"
          }
        ],
        "annotation": {},
        "desc": "写入一个字节的数据。",
        "name": "tk_ostream_write_byte",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "刷新数据。",
        "name": "tk_ostream_flush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "tkc/ostream.h",
    "desc": "输出流的接口。",
    "name": "tk_ostream_t",
    "parent": "tk_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "timer_info_t*",
            "name": "timer",
            "desc": "timer_info对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为timer_info对象(供脚本语言使用)。",
        "name": "timer_info_cast",
        "return": {
          "type": "timer_info_t*",
          "desc": "timer_info对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "on_timer",
        "desc": "定时器回调函数。",
        "type": "timer_func_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "ctx",
        "desc": "定时器回调函数的上下文",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "extra_ctx",
        "desc": "定时器回调函数的上下文",
        "type": "void*",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "id",
        "desc": "定时器的ID\n\n> 为TK\\_INVALID\\_ID时表示无效定时器。",
        "type": "uint32_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "now",
        "desc": "当前时间(相对时间，单位为毫秒)。",
        "type": "uint64_t",
        "annotation": {
          "readable": true,
          "scriptable": true
        }
      },
      {
        "name": "start",
        "desc": "起始时间(相对时间，单位为毫秒)。",
        "type": "uint64_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "duration",
        "desc": "时间间隔(单位为毫秒)。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy",
        "desc": "定时器销毁时的回调函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_destroy_ctx",
        "desc": "定时器销毁时的回调函数上下文。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "suspend",
        "desc": "定时器是否为挂起状态。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "tkc/timer_info.h",
    "desc": "单个定时器的信息。",
    "name": "timer_info_t",
    "parent": "tk_object_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "csv_file_t*",
            "name": "csv",
            "desc": "csv对象(由object释放)。"
          }
        ],
        "annotation": {},
        "desc": "将csv_file对象包装成object。",
        "name": "csv_file_object_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "obj对象。"
          }
        ],
        "annotation": {},
        "desc": "获取csv对象。",
        "name": "csv_file_object_get_csv",
        "return": {
          "type": "csv_file_t*",
          "desc": "返回csv对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "csv/csv_file_object.h",
    "desc": "将cvs file包装成object对象。",
    "name": "csv_file_object_t",
    "parent": "tk_object_t",
    "annotation": {
      "fake": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建一个空的conf对象。",
        "name": "conf_ini_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "路径(通常是文件路径)。"
          },
          {
            "type": "bool_t",
            "name": "create_if_not_exist",
            "desc": "如果不存在是否创建。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "从指定URL加载INI对象。",
        "name": "conf_ini_load",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "doc对象。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "保存的位置。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将doc对象保存到指定URL。",
        "name": "conf_ini_save_as",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/conf_ini.h",
    "desc": "conf ini对象。",
    "name": "conf_ini_t",
    "parent": "tk_object_t",
    "annotation": {
      "fake": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建一个空的conf对象。",
        "name": "conf_json_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "路径(通常是文件路径)。"
          },
          {
            "type": "bool_t",
            "name": "create_if_not_exist",
            "desc": "如果不存在是否创建。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "从指定URL加载JSON对象。",
        "name": "conf_json_load",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "doc对象。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "保存的位置。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将doc对象保存到指定URL。",
        "name": "conf_json_save_as",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/conf_json.h",
    "desc": "conf json对象。",
    "name": "conf_json_t",
    "parent": "tk_object_t",
    "annotation": {
      "fake": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "conf_doc_save_t",
            "name": "save",
            "desc": "保存函数。"
          },
          {
            "type": "conf_doc_load_t",
            "name": "load",
            "desc": "加载函数。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "路径。"
          },
          {
            "type": "bool_t",
            "name": "create_if_not_exist",
            "desc": "如果不存在是否创建。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "",
        "name": "conf_obj_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "conf",
            "desc": "conf对象。"
          }
        ],
        "annotation": {},
        "desc": "获取doc对象，用于更高级的操作。",
        "name": "conf_obj_get_doc",
        "return": {
          "type": "conf_dot_t",
          "desc": "返回doc对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "conf",
            "desc": "conf对象。"
          }
        ],
        "annotation": {},
        "desc": "保存文档。",
        "name": "conf_obj_save",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "conf",
            "desc": "conf对象。"
          },
          {
            "type": "bool_t",
            "name": "readonly",
            "desc": "只读模式。"
          }
        ],
        "annotation": {},
        "desc": "设置为只读模式。",
        "name": "conf_obj_set_readonly",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/conf_obj.h",
    "desc": "conf对象。",
    "name": "conf_obj_t",
    "parent": "tk_object_t",
    "annotation": {
      "fake": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建一个空的conf对象。",
        "name": "conf_ubjson_create",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "url",
            "desc": "路径(通常是文件路径)。"
          },
          {
            "type": "bool_t",
            "name": "create_if_not_exist",
            "desc": "如果不存在是否创建。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "从指定URL加载UBJSON对象。",
        "name": "conf_ubjson_load",
        "return": {
          "type": "tk_object_t*",
          "desc": "返回配置对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_object_t*",
            "name": "obj",
            "desc": "doc对象。"
          },
          {
            "type": "const char*",
            "name": "url",
            "desc": "保存的位置。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "将doc对象保存到指定URL。",
        "name": "conf_ubjson_save_as",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "conf_io/conf_ubjson.h",
    "desc": "conf json对象。",
    "name": "conf_ubjson_t",
    "parent": "tk_object_t",
    "annotation": {
      "fake": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "real_istream",
            "desc": "实际的istream。"
          },
          {
            "type": "uint32_t",
            "name": "buffer_size",
            "desc": "缓冲区的大小。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。\n\n本函数自动增加real_ostream的引用计数。",
        "name": "tk_istream_buffered_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "buffered/istream_buffered.h",
    "desc": "缓冲输入流。\n\n如果调用者每次只读取少量数据，可以使用本类对底层istream进行装饰，以提高读取效率。",
    "name": "tk_istream_buffered_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "real_ostream",
            "desc": "实际的ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。\n\n本函数自动增加real_ostream的引用计数。",
        "name": "tk_ostream_buffered_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "ostream",
            "desc": "ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "获取当前缓存数据的长度。",
        "name": "tk_ostream_buffered_get_size",
        "return": {
          "type": "uint32_t",
          "desc": "返回缓存数据的长度。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "buffered/ostream_buffered.h",
    "desc": "先将数据写入一个缓存区，调用flush时才真正写入底层的ostream。",
    "name": "tk_ostream_buffered_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_file_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "mode",
            "desc": "模式。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_file_create_ex",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "file/istream_file.h",
    "desc": "基于文件实现的输入流。",
    "name": "tk_istream_file_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_file_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "filename",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "mode",
            "desc": "模式。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_file_create_ex",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "file/ostream_file.h",
    "desc": "基于文件实现的输出流。",
    "name": "tk_ostream_file_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "mbedtls_conn_t*",
            "name": "conn",
            "desc": "ssl连接。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。",
        "name": "tk_iostream_mbedtls_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/iostream_mbedtls.h",
    "desc": "基于MBEDTLS实现的输入输出流。",
    "name": "tk_iostream_mbedtls_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。",
        "name": "tk_iostream_tcp_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/iostream_tcp.h",
    "desc": "基于TCP实现的输入输出流。",
    "name": "tk_iostream_tcp_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "host",
            "desc": "服务器地址。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象(客户端)。",
        "name": "tk_iostream_udp_create_client",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象(客户端)。",
        "name": "tk_iostream_udp_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/iostream_udp.h",
    "desc": "基于UDP实现的输入输出流。",
    "name": "tk_iostream_udp_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "mbedtls_ssl_context*",
            "name": "ssl",
            "desc": "ssl对象。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_mbedtls_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/istream_mbedtls.h",
    "desc": "基于MBEDTLS实现的输入流。",
    "name": "tk_istream_mbedtls_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_tcp_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/istream_tcp.h",
    "desc": "基于TCP实现的输入流。",
    "name": "tk_istream_tcp_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_udp_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "const char*",
            "name": "host",
            "desc": "主机或IP。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口。"
          }
        ],
        "annotation": {},
        "desc": "设置目标。",
        "name": "tk_istream_udp_set_target_with_host",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_istream_t*",
            "name": "stream",
            "desc": "istream对象。"
          },
          {
            "type": "struct sockaddr_in",
            "name": "addr",
            "desc": "地址。"
          }
        ],
        "annotation": {},
        "desc": "设置目标。",
        "name": "tk_istream_udp_set_target_with_addr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/istream_udp.h",
    "desc": "基于UDP实现的输入流。",
    "name": "tk_istream_udp_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "mbedtls_ssl_context*",
            "name": "ssl",
            "desc": "ssl对象。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_mbedtls_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/ostream_mbedtls.h",
    "desc": "基于MBEDTLS实现的输出流。",
    "name": "tk_ostream_mbedtls_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket."
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_tcp_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/ostream_tcp.h",
    "desc": "基于TCP实现的输出流。",
    "name": "tk_ostream_tcp_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "sock",
            "desc": "socket."
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_udp_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "const char*",
            "name": "host",
            "desc": "主机或IP。"
          },
          {
            "type": "int",
            "name": "port",
            "desc": "端口。"
          }
        ],
        "annotation": {},
        "desc": "设置目标。",
        "name": "tk_ostream_udp_set_target_with_host",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "stream",
            "desc": "ostream对象。"
          },
          {
            "type": "struct sockaddr_in",
            "name": "addr",
            "desc": "地址。"
          }
        ],
        "annotation": {},
        "desc": "设置目标。",
        "name": "tk_ostream_udp_set_target_with_addr",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "inet/ostream_udp.h",
    "desc": "基于UDP实现的输出流。",
    "name": "tk_ostream_udp_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "void*",
            "name": "buff_in",
            "desc": "输入流缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size_in",
            "desc": "输入流缓冲区大小。"
          },
          {
            "type": "void*",
            "name": "buff_out",
            "desc": "输入流缓冲区。"
          },
          {
            "type": "uoutt32_t",
            "name": "size_out",
            "desc": "输入流缓冲区大小。"
          },
          {
            "type": "bool_t",
            "name": "own_the_buff",
            "desc": "是否让istream对象拥有buff。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。",
        "name": "tk_iostream_mem_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "mem/iostream_mem.h",
    "desc": "基于内存实现的输入输出流。",
    "name": "tk_iostream_mem_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "packet_size",
            "desc": "缺省一次读取的数据的长度。"
          },
          {
            "type": "bool_t",
            "name": "own_the_buff",
            "desc": "是否让istream对象拥有buff。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_mem_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "mem/istream_mem.h",
    "desc": "基于内存实现的输入流。",
    "name": "tk_istream_mem_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint8_t*",
            "name": "buff",
            "desc": "返回数据的缓冲区。"
          },
          {
            "type": "uint32_t",
            "name": "size",
            "desc": "缓冲区的大小。"
          },
          {
            "type": "uint32_t",
            "name": "packet_size",
            "desc": "缺省一次读取的数据的长度。"
          },
          {
            "type": "bool_t",
            "name": "own_the_buff",
            "desc": "是否让ostream对象拥有buff。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。",
        "name": "tk_ostream_mem_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "mem/ostream_mem.h",
    "desc": "基于内存实现的输出流。",
    "name": "tk_ostream_mem_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "real_ostream",
            "desc": "实际的ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。\n\n本函数自动增加real_ostream的引用计数。",
        "name": "tk_ostream_retry_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "ostream",
            "desc": "ostream对象。"
          },
          {
            "type": "uint32_t",
            "name": "max_retry_times",
            "desc": "最大尝试次数。"
          }
        ],
        "annotation": {},
        "desc": "设置最大尝试次数。",
        "name": "tk_ostream_retry_set_max_retry_times",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "ostream",
            "desc": "ostream对象。"
          },
          {
            "type": "uint32_t",
            "name": "max_buffer_size",
            "desc": "缓存大小。"
          }
        ],
        "annotation": {},
        "desc": "设置最大缓存大小。",
        "name": "tk_ostream_retry_set_max_buffer_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "ostream",
            "desc": "ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "清除缓存的数据。",
        "name": "tk_ostream_retry_clear_buffer",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "ostream",
            "desc": "ostream对象。"
          },
          {
            "type": "data_discard_policy_t",
            "name": "discard_policy",
            "desc": "丢弃策略。"
          }
        ],
        "annotation": {},
        "desc": "设置数据丢弃策略。",
        "name": "tk_ostream_retry_set_discard_policy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "pending_bytes",
        "desc": "待重写的数据大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "pending_packets",
        "desc": "待重写的数据包的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "discard_bytes",
        "desc": "总共丢弃数据的字节数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "discard_packets",
        "desc": "总共丢弃数据包的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "max_retry_times",
        "desc": "尝试次数超过指定的值时丢弃该数据包。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "timeout",
        "desc": "写超时时间(ms)。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "discard_policy",
        "desc": "缓存不够时，丢弃数据包的策略。",
        "type": "data_discard_policy_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "misc/ostream_retry.h",
    "desc": "如果写数据失败，将数据放入ring_buffer，后面再重试(flush)。\n\n如果重试次数超出最大值，则丢掉数据。",
    "name": "tk_ostream_retry_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "real_iostream",
            "desc": "底层的iostream。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。\n\n本函数自动增加real_iostream的引用计数。",
        "name": "tk_iostream_noisy_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "noisy/iostream_noisy.h",
    "desc": "在输出流中注入错误，方便进行可靠性测试。",
    "name": "tk_iostream_noisy_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_ostream_t*",
            "name": "real_ostream",
            "desc": "实际的ostream对象。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。\n\n> 只能由iostream_noisy调用。",
        "name": "tk_ostream_noisy_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "error_level",
        "desc": "error level.",
        "type": "uint32_t"
      },
      {
        "name": "error_count",
        "desc": "注入的错误数。",
        "type": "uint32_t"
      },
      {
        "name": "write_count",
        "desc": "写入的次数。",
        "type": "uint32_t"
      }
    ],
    "header": "noisy/ostream_noisy.h",
    "desc": "在输出流中注入错误，方便进行可靠性测试。",
    "name": "tk_ostream_noisy_t",
    "parent": "tk_ostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "port",
            "desc": "port name。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。\n> 缺省配置: baudrate=115200 bytesize=8 stopbits=1 flowcontrol=0 parity=0",
        "name": "tk_iostream_serial_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      },
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "iostream",
            "desc": "串口对象。"
          },
          {
            "type": "int32_t",
            "name": "baudrate",
            "desc": "波特率。"
          },
          {
            "type": "bytesize_t",
            "name": "bytesize",
            "desc": "字节位数。"
          },
          {
            "type": "parity_t",
            "name": "parity",
            "desc": "奇偶校验。"
          },
          {
            "type": "stopbits_t",
            "name": "stopbits",
            "desc": "停止位。"
          },
          {
            "type": "flowcontrol_t",
            "name": "flowcontrol",
            "desc": "流控。"
          }
        ],
        "annotation": {},
        "desc": "配置串口。",
        "name": "tk_iostream_serial_config",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "serial/iostream_serial.h",
    "desc": "基于串口实现的输入输出流。",
    "name": "tk_iostream_serial_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "int",
            "name": "fd",
            "desc": "fd。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。",
        "name": "tk_istream_serial_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "serial/istream_serial.h",
    "desc": "基于串口实现的输入流。",
    "name": "tk_istream_serial_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_iostream_t*",
            "name": "real_iostream",
            "desc": "底层的iostream。"
          }
        ],
        "annotation": {},
        "desc": "创建iostream对象。\n\n本函数自动增加real_iostream的引用计数。",
        "name": "tk_iostream_shdlc_create",
        "return": {
          "type": "tk_iostream_t*",
          "desc": "返回iostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "shdlc/iostream_shdlc.h",
    "desc": "基于简化版的HDLC协议实现可靠的iostream。\n\n一般用于串口通信。",
    "name": "tk_iostream_shdlc_t",
    "parent": "tk_iostream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_iostream_shdlc_t*",
            "name": "iostream",
            "desc": "iostream对象。"
          }
        ],
        "annotation": {},
        "desc": "创建istream对象。\n\n> 只能由iostream_shdlc调用。",
        "name": "tk_istream_shdlc_create",
        "return": {
          "type": "tk_istream_t*",
          "desc": "返回istream对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "timeout",
        "desc": "读写超时时间(ms)",
        "type": "uint32_t"
      },
      {
        "name": "retry_times",
        "desc": "失败重传次数。",
        "type": "uint32_t"
      }
    ],
    "header": "shdlc/istream_shdlc.h",
    "desc": "reliable istream base on simple HDLC",
    "name": "tk_istream_shdlc_t",
    "parent": "tk_istream_t",
    "level": 4
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "tk_iostream_shdlc_t*",
            "name": "iostream",
            "desc": "iostream对象。"
          }
        ],
        "annotation": {},
        "desc": "创建ostream对象。\n\n> 只能由iostream_shdlc调用。",
        "name": "tk_ostream_shdlc_create",
        "return": {
          "type": "tk_ostream_t*",
          "desc": "返回ostream对象。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "timeout",
        "desc": "读写超时时间(ms)",
        "type": "uint32_t"
      },
      {
        "name": "retry_times",
        "desc": "失败重传次数。",
        "type": "uint32_t"
      },
      {
        "name": "compress_threshold",
        "desc": "激活压缩的阈值。",
        "type": "uint32_t"
      }
    ],
    "header": "shdlc/ostream_shdlc.h",
    "desc": "reliable ostream base on simple HDLC",
    "name": "tk_ostream_shdlc_t",
    "parent": "tk_ostream_t",
    "level": 4
  }
]