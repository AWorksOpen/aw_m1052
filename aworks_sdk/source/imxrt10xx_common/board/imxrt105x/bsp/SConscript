#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
from config_build_common import build_common_config
from config_compoents import compoents_config

NAME = 'aw_bsp'

COMPILE_DEFINES = build_common_config.AW_CPPDEFINES
COMPILE_TOOLS = build_common_config.AW_COMPILER_TOOLS
ABS_COMMON_SOURCE_DIR = build_common_config.BOARD_COMMON_PATH + '/board/imxrt105x/bsp'
REL_COMMON_SOURCE_DIR = './'

# 代码
SOURCE = [
    'aw_bsp_assert.c',
    'aw_bsp_startup.c',
    'aw_bsp_ostimer.c',
    'aw_bsp_system.c',
    'aw_bsp_mem.c',
    'aw_bsp_clock.c',
]
if compoents_config.AWBL_FLEXSPI_NAND == False:
    SOURCE.append('xip/boot_flexspi_nor_cfg.c')
else:
    SOURCE.append('xip/boot_flexspi_nand_cfg.c')


#SOURCE = [REL_COMMON_SOURCE_DIR + src for src in SOURCE]

# 添加针对不同编译器所写的代码
COMPILER_DIR_STRING = REL_COMMON_SOURCE_DIR + COMPILE_TOOLS + '/'
SOURCE.append(Glob(COMPILER_DIR_STRING + '*.c'))
SOURCE.append(Glob(COMPILER_DIR_STRING + '*.S'))
SOURCE.append(Glob(COMPILER_DIR_STRING + '*.s'))

if compoents_config.AWBL_FLEXSPI_NAND == False:
    COMPILER_DIR_STRING = REL_COMMON_SOURCE_DIR + 'xip/' + COMPILE_TOOLS + '/'
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.c'))
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.S'))
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.s'))
else:
    COMPILER_DIR_STRING = REL_COMMON_SOURCE_DIR + 'xip/' + COMPILE_TOOLS + '/flexspi_nand/'
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.c'))
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.S'))
    SOURCE.append(Glob(COMPILER_DIR_STRING + '*.s'))

if COMPILE_TOOLS == 'arm-none-eabi-gcc':
    MEMCPY_OBJ = Object(REL_COMMON_SOURCE_DIR + 'arm-none-eabi-gcc/memcpy/memcpy-armv7m.S')
    Install(build_common_config.AW_SDK_LIB_INSTALL_PATH, MEMCPY_OBJ)

INCLUDE = list(build_common_config.AW_COMMON_INCLUDE)
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT, 'components/clock/include'))
INCLUDE.append('include')
INCLUDE.append(os.path.join(ABS_COMMON_SOURCE_DIR, 'xip'))

if compoents_config.AWORKS_SLAB_EN:
    COMPILE_DEFINES.append('AW_SYS_HEAP_USE_SLAB')
    print('AW_SYS_HEAP_USE_SLAB')

lib_file = Library(NAME, SOURCE, CPPPATH = INCLUDE, CPPDEFINES = COMPILE_DEFINES)
Return('lib_file')
