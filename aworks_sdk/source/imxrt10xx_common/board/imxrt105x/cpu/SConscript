#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
from config_build_common import     build_common_config, get_common_drivers
from config_lwip import             aw_lwip_config
import config_sdk_version

from config_compoents import compoents_config

env = DefaultEnvironment()
env = env.Clone()

REL_COMMON_SOURCE_PATH = '../cpu/imxrt10xx_common/board/imxrt105x/cpu/'
ABS_COMMON_SOURCE_PATH = build_common_config.BOARD_COMMON_PATH + '/board/imxrt105x/cpu/'
output_ffconf_file = os.path.join(build_common_config.PROJECT_CONFIG_ROOT,'imx1050_sdk_version.h')

# 首先尝试生成SDK版本信息文件
TARGET = output_ffconf_file
config_py_file = config_sdk_version.__file__
(file_name,ext_name) = os.path.splitext(config_py_file)
if ext_name == '.pyc':
    config_py_file = file_name + '.py'
SOURCE = ['imx1050_sdk_version.h.pyconfig','imx1050_sdk_version.defconf']
SOURCE.append(config_py_file)
SOURCE.append(config_sdk_version.get_changelog_path())
env.configure_file(TARGET,SOURCE)

#代码
SOURCE = []
SOURCE_CLK = []

SOURCE_CLK.append('source/clk/imx_clk.c')
SOURCE_CLK.append('source/clk/imx_clk_pll_av.c')
SOURCE_CLK.append('source/clk/imx_clk_pll_enet.c')
SOURCE_CLK.append('source/clk/imx_clk_pll_usb.c')
SOURCE_CLK.append('source/clk/imx1050_clk_ahb_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_arm_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_can.c')
SOURCE_CLK.append('source/clk/imx1050_clk_csi.c')
SOURCE_CLK.append('source/clk/imx1050_clk_enc.c')
SOURCE_CLK.append('source/clk/imx1050_clk_enet_ref.c')
SOURCE_CLK.append('source/clk/imx1050_clk_enet_tx_ref.c')
SOURCE_CLK.append('source/clk/imx1050_clk_flexio1.c')
SOURCE_CLK.append('source/clk/imx1050_clk_flexio2.c')
SOURCE_CLK.append('source/clk/imx1050_clk_flexspi.c')
SOURCE_CLK.append('source/clk/imx1050_clk_gate2.c')
SOURCE_CLK.append('source/clk/imx1050_clk_gpr1.c')
SOURCE_CLK.append('source/clk/imx1050_clk_ipg_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_lcdif.c')
SOURCE_CLK.append('source/clk/imx1050_clk_ldb_di0.c')
SOURCE_CLK.append('source/clk/imx1050_clk_ldb_di1.c')
SOURCE_CLK.append('source/clk/imx1050_clk_lpi2c.c')
SOURCE_CLK.append('source/clk/imx1050_clk_lpspi.c')
SOURCE_CLK.append('source/clk/imx1050_clk_osc.c')
SOURCE_CLK.append('source/clk/imx1050_clk_perclk_clk_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_perclk_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_periph_clk_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_periph_clk2_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_periph_clk2_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_pll_arm.c')
SOURCE_CLK.append('source/clk/imx1050_clk_pll_pfd.c')
SOURCE_CLK.append('source/clk/imx1050_clk_pll_sys.c')
SOURCE_CLK.append('source/clk/imx1050_clk_pll3_div.c')
SOURCE_CLK.append('source/clk/imx1050_clk_pre_periph_clk_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_sai1.c')
SOURCE_CLK.append('source/clk/imx1050_clk_sai2.c')
SOURCE_CLK.append('source/clk/imx1050_clk_sai3.c')
SOURCE_CLK.append('source/clk/imx1050_clk_semc.c')
SOURCE_CLK.append('source/clk/imx1050_clk_spdif.c')
SOURCE_CLK.append('source/clk/imx1050_clk_trace.c')
SOURCE_CLK.append('source/clk/imx1050_clk_uart.c')
SOURCE_CLK.append('source/clk/imx1050_clk_usdhc1_clk_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_usdhc1_podf.c')
SOURCE_CLK.append('source/clk/imx1050_clk_usdhc2_clk_sel.c')
SOURCE_CLK.append('source/clk/imx1050_clk_usdhc2_podf.c')

if build_common_config.AW_COMPILER_TOOLS == 'armcc' :
    SOURCE.append('source/imx105x_cpu_idle_for_armcc.S')
else:
    SOURCE.append('source/imx105x_cpu_idle.S')

SOURCE.append('source/aw_sdk_version.c')

#驱动
SOURCE.append('source/imx1050_ccm.c')
SOURCE.append('source/imx1050_pmu.c')
SOURCE.append('source/imx1050_xtal_osc24m.c')
SOURCE.append('source/driver/busctlr/awbl_imx1050_semc.c');
SOURCE.append('source/driver/display/awbl_imx1050_fb.c');
SOURCE.append('source/driver/display/awbl_imx1050_tft_panel.c');
SOURCE.append('source/driver/display/awbl_imx1050_lcdif.c');
SOURCE.append('source/driver/display/awbl_imx1050_method.c');
SOURCE.append('source/driver/gpio/awbl_imx1050_gpio.c')

if compoents_config.AWBL_FLEXSPI_NAND == False:
    SOURCE.append('source/driver/flexspi/awbl_imx1050_flexspi.c');
    SOURCE.append('source/driver/flexspi/awbl_imx1050_flexspi_mtd.c');
    SOURCE.append('source/driver/flexspi/awbl_imx1050_flexspi_nvram.c');
    SOURCE.append('source/driver/flexspi/awbl_imx1050_flexspi_service.c');
else:
    SOURCE.append('source/driver/flexspi_nand/awbl_imx1050_flexspi_nand.c');
    SOURCE.append('source/driver/flexspi_nand/awbl_imx1050_flexspi_nand_service.c');

SOURCE.append('source/driver/input/touchscreen/awbl_imx1050_ts.c');
SOURCE.append('source/driver/mqs/awbl_imx1050_mqs.c');
SOURCE.append('source/driver/nand/awbl_imx1050_nand.c');
SOURCE.append('source/driver/otp/awbl_imx1050_ocotp.c');
SOURCE.append('source/driver/pxp/awbl_imx1050_pxp.c');
SOURCE.append('source/driver/sai/awbl_imx1050_sai.c');
SOURCE.append('source/driver/sai/awbl_mimxrt1050_evk_sound.c');
SOURCE.append('source/driver/camera/awbl_imx1050_csi.c');
SOURCE.append('source/driver/timestamp/awbl_imx1050_timestamp.c');

#SOURCE.append('source/imx1050_sound_wav.c');
#SOURCE.append('source/stream.c');


#EMWIN适配源文件
SOURCE.append('source/emwin536_adapter/source/GUI_X.c');
SOURCE.append('source/emwin536_adapter/source/GUIConf.c');
SOURCE.append('source/emwin536_adapter/source/LCDConf.c');
SOURCE.append('source/emwin536_adapter/source/SIMConf.c');

if build_common_config.AW_COMPILER_TOOLS == 'armcc':
    SOURCE.append('source/driver/flexspi/include_img_flexspi_drv_for_armcc.S');
else:
    SOURCE.append('source/driver/flexspi/include_img_flexspi_drv.S');


#音频框架源文件添加
SOURCE.append('source/awsa/source/core/awsa_core.c');
SOURCE.append('source/awsa/source/core/awsa_core_ctl.c');
SOURCE.append('source/awsa/source/core/awsa_core_jack.c');
SOURCE.append('source/awsa/source/core/awsa_core_mixer.c');
SOURCE.append('source/awsa/source/core/awsa_core_pcm.c');
SOURCE.append('source/awsa/source/core/awsa_core_pcm_lib.c');
SOURCE.append('source/awsa/source/core/awsa_core_tlv.c');
SOURCE.append('source/awsa/source/soc/awsa_soc.c');
SOURCE.append('source/awsa/source/soc/awsa_soc_dai.c');
SOURCE.append('source/awsa/source/soc/awsa_soc_dapm.c');
SOURCE.append('source/awsa/source/soc/awsa_soc_jack.c');
SOURCE.append('source/awsa/source/soc/codec/awbl_uda1380.c');
SOURCE.append('source/awsa/source/soc/codec/awbl_wm8960.c');

SOURCE.append('source/aw_mp3/source/aw_mp3.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_buf.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_bit.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_frame.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_layer.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_stream.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_synth.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_dec_table.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_huffman.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_rngbuf.c');
SOURCE.append('source/aw_mp3/source/aw_mp3_time.c');

#SOURCE = [REL_COMMON_SOURCE_PATH + src for src in SOURCE]
#SOURCE_CLK = [REL_COMMON_SOURCE_PATH + src for src in SOURCE_CLK]

#imxrt10xx_common
RT_COMMON_REL_DIR = os.path.join('../../../')
RT_COMMON_ABS_DIR = build_common_config.BOARD_COMMON_PATH

#添加imxrt10xx_common中的驱动与头文件
if not hasattr(build_common_config, 'BUILD_CONFIG_PATH'):
    build_common_config.BUILD_CONFIG_PATH = os.path.join(build_common_config.PROJECT_ROOT, 'build_config')
COMMON_DRIVERS_CONFIG = os.path.join(build_common_config.BUILD_CONFIG_PATH, 'common_drivers.json')
SOURCE_COMMON, HEADERS_COMMON = get_common_drivers(COMMON_DRIVERS_CONFIG, RT_COMMON_ABS_DIR, '../../../' + os.path.sep)

#头文件添加
INCLUDE = list(build_common_config.AW_COMMON_INCLUDE)
INCLUDE.append(os.path.join(RT_COMMON_REL_DIR,'include'))
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'components/clock/include') )
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'components/base/include') )
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'components/fb/include') )
INCLUDE.append(aw_lwip_config.LWIP_INCLUDE)
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'components/usb/include') )
INCLUDE.append(os.path.join(build_common_config.AW_SDK_INSTALL_PATH, 'include'))

#net
INCLUDE.append(build_common_config.AWORKS_ROOT + 'components/net/core/include')
INCLUDE.append(build_common_config.AWORKS_ROOT + 'components/net/dhcp_server/include')
INCLUDE.append(build_common_config.AWORKS_ROOT + 'components/net/ping/include')

#gui头文件的添加
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'3rdparty/gui/ucGUI5_36/include') )
INCLUDE.append(os.path.join(build_common_config.AWORKS_ROOT,'components/gui/emwin5xx_adapter/include') )

#音频框架头文件添加
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/awsa/include') )
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/awsa/include/core') )
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/awsa/include/soc') )
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/awsa/include/soc/codec') )
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/aw_mp3/include') )
INCLUDE.append(os.path.join (ABS_COMMON_SOURCE_PATH, 'source/aw_mp3/include_internal') )

CPPDEFINES= env['CPPDEFINES']

lib_file_cpu1=env.StaticLibrary('aw_cpu_1',SOURCE,CPPPATH = INCLUDE ,CPPDEFINES=CPPDEFINES)
lib_file_clk=env.StaticLibrary('aw_cpu_clk',SOURCE_CLK,CPPPATH = INCLUDE ,CPPDEFINES=CPPDEFINES)
lib_file_rt_common=env.StaticLibrary('aw_cpu_rt_common',SOURCE_COMMON,CPPPATH = INCLUDE ,CPPDEFINES=CPPDEFINES)

lib_file_name = env['LIBPREFIX'] + 'aw_cpu' + env['LIBSUFFIX']
libraries_list = [lib_file_clk,lib_file_cpu1,lib_file_rt_common]
env.merge_lib(lib_file_name, libraries_list)
lib_file = [File(lib_file_name)]

# 安装RT COMMON头文件
RT_COMMON_INCLUDE_DIR=os.path.join(RT_COMMON_ABS_DIR,'include')
RT_COMMON_INCLUDE_DIR=os.path.realpath(RT_COMMON_INCLUDE_DIR)

if not RT_COMMON_INCLUDE_DIR.endswith(os.path.sep):
    RT_COMMON_INCLUDE_DIR += os.path.sep
RT_COMMON_INCLUDE_INSTALL_BASE_DIR = os.path.join(build_common_config.AW_SDK_INSTALL_PATH,'include','cpu')

for header in HEADERS_COMMON:
    header=os.path.realpath(header)
    if not header.startswith(RT_COMMON_INCLUDE_DIR):
        raise IOError
    header_install_dir=header[len(RT_COMMON_INCLUDE_DIR):]
    header_install_dir = os.path.dirname(header_install_dir)
    header_install_dir = os.path.join(RT_COMMON_INCLUDE_INSTALL_BASE_DIR,header_install_dir)

Return('lib_file')
